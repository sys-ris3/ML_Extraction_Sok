From f7ee8802cf1bb3a6419c216ed37eab624f3eb694 Mon Sep 17 00:00:00 2001
From: Zhichuang Sun <sun.zhi@husky.neu.edu>
Date: Fri, 15 May 2020 06:21:26 +0000
Subject: [PATCH 3/9] add tensorflow custom op tee_shadow

Signed-off-by: Zhichuang Sun <sun.zhi@husky.neu.edu>
---
 BUILD                                              |   1 +
 MANIFEST.in                                        |   1 +
 WORKSPACE                                          |  12 ++-
 build_pip_pkg.sh                                   |   1 +
 tensorflow_tee_shadow/.gitignore                   |   1 +
 tensorflow_tee_shadow/BUILD                        |  67 +++++++++++++
 tensorflow_tee_shadow/__init__.py                  |  19 ++++
 .../cc/kernels/tee_shadow_kernels.cc               |  96 +++++++++++++++++++
 tensorflow_tee_shadow/cc/ops/tee_shadow_ops.cc     | 105 +++++++++++++++++++++
 tensorflow_tee_shadow/python/__init__.py           |   1 +
 tensorflow_tee_shadow/python/ops/__init__.py       |   1 +
 tensorflow_tee_shadow/python/ops/tee_shadow_ops.py |  26 +++++
 .../python/ops/tee_shadow_ops_test.py              |  47 +++++++++
 13 files changed, 377 insertions(+), 1 deletion(-)
 create mode 100644 tensorflow_tee_shadow/.gitignore
 create mode 100644 tensorflow_tee_shadow/BUILD
 create mode 100644 tensorflow_tee_shadow/__init__.py
 create mode 100644 tensorflow_tee_shadow/cc/kernels/tee_shadow_kernels.cc
 create mode 100644 tensorflow_tee_shadow/cc/ops/tee_shadow_ops.cc
 create mode 100644 tensorflow_tee_shadow/python/__init__.py
 create mode 100644 tensorflow_tee_shadow/python/ops/__init__.py
 create mode 100644 tensorflow_tee_shadow/python/ops/tee_shadow_ops.py
 create mode 100644 tensorflow_tee_shadow/python/ops/tee_shadow_ops_test.py

diff --git a/BUILD b/BUILD
index 8000ee6..4bfd4d7 100644
--- a/BUILD
+++ b/BUILD
@@ -10,5 +10,6 @@ sh_binary(
         "//tensorflow_add_mask:add_mask_py",
         "//tensorflow_linear_transform:linear_transform_py",
         "//tensorflow_shuffle_channel:shuffle_channel_py",
+        "//tensorflow_tee_shadow:tee_shadow_py",
     ],
 )
diff --git a/MANIFEST.in b/MANIFEST.in
index 1444a9f..29f92c4 100644
--- a/MANIFEST.in
+++ b/MANIFEST.in
@@ -3,3 +3,4 @@ recursive-include tensorflow_time_two *.so
 recursive-include tensorflow_add_mask *.so
 recursive-include tensorflow_linear_transform *.so
 recursive-include tensorflow_shuffle_channel *.so
+recursive-include tensorflow_tee_shadow *.so
diff --git a/WORKSPACE b/WORKSPACE
index a37e96d..cab2e2d 100644
--- a/WORKSPACE
+++ b/WORKSPACE
@@ -3,4 +3,14 @@ load("//gpu:cuda_configure.bzl", "cuda_configure")
 
 tf_configure(name = "local_config_tf")
 
-cuda_configure(name = "local_config_cuda")
\ No newline at end of file
+cuda_configure(name = "local_config_cuda")
+
+# use remote github repo,
+load("@bazel_tools//tools/build_defs/repo:git.bzl", "new_git_repository")
+new_git_repository(
+    name = "darknet",
+    build_file = "//third_party/darknet:darknet.BUILD",
+    #tag = "modelsafe.v2",
+    branch= "master",
+    remote = "/root/darknet",
+)
diff --git a/build_pip_pkg.sh b/build_pip_pkg.sh
index cdb8efa..3c15481 100755
--- a/build_pip_pkg.sh
+++ b/build_pip_pkg.sh
@@ -72,6 +72,7 @@ function main() {
   rsync -avm -L --exclude='*_test.py' ${PIP_FILE_PREFIX}tensorflow_add_mask "${TMPDIR}"
   rsync -avm -L --exclude='*_test.py' ${PIP_FILE_PREFIX}tensorflow_linear_transform "${TMPDIR}"
   rsync -avm -L --exclude='*_test.py' ${PIP_FILE_PREFIX}tensorflow_shuffle_channel "${TMPDIR}"
+  rsync -avm -L --exclude='*_test.py' ${PIP_FILE_PREFIX}tensorflow_tee_shadow "${TMPDIR}"
 
   pushd ${TMPDIR}
   echo $(date) : "=== Building wheel"
diff --git a/tensorflow_tee_shadow/.gitignore b/tensorflow_tee_shadow/.gitignore
new file mode 100644
index 0000000..c18dd8d
--- /dev/null
+++ b/tensorflow_tee_shadow/.gitignore
@@ -0,0 +1 @@
+__pycache__/
diff --git a/tensorflow_tee_shadow/BUILD b/tensorflow_tee_shadow/BUILD
new file mode 100644
index 0000000..d8b4a65
--- /dev/null
+++ b/tensorflow_tee_shadow/BUILD
@@ -0,0 +1,67 @@
+licenses(["notice"])  # Apache 2.0
+
+package(default_visibility = ["//visibility:public"])
+
+config_setting(
+    name = "windows",
+    constraint_values = ["@bazel_tools//platforms:windows"],
+)
+
+cc_binary(
+    name = 'python/ops/_tee_shadow_ops.so',
+    srcs = [
+        "cc/kernels/tee_shadow_kernels.cc",
+        "cc/ops/tee_shadow_ops.cc",
+    ],
+    linkshared = 1,
+    deps = [
+        "@local_config_tf//:libtensorflow_framework",
+        "@local_config_tf//:tf_header_lib",
+        "@darknet//:libdarknet",
+        "//third_party/darknet:tee_shadow_net",
+    ],
+    features = select({
+        ":windows": ["windows_export_all_symbols"],
+        "//conditions:default": [],
+    }),
+    copts = select({
+        ":windows": ["/DEIGEN_STRONG_INLINE=inline", "-DTENSORFLOW_MONOLITHIC_BUILD", "/DPLATFORM_WINDOWS", "/DEIGEN_HAS_C99_MATH", "/DTENSORFLOW_USE_EIGEN_THREADPOOL", "/DEIGEN_AVOID_STL_ARRAY", "/Iexternal/gemmlowp", "/wd4018", "/wd4577", "/DNOGDI", "/UTF_COMPILE_LIBRARY"],
+        "//conditions:default": ["-pthread", "-std=c++11", "-D_GLIBCXX_USE_CXX11_ABI=0"],
+    }),
+)
+
+py_library(
+    name = "tee_shadow_ops_py",
+    srcs = ([
+        "python/ops/tee_shadow_ops.py",
+    ]),
+    data = [
+        ":python/ops/_tee_shadow_ops.so"
+    ],
+    srcs_version = "PY2AND3",
+)
+
+py_test(
+    name = "tee_shadow_ops_py_test",
+    srcs = [
+        "python/ops/tee_shadow_ops_test.py"
+    ],
+    main = "python/ops/tee_shadow_ops_test.py",
+    deps = [
+        ":tee_shadow_ops_py",
+    ],
+    srcs_version = "PY2AND3",
+)
+
+py_library(
+    name = "tee_shadow_py",
+    srcs = ([
+        "__init__.py",
+        "python/__init__.py",
+        "python/ops/__init__.py",
+    ]),
+    deps = [
+        ":tee_shadow_ops_py"
+    ],
+    srcs_version = "PY2AND3",
+)
diff --git a/tensorflow_tee_shadow/__init__.py b/tensorflow_tee_shadow/__init__.py
new file mode 100644
index 0000000..a825100
--- /dev/null
+++ b/tensorflow_tee_shadow/__init__.py
@@ -0,0 +1,19 @@
+# Copyright 2018 The TensorFlow Authors. All Rights Reserved.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+# ==============================================================================
+"""TensorFlow custom op example."""
+
+from __future__ import absolute_import
+
+from tensorflow_tee_shadow.python.ops.tee_shadow_ops import tee_shadow 
diff --git a/tensorflow_tee_shadow/cc/kernels/tee_shadow_kernels.cc b/tensorflow_tee_shadow/cc/kernels/tee_shadow_kernels.cc
new file mode 100644
index 0000000..3ff8fff
--- /dev/null
+++ b/tensorflow_tee_shadow/cc/kernels/tee_shadow_kernels.cc
@@ -0,0 +1,96 @@
+/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.
+
+Licensed under the Apache License, Version 2.0 (the "License");
+you may not use this file except in compliance with the License.
+You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+==============================================================================*/
+
+#include "tensorflow/core/framework/op_kernel.h"
+#include "tensorflow/core/framework/register_types.h"
+#include "tensorflow/core/framework/tensor_shape.h"
+#include "third_party/darknet/tee_shadow_net.h"
+
+using namespace tensorflow;
+
+template <typename T>
+class TeeShadowOp : public OpKernel {
+ public:
+  explicit TeeShadowOp(OpKernelConstruction* context) : OpKernel(context) {
+      OP_REQUIRES_OK(context,
+              context->GetAttr("units", &units_));
+      OP_REQUIRES_OK(context,
+              context->GetAttr("pos", &position_));
+      OP_REQUIRES(context, units_ >= 0,
+              errors::InvalidArgument("units out of range"));
+      // TODO add further checks make sure position_ is in a list ("conv1", ..., "results")
+  }
+
+  void Compute(OpKernelContext* context) override {
+    // Grab the input tensor
+    const Tensor& input_tensor = context->input(0);
+    const TensorShape& input_shape = input_tensor.shape();
+
+    // check input is "NHWC" 
+    DCHECK_EQ(input_shape.dims(),4);
+
+    // create output shape
+    TensorShape output_shape;
+
+    if(position_.compare("results") == 0) { // results shape(batch, channels)
+      CHECK_GT(units_, 0);
+      output_shape.AddDim(input_shape.dim_size(0));
+      output_shape.AddDim(units_);
+    } else if(position_.compare(0, 2, "pw") == 0 ||
+        position_.compare(0, 4, "conv") == 0) { 
+      CHECK_GT(units_, 0);
+      output_shape.AddDim(input_shape.dim_size(0));
+      if (position_.compare(0, 8, "pwconv13") == 0) { // handle avgpool
+        output_shape.AddDim(1);
+        output_shape.AddDim(1);
+      } else {
+        output_shape.AddDim(input_shape.dim_size(1));
+        output_shape.AddDim(input_shape.dim_size(2));
+      }
+      output_shape.AddDim(units_);
+    } else {
+      output_shape.AddDim(input_shape.dim_size(0));
+      output_shape.AddDim(input_shape.dim_size(1));
+      output_shape.AddDim(input_shape.dim_size(2));
+      output_shape.AddDim(input_shape.dim_size(3));
+    }
+    
+    // Create an output tensor
+    Tensor* output_tensor = NULL;
+    OP_REQUIRES_OK(context, context->allocate_output(0, output_shape,
+                                                     &output_tensor));
+
+    // get the corresponding Eigen tensors for data access
+    const void *input_flat = input_tensor.flat<T>().data();
+    void *output_flat = output_tensor->flat<T>().data();
+
+    const char *shadow_pos = position_.c_str();
+    darknet_predict(shadow_pos, input_flat, output_flat);
+    return;
+  }
+
+ private:
+  int units_;
+  string position_;
+};
+
+#define REGISTER_KERNEL(type)                                       \
+  REGISTER_KERNEL_BUILDER(                                          \
+      Name("TeeShadow").Device(DEVICE_CPU).TypeConstraint<type>("T"), \
+      TeeShadowOp<type>)
+
+//TF_CALL_REAL_NUMBER_TYPES(REGISTER_KERNEL);
+REGISTER_KERNEL(float);
+#undef REGISTER_KERNEL
diff --git a/tensorflow_tee_shadow/cc/ops/tee_shadow_ops.cc b/tensorflow_tee_shadow/cc/ops/tee_shadow_ops.cc
new file mode 100644
index 0000000..2fd39a9
--- /dev/null
+++ b/tensorflow_tee_shadow/cc/ops/tee_shadow_ops.cc
@@ -0,0 +1,105 @@
+/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.
+
+Licensed under the Apache License, Version 2.0 (the "License");
+you may not use this file except in compliance with the License.
+You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+==============================================================================*/
+
+#include "tensorflow/core/framework/op.h"
+#include "tensorflow/core/framework/register_types.h"
+#include "tensorflow/core/framework/shape_inference.h"
+
+using namespace tensorflow;
+
+REGISTER_OP("TeeShadow")
+    .Attr("T: realnumbertype")
+    .Attr("units: int = 0")
+    .Attr("pos: string = 'conv1'")
+    .Input("input: T")
+    .Output("output: T")
+    .SetShapeFn([](::tensorflow::shape_inference::InferenceContext* c) {
+      shape_inference::ShapeHandle input_shape;
+      shape_inference::ShapeHandle output_shape;
+      TF_RETURN_IF_ERROR(c->WithRank(c->input(0), 4, &input_shape));
+
+	  // assuming data format NHWC
+	  int channel_dim_index = 3;
+      int units;
+      string shadow_position;
+      std::vector<::tensorflow::shape_inference::DimensionHandle> output_dims;
+      TF_RETURN_IF_ERROR(c->GetAttr("units", &units));
+      TF_RETURN_IF_ERROR(c->GetAttr("pos", &shadow_position));
+
+      // create units dim
+      shape_inference::DimensionHandle units_handle = c->MakeDim(units);
+      shape_inference::DimensionHandle one_handle = c->MakeDim(1);
+
+      if(shadow_position.compare("results") == 0) { // results shape(batch, channels)
+        output_dims.emplace_back(c->Dim(input_shape, 0));
+        output_dims.emplace_back(units_handle);
+        c->set_output(0, c->MakeShape(output_dims));
+      } else if(shadow_position.compare(0, 2, "pw") == 0 ||
+        shadow_position.compare(0, 4, "conv") == 0) { 
+        TF_RETURN_IF_ERROR(c->ReplaceDim(input_shape, channel_dim_index, units_handle, &output_shape));
+        if (shadow_position.compare(0,8,"pwconv13") == 0) {// avgpool
+            TF_RETURN_IF_ERROR(c->ReplaceDim(output_shape, 1, one_handle, &output_shape));
+            TF_RETURN_IF_ERROR(c->ReplaceDim(output_shape, 2, one_handle, &output_shape));
+        }
+        c->set_output(0, output_shape);
+      } else {
+        c->set_output(0, c->input(0));
+      }
+
+      return Status::OK();
+    })
+    .Doc(R"doc(
+Forward following non-linear or secret layers to tee ShadowNet for computation.
+
+Attribute "pos" refer to the position of this operation, it affect which tee shadow
+model to load. When "pos" is "results", it means the following layer do the prediction. 
+
+Attribute "units" refer to the channel numbers after computation. If following shadow
+layers contains LinearTransform Op, then the output channel changes, otherwise the input
+shape should be the same as output shape. 
+
+The config for mobilenet. Key(e.g. "conv1") refers to position of the tee shadow layers.
+For "conv1", it means this tee shadow op is inserted after "conv1" in the original mobilenet
+model. (Ignore the Value(e.g. ("A", 3)) for now.)
+
+    model_config = {"conv1":("A",3),\
+                    "dwconv1":("B",9),\
+                    "pwconv1":("C",15),\
+                    "dwconv2":("B",23),\
+                    "pwconv2":("C",29),\
+                    "dwconv3":("B",36),\
+                    "pwconv3":("C",42),\
+                    "dwconv4":("B",50),\
+                    "pwconv4":("C",56),\
+                    "dwconv5":("B",63),\
+                    "pwconv5":("C",69),\
+                    "dwconv6":("B",77),\
+                    "pwconv6":("C",83),\
+                    "dwconv7":("B",90),\
+                    "pwconv7":("C",96),\
+                    "dwconv8":("B",103),\
+                    "pwconv8":("C",109),\
+                    "dwconv9":("B",116),\
+                    "pwconv9":("C",122),\
+                    "dwconv10":("B",129),\
+                    "pwconv10":("C",135),\
+                    "dwconv11":("B",142),\
+                    "pwconv11":("C",148),\
+                    "dwconv12":("B",156),\
+                    "pwconv12":("C",162),\
+                    "dwconv13":("B",169),\
+                    "pwconv13":("P",175),\
+                    "results":("R",184)}
+)doc");
diff --git a/tensorflow_tee_shadow/python/__init__.py b/tensorflow_tee_shadow/python/__init__.py
new file mode 100644
index 0000000..8b13789
--- /dev/null
+++ b/tensorflow_tee_shadow/python/__init__.py
@@ -0,0 +1 @@
+
diff --git a/tensorflow_tee_shadow/python/ops/__init__.py b/tensorflow_tee_shadow/python/ops/__init__.py
new file mode 100644
index 0000000..8b13789
--- /dev/null
+++ b/tensorflow_tee_shadow/python/ops/__init__.py
@@ -0,0 +1 @@
+
diff --git a/tensorflow_tee_shadow/python/ops/tee_shadow_ops.py b/tensorflow_tee_shadow/python/ops/tee_shadow_ops.py
new file mode 100644
index 0000000..ede90d2
--- /dev/null
+++ b/tensorflow_tee_shadow/python/ops/tee_shadow_ops.py
@@ -0,0 +1,26 @@
+# Copyright 2018 The Sonnet Authors. All Rights Reserved.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#    http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+# ============================================================================
+"""Use tee_shadow ops in python."""
+
+from __future__ import absolute_import
+from __future__ import division
+from __future__ import print_function
+
+from tensorflow.python.framework import load_library
+from tensorflow.python.platform import resource_loader
+
+tee_shadow_ops = load_library.load_op_library(
+    resource_loader.get_path_to_datafile('_tee_shadow_ops.so'))
+tee_shadow = tee_shadow_ops.tee_shadow
diff --git a/tensorflow_tee_shadow/python/ops/tee_shadow_ops_test.py b/tensorflow_tee_shadow/python/ops/tee_shadow_ops_test.py
new file mode 100644
index 0000000..70f7acb
--- /dev/null
+++ b/tensorflow_tee_shadow/python/ops/tee_shadow_ops_test.py
@@ -0,0 +1,47 @@
+# Copyright 2018 The Sonnet Authors. All Rights Reserved.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#    http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+# ============================================================================
+"""Tests for tee_shadow ops."""
+from __future__ import absolute_import
+from __future__ import division
+from __future__ import print_function
+
+import numpy as np
+
+from tensorflow.python.platform import test
+try:
+  from tensorflow_tee_shadow.python.ops.tee_shadow_ops import tee_shadow
+except ImportError:
+  from tee_shadow_ops import tee_shadow
+
+
+class TeeShadowTest(test.TestCase):
+
+  def testTeeShadow(self):
+    with self.test_session():
+      self.assertAllClose(
+          tee_shadow(pos="conv1", units=32, input=
+              [[[[1.0, 2.0, 3.0], 
+                 [3.0, 4.0, 5.0]], 
+                [[4.0, 3.0, 2.0],
+                 [2.0, 1.0, 1.0]]]]),
+                np.array(
+                [[[[3.2, 3.1], 
+                 [5.4, 5.3]], 
+                [[2.3, 2.4],
+                 [1.1, 1.2]]]]))
+
+
+if __name__ == '__main__':
+  test.main()
-- 
2.7.4

