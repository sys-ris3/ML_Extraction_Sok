From ffa9c175849fd1b5108871870cf8afab3d345af4 Mon Sep 17 00:00:00 2001
From: Zhichuang Sun <sun.zhi@husky.neu.edu>
Date: Fri, 14 Aug 2020 01:33:51 +0000
Subject: [PATCH 9/9] add custom op: tensorflow_linear_transform_generic

Signed-off-by: Zhichuang Sun <sun.zhi@husky.neu.edu>
---
 BUILD                                              |   1 +
 MANIFEST.in                                        |   1 +
 build_pip_pkg.sh                                   |   1 +
 tensorflow_linear_transform_generic/BUILD          |  65 +++++++++++++
 tensorflow_linear_transform_generic/__init__.py    |  19 ++++
 .../cc/kernels/linear_transform_generic_kernels.cc | 102 +++++++++++++++++++++
 .../cc/ops/linear_transform_generic_ops.cc         |  62 +++++++++++++
 .../python/__init__.py                             |   1 +
 .../python/ops/__init__.py                         |   1 +
 .../python/ops/linear_transform_generic_ops.py     |  26 ++++++
 .../ops/linear_transform_generic_ops_test.py       |  51 +++++++++++
 .../cc/kernels/tee_shadow_generic_kernels.cc       |   1 +
 12 files changed, 331 insertions(+)
 create mode 100644 tensorflow_linear_transform_generic/BUILD
 create mode 100644 tensorflow_linear_transform_generic/__init__.py
 create mode 100644 tensorflow_linear_transform_generic/cc/kernels/linear_transform_generic_kernels.cc
 create mode 100644 tensorflow_linear_transform_generic/cc/ops/linear_transform_generic_ops.cc
 create mode 100644 tensorflow_linear_transform_generic/python/__init__.py
 create mode 100644 tensorflow_linear_transform_generic/python/ops/__init__.py
 create mode 100644 tensorflow_linear_transform_generic/python/ops/linear_transform_generic_ops.py
 create mode 100644 tensorflow_linear_transform_generic/python/ops/linear_transform_generic_ops_test.py

diff --git a/BUILD b/BUILD
index 867e7ae..9b78430 100644
--- a/BUILD
+++ b/BUILD
@@ -9,6 +9,7 @@ sh_binary(
         "//tensorflow_time_two:time_two_py",
         "//tensorflow_add_mask:add_mask_py",
         "//tensorflow_linear_transform:linear_transform_py",
+        "//tensorflow_linear_transform_generic:linear_transform_generic_py",
         "//tensorflow_shuffle_channel:shuffle_channel_py",
         "//tensorflow_tee_shadow:tee_shadow_py",
         "//tensorflow_tee_shadow_generic:tee_shadow_generic_py",
diff --git a/MANIFEST.in b/MANIFEST.in
index c446af9..71fe943 100644
--- a/MANIFEST.in
+++ b/MANIFEST.in
@@ -2,6 +2,7 @@ recursive-include tensorflow_zero_out *.so
 recursive-include tensorflow_time_two *.so
 recursive-include tensorflow_add_mask *.so
 recursive-include tensorflow_linear_transform *.so
+recursive-include tensorflow_linear_transform_generic *.so
 recursive-include tensorflow_shuffle_channel *.so
 recursive-include tensorflow_tee_shadow *.so
 recursive-include tensorflow_tee_shadow_generic *.so
diff --git a/build_pip_pkg.sh b/build_pip_pkg.sh
index 86c000a..743e450 100755
--- a/build_pip_pkg.sh
+++ b/build_pip_pkg.sh
@@ -71,6 +71,7 @@ function main() {
   rsync -avm -L --exclude='*_test.py' ${PIP_FILE_PREFIX}tensorflow_time_two "${TMPDIR}"
   rsync -avm -L --exclude='*_test.py' ${PIP_FILE_PREFIX}tensorflow_add_mask "${TMPDIR}"
   rsync -avm -L --exclude='*_test.py' ${PIP_FILE_PREFIX}tensorflow_linear_transform "${TMPDIR}"
+  rsync -avm -L --exclude='*_test.py' ${PIP_FILE_PREFIX}tensorflow_linear_transform_generic "${TMPDIR}"
   rsync -avm -L --exclude='*_test.py' ${PIP_FILE_PREFIX}tensorflow_shuffle_channel "${TMPDIR}"
   rsync -avm -L --exclude='*_test.py' ${PIP_FILE_PREFIX}tensorflow_tee_shadow "${TMPDIR}"
   rsync -avm -L --exclude='*_test.py' ${PIP_FILE_PREFIX}tensorflow_tee_shadow_generic "${TMPDIR}"
diff --git a/tensorflow_linear_transform_generic/BUILD b/tensorflow_linear_transform_generic/BUILD
new file mode 100644
index 0000000..e4a4731
--- /dev/null
+++ b/tensorflow_linear_transform_generic/BUILD
@@ -0,0 +1,65 @@
+licenses(["notice"])  # Apache 2.0
+
+package(default_visibility = ["//visibility:public"])
+
+config_setting(
+    name = "windows",
+    constraint_values = ["@bazel_tools//platforms:windows"],
+)
+
+cc_binary(
+    name = 'python/ops/_linear_transform_generic_ops.so',
+    srcs = [
+        "cc/kernels/linear_transform_generic_kernels.cc",
+        "cc/ops/linear_transform_generic_ops.cc",
+    ],
+    linkshared = 1,
+    deps = [
+        "@local_config_tf//:libtensorflow_framework",
+        "@local_config_tf//:tf_header_lib",
+    ],
+    features = select({
+        ":windows": ["windows_export_all_symbols"],
+        "//conditions:default": [],
+    }),
+    copts = select({
+        ":windows": ["/DEIGEN_STRONG_INLINE=inline", "-DTENSORFLOW_MONOLITHIC_BUILD", "/DPLATFORM_WINDOWS", "/DEIGEN_HAS_C99_MATH", "/DTENSORFLOW_USE_EIGEN_THREADPOOL", "/DEIGEN_AVOID_STL_ARRAY", "/Iexternal/gemmlowp", "/wd4018", "/wd4577", "/DNOGDI", "/UTF_COMPILE_LIBRARY"],
+        "//conditions:default": ["-pthread", "-std=c++11", "-D_GLIBCXX_USE_CXX11_ABI=0"],
+    }),
+)
+
+py_library(
+    name = "linear_transform_generic_ops_py",
+    srcs = ([
+        "python/ops/linear_transform_generic_ops.py",
+    ]),
+    data = [
+        ":python/ops/_linear_transform_generic_ops.so"
+    ],
+    srcs_version = "PY2AND3",
+)
+
+py_test(
+    name = "linear_transform_generic_ops_py_test",
+    srcs = [
+        "python/ops/linear_transform_generic_ops_test.py"
+    ],
+    main = "python/ops/linear_transform_generic_ops_test.py",
+    deps = [
+        ":linear_transform_generic_ops_py",
+    ],
+    srcs_version = "PY2AND3",
+)
+
+py_library(
+    name = "linear_transform_generic_py",
+    srcs = ([
+        "__init__.py",
+        "python/__init__.py",
+        "python/ops/__init__.py",
+    ]),
+    deps = [
+        ":linear_transform_generic_ops_py"
+    ],
+    srcs_version = "PY2AND3",
+)
diff --git a/tensorflow_linear_transform_generic/__init__.py b/tensorflow_linear_transform_generic/__init__.py
new file mode 100644
index 0000000..0962fe5
--- /dev/null
+++ b/tensorflow_linear_transform_generic/__init__.py
@@ -0,0 +1,19 @@
+# Copyright 2018 The TensorFlow Authors. All Rights Reserved.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+# ==============================================================================
+"""TensorFlow custom op example."""
+
+from __future__ import absolute_import
+
+from tensorflow_linear_transform_generic.python.ops.linear_transform_generic_ops import linear_transform_generic 
diff --git a/tensorflow_linear_transform_generic/cc/kernels/linear_transform_generic_kernels.cc b/tensorflow_linear_transform_generic/cc/kernels/linear_transform_generic_kernels.cc
new file mode 100644
index 0000000..5fc09ff
--- /dev/null
+++ b/tensorflow_linear_transform_generic/cc/kernels/linear_transform_generic_kernels.cc
@@ -0,0 +1,102 @@
+/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.
+
+Licensed under the Apache License, Version 2.0 (the "License");
+you may not use this file except in compliance with the License.
+You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+==============================================================================*/
+
+#include "tensorflow/core/framework/op_kernel.h"
+#include "tensorflow/core/framework/register_types.h"
+#include "tensorflow/core/framework/tensor_shape.h"
+
+using namespace tensorflow;
+
+template <typename T>
+class LinearTransformGenericOp : public OpKernel {
+ public:
+  explicit LinearTransformGenericOp(OpKernelConstruction* context) : OpKernel(context) {}
+
+  void Compute(OpKernelContext* context) override {
+    // Grab the input tensor
+    const Tensor& input_tensor = context->input(0);
+
+    // Grab the weights tensor
+    const Tensor& weights_tensor = context->input(1);
+
+    // Grab the random scalar tensor
+    const Tensor& rscalar_tensor = context->input(2);
+
+    // Grab the random scalar tensor
+    const Tensor& bias_tensor = context->input(3);
+
+    // check shapes of input, weights and rscalar
+    const TensorShape& input_shape = input_tensor.shape();
+    const TensorShape& weights_shape = weights_tensor.shape();
+    const TensorShape& rscalar_shape = rscalar_tensor.shape();
+    const TensorShape& bias_shape = bias_tensor.shape();
+    
+    // check input is "NHWC" 
+    DCHECK_EQ(input_shape.dims(),4);
+	// check rscalar is [r1, ..., rn]
+    DCHECK_EQ(rscalar_shape.dims(), 1);
+    DCHECK_EQ(bias_shape.dims(), 1);
+	// check weights is [[w11, ..., w1n],[w21,...,w2n]]
+    DCHECK_EQ(weights_shape.dims(), 2);
+    DCHECK_EQ(weights_shape.dim_size(1), rscalar_shape.dim_size(0));
+    DCHECK_EQ(weights_shape.dim_size(1), bias_shape.dim_size(0));
+    
+   // create output shape
+    TensorShape output_shape;
+    output_shape.AddDim(input_shape.dim_size(0));
+    output_shape.AddDim(input_shape.dim_size(1));
+    output_shape.AddDim(input_shape.dim_size(2));
+    output_shape.AddDim(weights_shape.dim_size(1));
+
+
+    // Create an output tensor
+    Tensor* output_tensor = NULL;
+    OP_REQUIRES_OK(context, context->allocate_output(0, output_shape,
+                                                     &output_tensor));
+
+    // get the corresponding Eigen tensors for data access
+    auto input= input_tensor.tensor<T, 4>();
+    auto weights= weights_tensor.tensor<int32, 2>();
+    auto rscalar = rscalar_tensor.tensor<T,1>();
+    auto bias = bias_tensor.tensor<T,1>();
+    auto output = output_tensor->tensor<T, 4>();
+
+	int idx_from, idx_rand;
+	T scalar;
+    for (int i = 0; i < output_tensor->shape().dim_size(0); i++) {
+      for (int j = 0; j < output_tensor->shape().dim_size(1); j++) {
+      	for (int k = 0; k < output_tensor->shape().dim_size(2); k++) {
+      	  for (int n = 0; n < output_tensor->shape().dim_size(3); n++) {
+            idx_from = weights(0,n);
+            idx_rand = weights(1,n);
+            scalar = rscalar(n);
+
+        	output(i,j,k,n) = 
+               input(i, j, k, idx_from) * scalar + input(i,j,k,idx_rand) + bias(n);
+		  }
+		}
+      }
+    }
+
+  }
+};
+
+#define REGISTER_KERNEL(type)                                       \
+  REGISTER_KERNEL_BUILDER(                                          \
+      Name("LinearTransformGeneric").Device(DEVICE_CPU).TypeConstraint<type>("T"), \
+      LinearTransformGenericOp<type>)
+
+TF_CALL_REAL_NUMBER_TYPES(REGISTER_KERNEL);
+#undef REGISTER_KERNEL
diff --git a/tensorflow_linear_transform_generic/cc/ops/linear_transform_generic_ops.cc b/tensorflow_linear_transform_generic/cc/ops/linear_transform_generic_ops.cc
new file mode 100644
index 0000000..8e6731f
--- /dev/null
+++ b/tensorflow_linear_transform_generic/cc/ops/linear_transform_generic_ops.cc
@@ -0,0 +1,62 @@
+/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.
+
+Licensed under the Apache License, Version 2.0 (the "License");
+you may not use this file except in compliance with the License.
+You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+==============================================================================*/
+
+#include "tensorflow/core/framework/op.h"
+#include "tensorflow/core/framework/register_types.h"
+#include "tensorflow/core/framework/shape_inference.h"
+
+using namespace tensorflow;
+
+REGISTER_OP("LinearTransformGeneric")
+    .Attr("T: realnumbertype")
+    .Input("input: T")
+    .Input("weights: int32")
+    .Input("scalar: T")
+    .Input("bias: T")
+    .Output("transformed: T")
+    .SetShapeFn([](::tensorflow::shape_inference::InferenceContext* c) {
+      shape_inference::ShapeHandle input_shape;
+      TF_RETURN_IF_ERROR(c->WithRank(c->input(0), 4, &input_shape));
+
+      shape_inference::ShapeHandle weight_shape;
+      TF_RETURN_IF_ERROR(c->WithRank(c->input(1), 2, &weight_shape));
+
+      shape_inference::ShapeHandle scalar_shape;
+      TF_RETURN_IF_ERROR(c->WithRank(c->input(2), 1, &scalar_shape));
+
+      shape_inference::ShapeHandle bias_shape;
+      TF_RETURN_IF_ERROR(c->WithRank(c->input(3), 1, &bias_shape));
+                
+      // Get number of weight channel
+      shape_inference::DimensionHandle weight_channel_dim = c->Dim(weight_shape, 1);
+
+	  // assuming data format NHWC
+	  int channel_dim_index = 3;
+      shape_inference::ShapeHandle output_shape;
+      TF_RETURN_IF_ERROR(c->ReplaceDim(input_shape, channel_dim_index, weight_channel_dim, &output_shape));
+
+      c->set_output(0, output_shape);
+
+      return Status::OK();
+    })
+    .Doc(R"doc(
+Apply linear transform on input tensor with weights and scalar.
+Assume weights has two dimension, recording from_idx and rand_idx in
+input Tensor. The output will be computed with the following formula:
+
+output[h][w][c] = input[h][w][from_idx]*scalar[c] + input[h][w][rand_idx] + bias[c]. 
+
+transformed: The transformed output Tensor. 
+)doc");
diff --git a/tensorflow_linear_transform_generic/python/__init__.py b/tensorflow_linear_transform_generic/python/__init__.py
new file mode 100644
index 0000000..8b13789
--- /dev/null
+++ b/tensorflow_linear_transform_generic/python/__init__.py
@@ -0,0 +1 @@
+
diff --git a/tensorflow_linear_transform_generic/python/ops/__init__.py b/tensorflow_linear_transform_generic/python/ops/__init__.py
new file mode 100644
index 0000000..8b13789
--- /dev/null
+++ b/tensorflow_linear_transform_generic/python/ops/__init__.py
@@ -0,0 +1 @@
+
diff --git a/tensorflow_linear_transform_generic/python/ops/linear_transform_generic_ops.py b/tensorflow_linear_transform_generic/python/ops/linear_transform_generic_ops.py
new file mode 100644
index 0000000..31d6050
--- /dev/null
+++ b/tensorflow_linear_transform_generic/python/ops/linear_transform_generic_ops.py
@@ -0,0 +1,26 @@
+# Copyright 2018 The Sonnet Authors. All Rights Reserved.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#    http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+# ============================================================================
+"""Use linear_transform_generic ops in python."""
+
+from __future__ import absolute_import
+from __future__ import division
+from __future__ import print_function
+
+from tensorflow.python.framework import load_library
+from tensorflow.python.platform import resource_loader
+
+linear_transform_generic_ops = load_library.load_op_library(
+    resource_loader.get_path_to_datafile('_linear_transform_generic_ops.so'))
+linear_transform_generic = linear_transform_generic_ops.linear_transform_generic
diff --git a/tensorflow_linear_transform_generic/python/ops/linear_transform_generic_ops_test.py b/tensorflow_linear_transform_generic/python/ops/linear_transform_generic_ops_test.py
new file mode 100644
index 0000000..70a6e04
--- /dev/null
+++ b/tensorflow_linear_transform_generic/python/ops/linear_transform_generic_ops_test.py
@@ -0,0 +1,51 @@
+# Copyright 2018 The Sonnet Authors. All Rights Reserved.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#    http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+# ============================================================================
+"""Tests for linear_transform_generic ops."""
+from __future__ import absolute_import
+from __future__ import division
+from __future__ import print_function
+
+import numpy as np
+
+from tensorflow.python.platform import test
+try:
+  from tensorflow_linear_transform_generic.python.ops.linear_transform_generic_ops import linear_transform_generic
+except ImportError:
+  from linear_transform_generic_ops import linear_transform_generic
+
+
+class LinearTransformGenericTest(test.TestCase):
+
+  def testLinearTransformGeneric(self):
+    with self.test_session():
+      self.assertAllClose(
+          linear_transform_generic(
+              [[[[1.0, 2.0, 3.0], 
+                 [3.0, 4.0, 5.0]], 
+                [[4.0, 3.0, 2.0],
+                 [2.0, 1.0, 1.0]]]],
+                [[1, 0],
+                 [2, 2]],
+                [0.1, 0.1]),
+                [0, 0]),
+                np.array(
+                [[[[3.2, 3.1], 
+                 [5.4, 5.3]], 
+                [[2.3, 2.4],
+                 [1.1, 1.2]]]]))
+
+
+if __name__ == '__main__':
+  test.main()
diff --git a/tensorflow_tee_shadow_generic/cc/kernels/tee_shadow_generic_kernels.cc b/tensorflow_tee_shadow_generic/cc/kernels/tee_shadow_generic_kernels.cc
index 10b165f..045e4e8 100644
--- a/tensorflow_tee_shadow_generic/cc/kernels/tee_shadow_generic_kernels.cc
+++ b/tensorflow_tee_shadow_generic/cc/kernels/tee_shadow_generic_kernels.cc
@@ -54,6 +54,7 @@ class TeeShadowGenericOp : public OpKernel {
 
     // TODO: Assume the last layer is always named "results"
     if(position_.compare("results") == 0) { // results shape(batch, channels)
+      CHECK_GT(c_, 0);
       output_shape.AddDim(input_shape.dim_size(0));
       output_shape.AddDim(c_);
     } else {
-- 
2.7.4

