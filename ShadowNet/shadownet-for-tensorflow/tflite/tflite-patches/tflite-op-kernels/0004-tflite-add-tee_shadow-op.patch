From 06d95e3c3e5c11248ce09ad8ddb10940ee4ea010 Mon Sep 17 00:00:00 2001
From: Zhichuang Sun <sun.zhi@husky.neu.edu>
Date: Fri, 15 May 2020 06:32:17 +0000
Subject: [PATCH 4/5] tflite: add tee_shadow op

Signed-off-by: Zhichuang Sun <sun.zhi@husky.neu.edu>
---
 WORKSPACE                               |   8 ++
 tensorflow/lite/kernels/BUILD           |  14 ++++
 tensorflow/lite/kernels/register.cc     |   2 +
 tensorflow/lite/kernels/register_ref.cc |   2 +
 tensorflow/lite/kernels/tee_shadow.cc   | 131 ++++++++++++++++++++++++++++++++
 5 files changed, 157 insertions(+)
 create mode 100644 tensorflow/lite/kernels/tee_shadow.cc

diff --git a/WORKSPACE b/WORKSPACE
index ed2ca8f..e65b140 100644
--- a/WORKSPACE
+++ b/WORKSPACE
@@ -123,6 +123,14 @@ new_git_repository(
     remote = "https://github.com/OP-TEE/optee_client",
 )
 
+new_git_repository(
+    name = "darknet",
+    build_file = "//third_party/darknet:darknet.BUILD",
+    #tag = "modelsafe.v1",
+    branch = "master",
+    remote = "/root/darknet",
+)
+
 # Required for dependency @com_github_grpc_grpc
 
 load("@com_github_grpc_grpc//bazel:grpc_deps.bzl", "grpc_deps")
diff --git a/tensorflow/lite/kernels/BUILD b/tensorflow/lite/kernels/BUILD
index b784b09..7ff2159 100644
--- a/tensorflow/lite/kernels/BUILD
+++ b/tensorflow/lite/kernels/BUILD
@@ -16,10 +16,16 @@ config_setting(
     define_values = {"tflite_with_tee": "true"},
 )
 
+config_setting(
+    name = "tflite_with_tee_emulated",
+    define_values = {"tflite_with_tee_emu": "true"},
+)
+
 cc_library(
     name = "tflite_with_tee",
     deps = select({
         ":tflite_with_tee_delegate": [":tflite_with_tee_enabled"],
+        ":tflite_with_tee_emulated": [":tflite_with_tee_emu_enabled"],
         "//conditions:default": [],
     }),
 )
@@ -31,6 +37,13 @@ cc_library(
     deps = ["//third_party/optee_delegate:tee_delegate"],
 )
 
+cc_library(
+    name = "tflite_with_tee_emu_enabled",
+    defines = ["TFLITE_TEE_EMULATED"],
+    visibility = ["//visibility:private"],
+    deps = ["//third_party/optee_delegate:tee_shadow_net"],
+)
+
 # Enables usage of ruy in TFLite kernels.
 # WARNING: This build flag is experimental and subject to change.
 config_setting(
@@ -524,6 +537,7 @@ cc_library(
         "strided_slice.cc",
         "sub.cc",
         "svdf.cc",
+        "tee_shadow.cc",
         "tile.cc",
         "topk_v2.cc",
         "transpose.cc",
diff --git a/tensorflow/lite/kernels/register.cc b/tensorflow/lite/kernels/register.cc
index f8a59b0..c3f71f5 100644
--- a/tensorflow/lite/kernels/register.cc
+++ b/tensorflow/lite/kernels/register.cc
@@ -28,6 +28,7 @@ TfLiteRegistration* Register_DETECTION_POSTPROCESS();
 TfLiteRegistration* Register_ADD_MASK();
 TfLiteRegistration* Register_LINEAR_TRANSFORM();
 TfLiteRegistration* Register_SHUFFLE_CHANNEL();
+TfLiteRegistration* Register_TEE_SHADOW();
 
 }  // namespace custom
 
@@ -298,6 +299,7 @@ BuiltinOpResolver::BuiltinOpResolver() {
   AddCustom("AddMask", tflite::ops::custom::Register_ADD_MASK());
   AddCustom("LinearTransform", tflite::ops::custom::Register_LINEAR_TRANSFORM());
   AddCustom("ShuffleChannel", tflite::ops::custom::Register_SHUFFLE_CHANNEL());
+  AddCustom("TeeShadow", tflite::ops::custom::Register_TEE_SHADOW());
 }
 
 }  // namespace builtin
diff --git a/tensorflow/lite/kernels/register_ref.cc b/tensorflow/lite/kernels/register_ref.cc
index 14019c2..c5089b1 100644
--- a/tensorflow/lite/kernels/register_ref.cc
+++ b/tensorflow/lite/kernels/register_ref.cc
@@ -27,6 +27,7 @@ TfLiteRegistration* Register_DETECTION_POSTPROCESS();
 TfLiteRegistration* Register_ADD_MASK();
 TfLiteRegistration* Register_LINEAR_TRANSFORM();
 TfLiteRegistration* Register_SHUFFLE_CHANNEL();
+TfLiteRegistration* Register_TEE_SHADOW();
 
 }  // namespace custom
 
@@ -302,6 +303,7 @@ BuiltinRefOpResolver::BuiltinRefOpResolver() {
   AddCustom("AddMask", tflite::ops::custom::Register_ADD_MASK());
   AddCustom("LinearTransform", tflite::ops::custom::Register_LINEAR_TRANSFORM());
   AddCustom("ShuffleChannel", tflite::ops::custom::Register_SHUFFLE_CHANNEL());
+  AddCustom("TeeShadow", tflite::ops::custom::Register_TEE_SHADOW());
 }
 
 }  // namespace builtin
diff --git a/tensorflow/lite/kernels/tee_shadow.cc b/tensorflow/lite/kernels/tee_shadow.cc
new file mode 100644
index 0000000..381e82f
--- /dev/null
+++ b/tensorflow/lite/kernels/tee_shadow.cc
@@ -0,0 +1,131 @@
+/* Copyright 2018 The TensorFlow Authors. All Rights Reserved.
+
+Licensed under the Apache License, Version 2.0 (the "License");
+you may not use this file except in compliance with the License.
+You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+==============================================================================*/
+#include "flatbuffers/flexbuffers.h"  // TF:flatbuffers
+#include "tensorflow/lite/c/builtin_op_data.h"
+#include "tensorflow/lite/c/common.h"
+#include "tensorflow/lite/kernels/internal/optimized/optimized_ops.h"
+#include "tensorflow/lite/kernels/internal/reference/reference_ops.h"
+#include "tensorflow/lite/kernels/internal/tensor.h"
+#include "tensorflow/lite/kernels/kernel_util.h"
+#include "tensorflow/lite/kernels/op_macros.h"
+#include "tensorflow/lite/minimal_logging.h"
+#include "tensorflow/lite/kernels/custom_op_debug.h"
+
+#ifdef TFLITE_TEE_EMULATED
+#include "third_party/optee_delegate/tee_shadow_net.h"
+#endif // TFLITE_TEE_EMULATED
+
+namespace tflite {
+namespace ops {
+namespace custom {
+namespace tee_shadow {
+
+enum KernelType {
+  kReference,
+};
+
+typedef struct{
+    int units;
+    string pos;
+}TfLiteTeeShadowParams;
+
+constexpr int kInputTensorX = 0;
+constexpr int kOutputTensor = 0;
+
+void *Init(TfLiteContext* context, const char* buffer, size_t length) {
+    auto *data = new TfLiteTeeShadowParams;
+    
+    const uint8_t* buffer_t = reinterpret_cast<const uint8_t*>(buffer);
+
+    const flexbuffers::Map& m = flexbuffers::GetRoot(buffer_t, length).AsMap();
+    data->units = m["units"].AsInt32();
+    data->pos = m["pos"].AsString().c_str();
+    //printf("TeeShadow params units:%d\n",data->units);
+    //printf("TeeShadow params pos:%s\n",data->pos.c_str());
+    return data;
+}
+
+void Free(TfLiteContext* context, void* buffer) {
+    delete reinterpret_cast<TfLiteTeeShadowParams*>(buffer);
+}
+
+TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
+  auto* params = reinterpret_cast<TfLiteTeeShadowParams*>(node->user_data);
+
+  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
+  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
+
+  const TfLiteTensor* input_x = GetInput(context, node, kInputTensorX);
+  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
+
+  TF_LITE_ENSURE_EQ(context, NumDimensions(input_x), 4);
+
+  TF_LITE_ENSURE_EQ(context, output->type, kTfLiteFloat32);
+  TF_LITE_ENSURE_EQ(context, input_x->type, output->type);
+
+  TfLiteIntArray* output_size;
+  if(params->pos.compare(0,7, "results") == 0) {// results shape(batch, channels)
+    output_size = TfLiteIntArrayCreate(2);
+    output_size->data[0] = input_x->dims->data[0];
+    output_size->data[1] = params->units;
+  }else if (params->pos.compare(0, 2, "pw") == 0 ||
+      params->pos.compare(0, 4, "conv") == 0) {
+    output_size = TfLiteIntArrayCreate(4);
+    output_size->data[0] = input_x->dims->data[0];
+    if (params->pos.compare(0, 8, "pwconv13") == 0) { // handle avgpool
+      output_size->data[1] = 1;
+      output_size->data[2] = 1;
+    } else {
+      output_size->data[1] = input_x->dims->data[1];
+      output_size->data[2] = input_x->dims->data[2];
+    }
+    output_size->data[3] = params->units;
+  } else {
+    output_size = TfLiteIntArrayCreate(4);
+    output_size->data[0] = input_x->dims->data[0];
+    output_size->data[1] = input_x->dims->data[1];
+    output_size->data[2] = input_x->dims->data[2];
+    output_size->data[3] = input_x->dims->data[3];
+  }
+
+  return context->ResizeTensor(context, output, output_size);
+}
+
+template <KernelType kernel_type>
+TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
+  auto* params = reinterpret_cast<TfLiteTeeShadowParams*>(node->user_data);
+  const TfLiteTensor* input_x = GetInput(context, node, kInputTensorX);
+  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
+
+  const float* x_flat = GetTensorData<float>(input_x);
+  float* output_flat = GetTensorData<float>(output);
+
+  const char *shadow_pos = params->pos.c_str();
+  darknet_predict(shadow_pos, x_flat, output_flat);
+
+  return kTfLiteOk;
+}
+ 
+}  // namespace tee_shadow 
+
+TfLiteRegistration* Register_TEE_SHADOW() {
+  static TfLiteRegistration r = {tee_shadow::Init, tee_shadow::Free, tee_shadow::Prepare,
+                                 tee_shadow::Eval<tee_shadow::kReference>};
+  return &r;
+}
+
+}  // namespace custom
+}  // namespace ops
+}  // namespace tflite
-- 
2.7.4

