#ifndef FLATBUFFERS_COMMON_READER_H
#define FLATBUFFERS_COMMON_READER_H

/* Generated by flatcc 0.6.1-dev FlatBuffers schema compiler for C by dvide.com */

/* Common FlatBuffers read functionality for C. */

#include "flatcc/flatcc_prologue.h"
#include "flatcc/flatcc_flatbuffers.h"


#define __flatbuffers_read_scalar_at_byteoffset(N, p, o) N ## _read_from_pe((uint8_t *)(p) + (o))
#define __flatbuffers_read_scalar(N, p) N ## _read_from_pe(p)
#define __flatbuffers_read_vt(ID, offset, t)\
flatbuffers_voffset_t offset = 0;\
{   flatbuffers_voffset_t id__tmp, *vt__tmp;\
    FLATCC_ASSERT(t != 0 && "null pointer table access");\
    id__tmp = ID;\
    vt__tmp = (flatbuffers_voffset_t *)((uint8_t *)(t) -\
        __flatbuffers_soffset_read_from_pe(t));\
    if (__flatbuffers_voffset_read_from_pe(vt__tmp) >= sizeof(vt__tmp[0]) * (id__tmp + 3u)) {\
        offset = __flatbuffers_voffset_read_from_pe(vt__tmp + id__tmp + 2);\
    }\
}
#define __flatbuffers_field_present(ID, t) { __flatbuffers_read_vt(ID, offset__tmp, t) return offset__tmp != 0; }
#define __flatbuffers_scalar_field(T, ID, t)\
{\
    __flatbuffers_read_vt(ID, offset__tmp, t)\
    if (offset__tmp) {\
        return (const T *)((uint8_t *)(t) + offset__tmp);\
    }\
    return 0;\
}
#define __flatbuffers_define_scalar_field(ID, N, NK, TK, T, V)\
static inline T N ## _ ## NK ## _get(N ## _table_t t__tmp)\
{ __flatbuffers_read_vt(ID, offset__tmp, t__tmp)\
  return offset__tmp ? __flatbuffers_read_scalar_at_byteoffset(TK, t__tmp, offset__tmp) : V;\
}\
static inline T N ## _ ## NK(N ## _table_t t__tmp)\
{ __flatbuffers_read_vt(ID, offset__tmp, t__tmp)\
  return offset__tmp ? __flatbuffers_read_scalar_at_byteoffset(TK, t__tmp, offset__tmp) : V;\
}\
static inline const T *N ## _ ## NK ## _get_ptr(N ## _table_t t__tmp)\
__flatbuffers_scalar_field(T, ID, t__tmp)\
static inline int N ## _ ## NK ## _is_present(N ## _table_t t__tmp)\
__flatbuffers_field_present(ID, t__tmp)\
__flatbuffers_define_scan_by_scalar_field(N, NK, T)
#define __flatbuffers_define_scalar_optional_field(ID, N, NK, TK, T, V)\
__flatbuffers_define_scalar_field(ID, N, NK, TK, T, V)\
static inline TK ## _option_t N ## _ ## NK ## _option(N ## _table_t t__tmp)\
{ TK ## _option_t ret; __flatbuffers_read_vt(ID, offset__tmp, t__tmp)\
  ret.is_null = offset__tmp == 0; ret.value = offset__tmp ?\
  __flatbuffers_read_scalar_at_byteoffset(TK, t__tmp, offset__tmp) : V;\
  return ret; }
#define __flatbuffers_struct_field(T, ID, t, r)\
{\
    __flatbuffers_read_vt(ID, offset__tmp, t)\
    if (offset__tmp) {\
        return (T)((uint8_t *)(t) + offset__tmp);\
    }\
    FLATCC_ASSERT(!(r) && "required field missing");\
    return 0;\
}
#define __flatbuffers_offset_field(T, ID, t, r, adjust)\
{\
    flatbuffers_uoffset_t *elem__tmp;\
    __flatbuffers_read_vt(ID, offset__tmp, t)\
    if (offset__tmp) {\
        elem__tmp = (flatbuffers_uoffset_t *)((uint8_t *)(t) + offset__tmp);\
        /* Add sizeof so C api can have raw access past header field. */\
        return (T)((uint8_t *)(elem__tmp) + adjust +\
              __flatbuffers_uoffset_read_from_pe(elem__tmp));\
    }\
    FLATCC_ASSERT(!(r) && "required field missing");\
    return 0;\
}
#define __flatbuffers_vector_field(T, ID, t, r) __flatbuffers_offset_field(T, ID, t, r, sizeof(flatbuffers_uoffset_t))
#define __flatbuffers_table_field(T, ID, t, r) __flatbuffers_offset_field(T, ID, t, r, 0)
#define __flatbuffers_define_struct_field(ID, N, NK, T, r)\
static inline T N ## _ ## NK ## _get(N ## _table_t t__tmp)\
__flatbuffers_struct_field(T, ID, t__tmp, r)\
static inline T N ## _ ## NK(N ## _table_t t__tmp)\
__flatbuffers_struct_field(T, ID, t__tmp, r)\
static inline int N ## _ ## NK ## _is_present(N ## _table_t t__tmp)\
__flatbuffers_field_present(ID, t__tmp)
#define __flatbuffers_define_vector_field(ID, N, NK, T, r)\
static inline T N ## _ ## NK ## _get(N ## _table_t t__tmp)\
__flatbuffers_vector_field(T, ID, t__tmp, r)\
static inline T N ## _ ## NK(N ## _table_t t__tmp)\
__flatbuffers_vector_field(T, ID, t__tmp, r)\
static inline int N ## _ ## NK ## _is_present(N ## _table_t t__tmp)\
__flatbuffers_field_present(ID, t__tmp)
#define __flatbuffers_define_table_field(ID, N, NK, T, r)\
static inline T N ## _ ## NK ## _get(N ## _table_t t__tmp)\
__flatbuffers_table_field(T, ID, t__tmp, r)\
static inline T N ## _ ## NK(N ## _table_t t__tmp)\
__flatbuffers_table_field(T, ID, t__tmp, r)\
static inline int N ## _ ## NK ## _is_present(N ## _table_t t__tmp)\
__flatbuffers_field_present(ID, t__tmp)
#define __flatbuffers_define_string_field(ID, N, NK, r)\
static inline flatbuffers_string_t N ## _ ## NK ## _get(N ## _table_t t__tmp)\
__flatbuffers_vector_field(flatbuffers_string_t, ID, t__tmp, r)\
static inline flatbuffers_string_t N ## _ ## NK(N ## _table_t t__tmp)\
__flatbuffers_vector_field(flatbuffers_string_t, ID, t__tmp, r)\
static inline int N ## _ ## NK ## _is_present(N ## _table_t t__tmp)\
__flatbuffers_field_present(ID, t__tmp)\
__flatbuffers_define_scan_by_string_field(N, NK)
#define __flatbuffers_vec_len(vec)\
{ return (vec) ? (size_t)__flatbuffers_uoffset_read_from_pe((flatbuffers_uoffset_t *)vec - 1) : 0; }
#define __flatbuffers_string_len(s) __flatbuffers_vec_len(s)
static inline size_t flatbuffers_vec_len(const void *vec)
__flatbuffers_vec_len(vec)
#define __flatbuffers_scalar_vec_at(N, vec, i)\
{ FLATCC_ASSERT(flatbuffers_vec_len(vec) > (i) && "index out of range");\
  return __flatbuffers_read_scalar(N, &(vec)[i]); }
#define __flatbuffers_struct_vec_at(vec, i)\
{ FLATCC_ASSERT(flatbuffers_vec_len(vec) > (i) && "index out of range"); return (vec) + (i); }
/* `adjust` skips past the header for string vectors. */
#define __flatbuffers_offset_vec_at(T, vec, i, adjust)\
{ const flatbuffers_uoffset_t *elem__tmp = (vec) + (i);\
  FLATCC_ASSERT(flatbuffers_vec_len(vec) > (i) && "index out of range");\
  return (T)((uint8_t *)(elem__tmp) + (size_t)__flatbuffers_uoffset_read_from_pe(elem__tmp) + (adjust)); }
#define __flatbuffers_define_scalar_vec_len(N)\
static inline size_t N ## _vec_len(N ##_vec_t vec__tmp)\
{ return flatbuffers_vec_len(vec__tmp); }
#define __flatbuffers_define_scalar_vec_at(N, T) \
static inline T N ## _vec_at(N ## _vec_t vec__tmp, size_t i__tmp)\
__flatbuffers_scalar_vec_at(N, vec__tmp, i__tmp)
typedef const char *flatbuffers_string_t;
static inline size_t flatbuffers_string_len(flatbuffers_string_t s)
__flatbuffers_string_len(s)
typedef const flatbuffers_uoffset_t *flatbuffers_string_vec_t;
typedef flatbuffers_uoffset_t *flatbuffers_string_mutable_vec_t;
static inline size_t flatbuffers_string_vec_len(flatbuffers_string_vec_t vec)
__flatbuffers_vec_len(vec)
static inline flatbuffers_string_t flatbuffers_string_vec_at(flatbuffers_string_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(flatbuffers_string_t, vec, i, sizeof(vec[0]))
typedef const void *flatbuffers_generic_t;
typedef void *flatbuffers_mutable_generic_t;
static inline flatbuffers_string_t flatbuffers_string_cast_from_generic(const flatbuffers_generic_t p)
{ return p ? ((const char *)p) + __flatbuffers_uoffset__size() : 0; }
typedef const flatbuffers_uoffset_t *flatbuffers_generic_vec_t;
typedef flatbuffers_uoffset_t *flatbuffers_generic_table_mutable_vec_t;
static inline size_t flatbuffers_generic_vec_len(flatbuffers_generic_vec_t vec)
__flatbuffers_vec_len(vec)
static inline flatbuffers_generic_t flatbuffers_generic_vec_at(flatbuffers_generic_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(flatbuffers_generic_t, vec, i, 0)
static inline flatbuffers_generic_t flatbuffers_generic_vec_at_as_string(flatbuffers_generic_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(flatbuffers_generic_t, vec, i, sizeof(vec[0]))
typedef struct flatbuffers_union {
    flatbuffers_union_type_t type;
    flatbuffers_generic_t value;
} flatbuffers_union_t;
typedef struct flatbuffers_union_vec {
    const flatbuffers_union_type_t *type;
    const flatbuffers_uoffset_t *value;
} flatbuffers_union_vec_t;
typedef struct flatbuffers_mutable_union {
    flatbuffers_union_type_t type;
    flatbuffers_mutable_generic_t value;
} flatbuffers_mutable_union_t;
typedef struct flatbuffers_mutable_union_vec {
    flatbuffers_union_type_t *type;
    flatbuffers_uoffset_t *value;
} flatbuffers_mutable_union_vec_t;
static inline flatbuffers_mutable_union_t flatbuffers_mutable_union_cast(flatbuffers_union_t u__tmp)\
{ flatbuffers_mutable_union_t mu = { u__tmp.type, (flatbuffers_mutable_generic_t)u__tmp.value };\
  return mu; }
static inline flatbuffers_mutable_union_vec_t flatbuffers_mutable_union_vec_cast(flatbuffers_union_vec_t uv__tmp)\
{ flatbuffers_mutable_union_vec_t muv =\
  { (flatbuffers_union_type_t *)uv__tmp.type, (flatbuffers_uoffset_t *)uv__tmp.value }; return muv; }
#define __flatbuffers_union_type_field(ID, t)\
{\
    __flatbuffers_read_vt(ID, offset__tmp, t)\
    return offset__tmp ? __flatbuffers_read_scalar_at_byteoffset(__flatbuffers_utype, t, offset__tmp) : 0;\
}
static inline flatbuffers_string_t flatbuffers_string_cast_from_union(const flatbuffers_union_t u__tmp)\
{ return flatbuffers_string_cast_from_generic(u__tmp.value); }
#define __flatbuffers_define_union_field(NS, ID, N, NK, T, r)\
static inline T ## _union_type_t N ## _ ## NK ## _type_get(N ## _table_t t__tmp)\
__## NS ## union_type_field(((ID) - 1), t__tmp)\
static inline NS ## generic_t N ## _ ## NK ## _get(N ## _table_t t__tmp)\
__## NS ## table_field(NS ## generic_t, ID, t__tmp, r)\
static inline T ## _union_type_t N ## _ ## NK ## _type(N ## _table_t t__tmp)\
__## NS ## union_type_field(((ID) - 1), t__tmp)\
static inline NS ## generic_t N ## _ ## NK(N ## _table_t t__tmp)\
__## NS ## table_field(NS ## generic_t, ID, t__tmp, r)\
static inline int N ## _ ## NK ## _is_present(N ## _table_t t__tmp)\
__## NS ## field_present(ID, t__tmp)\
static inline T ## _union_t N ## _ ## NK ## _union(N ## _table_t t__tmp)\
{ T ## _union_t u__tmp = { 0, 0 }; u__tmp.type = N ## _ ## NK ## _type_get(t__tmp);\
  if (u__tmp.type == 0) return u__tmp; u__tmp.value = N ## _ ## NK ## _get(t__tmp); return u__tmp; }\
static inline NS ## string_t N ## _ ## NK ## _as_string(N ## _table_t t__tmp)\
{ return NS ## string_cast_from_generic(N ## _ ## NK ## _get(t__tmp)); }\

#define __flatbuffers_define_union_vector_ops(NS, T)\
static inline size_t T ## _union_vec_len(T ## _union_vec_t uv__tmp)\
{ return NS ## vec_len(uv__tmp.type); }\
static inline T ## _union_t T ## _union_vec_at(T ## _union_vec_t uv__tmp, size_t i__tmp)\
{ T ## _union_t u__tmp = { 0, 0 }; size_t n__tmp = NS ## vec_len(uv__tmp.type);\
  FLATCC_ASSERT(n__tmp > (i__tmp) && "index out of range"); u__tmp.type = uv__tmp.type[i__tmp];\
  /* Unknown type is treated as NONE for schema evolution. */\
  if (u__tmp.type == 0) return u__tmp;\
  u__tmp.value = NS ## generic_vec_at(uv__tmp.value, i__tmp); return u__tmp; }\
static inline NS ## string_t T ## _union_vec_at_as_string(T ## _union_vec_t uv__tmp, size_t i__tmp)\
{ return (NS ## string_t) NS ## generic_vec_at_as_string(uv__tmp.value, i__tmp); }\

#define __flatbuffers_define_union_vector(NS, T)\
typedef NS ## union_vec_t T ## _union_vec_t;\
typedef NS ## mutable_union_vec_t T ## _mutable_union_vec_t;\
static inline T ## _mutable_union_vec_t T ## _mutable_union_vec_cast(T ## _union_vec_t u__tmp)\
{ return NS ## mutable_union_vec_cast(u__tmp); }\
__## NS ## define_union_vector_ops(NS, T)
#define __flatbuffers_define_union(NS, T)\
typedef NS ## union_t T ## _union_t;\
typedef NS ## mutable_union_t T ## _mutable_union_t;\
static inline T ## _mutable_union_t T ## _mutable_union_cast(T ## _union_t u__tmp)\
{ return NS ## mutable_union_cast(u__tmp); }\
__## NS ## define_union_vector(NS, T)
#define __flatbuffers_define_union_vector_field(NS, ID, N, NK, T, r)\
__## NS ## define_vector_field(ID - 1, N, NK ## _type, T ## _vec_t, r)\
__## NS ## define_vector_field(ID, N, NK, flatbuffers_generic_vec_t, r)\
static inline T ## _union_vec_t N ## _ ## NK ## _union(N ## _table_t t__tmp)\
{ T ## _union_vec_t uv__tmp; uv__tmp.type = N ## _ ## NK ## _type_get(t__tmp);\
  uv__tmp.value = N ## _ ## NK(t__tmp);\
  FLATCC_ASSERT(NS ## vec_len(uv__tmp.type) == NS ## vec_len(uv__tmp.value)\
  && "union vector type length mismatch"); return uv__tmp; }
#include <string.h>
static const size_t flatbuffers_not_found = (size_t)-1;
static const size_t flatbuffers_end = (size_t)-1;
#define __flatbuffers_identity(n) (n)
#define __flatbuffers_min(a, b) ((a) < (b) ? (a) : (b))
/* Subtraction doesn't work for unsigned types. */
#define __flatbuffers_scalar_cmp(x, y, n) ((x) < (y) ? -1 : (x) > (y))
static inline int __flatbuffers_string_n_cmp(flatbuffers_string_t v, const char *s, size_t n)
{ size_t nv = flatbuffers_string_len(v); int x = strncmp(v, s, nv < n ? nv : n);
  return x != 0 ? x : nv < n ? -1 : nv > n; }
/* `n` arg unused, but needed by string find macro expansion. */
static inline int __flatbuffers_string_cmp(flatbuffers_string_t v, const char *s, size_t n) { (void)n; return strcmp(v, s); }
/* A = identity if searching scalar vectors rather than key fields. */
/* Returns lowest matching index or not_found. */
#define __flatbuffers_find_by_field(A, V, E, L, K, Kn, T, D)\
{ T v__tmp; size_t a__tmp = 0, b__tmp, m__tmp; if (!(b__tmp = L(V))) { return flatbuffers_not_found; }\
  --b__tmp;\
  while (a__tmp < b__tmp) {\
    m__tmp = a__tmp + ((b__tmp - a__tmp) >> 1);\
    v__tmp = A(E(V, m__tmp));\
    if ((D(v__tmp, (K), (Kn))) < 0) {\
      a__tmp = m__tmp + 1;\
    } else {\
      b__tmp = m__tmp;\
    }\
  }\
  if (a__tmp == b__tmp) {\
    v__tmp = A(E(V, a__tmp));\
    if (D(v__tmp, (K), (Kn)) == 0) {\
       return a__tmp;\
    }\
  }\
  return flatbuffers_not_found;\
}
#define __flatbuffers_find_by_scalar_field(A, V, E, L, K, T)\
__flatbuffers_find_by_field(A, V, E, L, K, 0, T, __flatbuffers_scalar_cmp)
#define __flatbuffers_find_by_string_field(A, V, E, L, K)\
__flatbuffers_find_by_field(A, V, E, L, K, 0, flatbuffers_string_t, __flatbuffers_string_cmp)
#define __flatbuffers_find_by_string_n_field(A, V, E, L, K, Kn)\
__flatbuffers_find_by_field(A, V, E, L, K, Kn, flatbuffers_string_t, __flatbuffers_string_n_cmp)
#define __flatbuffers_define_find_by_scalar_field(N, NK, TK)\
static inline size_t N ## _vec_find_by_ ## NK(N ## _vec_t vec__tmp, TK key__tmp)\
__flatbuffers_find_by_scalar_field(N ## _ ## NK, vec__tmp, N ## _vec_at, N ## _vec_len, key__tmp, TK)
#define __flatbuffers_define_scalar_find(N, T)\
static inline size_t N ## _vec_find(N ## _vec_t vec__tmp, T key__tmp)\
__flatbuffers_find_by_scalar_field(__flatbuffers_identity, vec__tmp, N ## _vec_at, N ## _vec_len, key__tmp, T)
#define __flatbuffers_define_find_by_string_field(N, NK) \
/* Note: find only works on vectors sorted by this field. */\
static inline size_t N ## _vec_find_by_ ## NK(N ## _vec_t vec__tmp, const char *s__tmp)\
__flatbuffers_find_by_string_field(N ## _ ## NK, vec__tmp, N ## _vec_at, N ## _vec_len, s__tmp)\
static inline size_t N ## _vec_find_n_by_ ## NK(N ## _vec_t vec__tmp, const char *s__tmp, size_t n__tmp)\
__flatbuffers_find_by_string_n_field(N ## _ ## NK, vec__tmp, N ## _vec_at, N ## _vec_len, s__tmp, n__tmp)
#define __flatbuffers_define_default_find_by_scalar_field(N, NK, TK)\
static inline size_t N ## _vec_find(N ## _vec_t vec__tmp, TK key__tmp)\
{ return N ## _vec_find_by_ ## NK(vec__tmp, key__tmp); }
#define __flatbuffers_define_default_find_by_string_field(N, NK) \
static inline size_t N ## _vec_find(N ## _vec_t vec__tmp, const char *s__tmp)\
{ return N ## _vec_find_by_ ## NK(vec__tmp, s__tmp); }\
static inline size_t N ## _vec_find_n(N ## _vec_t vec__tmp, const char *s__tmp, size_t n__tmp)\
{ return N ## _vec_find_n_by_ ## NK(vec__tmp, s__tmp, n__tmp); }
/* A = identity if searching scalar vectors rather than key fields. */
/* Returns lowest matching index or not_found. */
#define __flatbuffers_scan_by_field(b, e, A, V, E, L, K, Kn, T, D)\
{ T v__tmp; size_t i__tmp;\
  for (i__tmp = b; i__tmp < e; ++i__tmp) {\
    v__tmp = A(E(V, i__tmp));\
    if (D(v__tmp, (K), (Kn)) == 0) {\
       return i__tmp;\
    }\
  }\
  return flatbuffers_not_found;\
}
#define __flatbuffers_rscan_by_field(b, e, A, V, E, L, K, Kn, T, D)\
{ T v__tmp; size_t i__tmp = e;\
  while (i__tmp-- > b) {\
    v__tmp = A(E(V, i__tmp));\
    if (D(v__tmp, (K), (Kn)) == 0) {\
       return i__tmp;\
    }\
  }\
  return flatbuffers_not_found;\
}
#define __flatbuffers_scan_by_scalar_field(b, e, A, V, E, L, K, T)\
__flatbuffers_scan_by_field(b, e, A, V, E, L, K, 0, T, __flatbuffers_scalar_cmp)
#define __flatbuffers_scan_by_string_field(b, e, A, V, E, L, K)\
__flatbuffers_scan_by_field(b, e, A, V, E, L, K, 0, flatbuffers_string_t, __flatbuffers_string_cmp)
#define __flatbuffers_scan_by_string_n_field(b, e, A, V, E, L, K, Kn)\
__flatbuffers_scan_by_field(b, e, A, V, E, L, K, Kn, flatbuffers_string_t, __flatbuffers_string_n_cmp)
#define __flatbuffers_rscan_by_scalar_field(b, e, A, V, E, L, K, T)\
__flatbuffers_rscan_by_field(b, e, A, V, E, L, K, 0, T, __flatbuffers_scalar_cmp)
#define __flatbuffers_rscan_by_string_field(b, e, A, V, E, L, K)\
__flatbuffers_rscan_by_field(b, e, A, V, E, L, K, 0, flatbuffers_string_t, __flatbuffers_string_cmp)
#define __flatbuffers_rscan_by_string_n_field(b, e, A, V, E, L, K, Kn)\
__flatbuffers_rscan_by_field(b, e, A, V, E, L, K, Kn, flatbuffers_string_t, __flatbuffers_string_n_cmp)
#define __flatbuffers_define_scan_by_scalar_field(N, NK, T)\
static inline size_t N ## _vec_scan_by_ ## NK(N ## _vec_t vec__tmp, T key__tmp)\
__flatbuffers_scan_by_scalar_field(0, N ## _vec_len(vec__tmp), N ## _ ## NK ## _get, vec__tmp, N ## _vec_at, N ## _vec_len, key__tmp, T)\
static inline size_t N ## _vec_scan_ex_by_ ## NK(N ## _vec_t vec__tmp, size_t begin__tmp, size_t end__tmp, T key__tmp)\
__flatbuffers_scan_by_scalar_field(begin__tmp, __flatbuffers_min(end__tmp, N ## _vec_len(vec__tmp)), N ## _ ## NK ## _get, vec__tmp, N ## _vec_at, N ## _vec_len, key__tmp, T)\
static inline size_t N ## _vec_rscan_by_ ## NK(N ## _vec_t vec__tmp, T key__tmp)\
__flatbuffers_rscan_by_scalar_field(0, N ## _vec_len(vec__tmp), N ## _ ## NK ## _get, vec__tmp, N ## _vec_at, N ## _vec_len, key__tmp, T)\
static inline size_t N ## _vec_rscan_ex_by_ ## NK(N ## _vec_t vec__tmp, size_t begin__tmp, size_t end__tmp, T key__tmp)\
__flatbuffers_rscan_by_scalar_field(begin__tmp, __flatbuffers_min(end__tmp, N ## _vec_len(vec__tmp)), N ## _ ## NK ## _get, vec__tmp, N ## _vec_at, N ## _vec_len, key__tmp, T)
#define __flatbuffers_define_scalar_scan(N, T)\
static inline size_t N ## _vec_scan(N ## _vec_t vec__tmp, T key__tmp)\
__flatbuffers_scan_by_scalar_field(0, N ## _vec_len(vec__tmp), __flatbuffers_identity, vec__tmp, N ## _vec_at, N ## _vec_len, key__tmp, T)\
static inline size_t N ## _vec_scan_ex(N ## _vec_t vec__tmp, size_t begin__tmp, size_t end__tmp, T key__tmp)\
__flatbuffers_scan_by_scalar_field(begin__tmp, __flatbuffers_min(end__tmp, N ## _vec_len(vec__tmp)), __flatbuffers_identity, vec__tmp, N ## _vec_at, N ## _vec_len, key__tmp, T)\
static inline size_t N ## _vec_rscan(N ## _vec_t vec__tmp, T key__tmp)\
__flatbuffers_rscan_by_scalar_field(0, N ## _vec_len(vec__tmp), __flatbuffers_identity, vec__tmp, N ## _vec_at, N ## _vec_len, key__tmp, T)\
static inline size_t N ## _vec_rscan_ex(N ## _vec_t vec__tmp, size_t begin__tmp, size_t end__tmp, T key__tmp)\
__flatbuffers_rscan_by_scalar_field(begin__tmp, __flatbuffers_min(end__tmp, N ## _vec_len(vec__tmp)), __flatbuffers_identity, vec__tmp, N ## _vec_at, N ## _vec_len, key__tmp, T)
#define __flatbuffers_define_scan_by_string_field(N, NK) \
static inline size_t N ## _vec_scan_by_ ## NK(N ## _vec_t vec__tmp, const char *s__tmp)\
__flatbuffers_scan_by_string_field(0, N ## _vec_len(vec__tmp), N ## _ ## NK ## _get, vec__tmp, N ## _vec_at, N ## _vec_len, s__tmp)\
static inline size_t N ## _vec_scan_n_by_ ## NK(N ## _vec_t vec__tmp, const char *s__tmp, size_t n__tmp)\
__flatbuffers_scan_by_string_n_field(0, N ## _vec_len(vec__tmp), N ## _ ## NK ## _get, vec__tmp, N ## _vec_at, N ## _vec_len, s__tmp, n__tmp)\
static inline size_t N ## _vec_scan_ex_by_ ## NK(N ## _vec_t vec__tmp, size_t begin__tmp, size_t end__tmp, const char *s__tmp)\
__flatbuffers_scan_by_string_field(begin__tmp, __flatbuffers_min(end__tmp, N ## _vec_len(vec__tmp)), N ## _ ## NK ## _get, vec__tmp, N ## _vec_at, N ## _vec_len, s__tmp)\
static inline size_t N ## _vec_scan_ex_n_by_ ## NK(N ## _vec_t vec__tmp, size_t begin__tmp, size_t end__tmp, const char *s__tmp, size_t n__tmp)\
__flatbuffers_scan_by_string_n_field(begin__tmp, __flatbuffers_min( end__tmp, N ## _vec_len(vec__tmp)), N ## _ ## NK ## _get, vec__tmp, N ## _vec_at, N ## _vec_len, s__tmp, n__tmp)\
static inline size_t N ## _vec_rscan_by_ ## NK(N ## _vec_t vec__tmp, const char *s__tmp)\
__flatbuffers_rscan_by_string_field(0, N ## _vec_len(vec__tmp), N ## _ ## NK ## _get, vec__tmp, N ## _vec_at, N ## _vec_len, s__tmp)\
static inline size_t N ## _vec_rscan_n_by_ ## NK(N ## _vec_t vec__tmp, const char *s__tmp, size_t n__tmp)\
__flatbuffers_rscan_by_string_n_field(0, N ## _vec_len(vec__tmp), N ## _ ## NK ## _get, vec__tmp, N ## _vec_at, N ## _vec_len, s__tmp, n__tmp)\
static inline size_t N ## _vec_rscan_ex_by_ ## NK(N ## _vec_t vec__tmp, size_t begin__tmp, size_t end__tmp, const char *s__tmp)\
__flatbuffers_rscan_by_string_field(begin__tmp, __flatbuffers_min(end__tmp, N ## _vec_len(vec__tmp)), N ## _ ## NK ## _get, vec__tmp, N ## _vec_at, N ## _vec_len, s__tmp)\
static inline size_t N ## _vec_rscan_ex_n_by_ ## NK(N ## _vec_t vec__tmp, size_t begin__tmp, size_t end__tmp, const char *s__tmp, size_t n__tmp)\
__flatbuffers_rscan_by_string_n_field(begin__tmp, __flatbuffers_min( end__tmp, N ## _vec_len(vec__tmp)), N ## _ ## NK ## _get, vec__tmp, N ## _vec_at, N ## _vec_len, s__tmp, n__tmp)
#define __flatbuffers_define_default_scan_by_scalar_field(N, NK, TK)\
static inline size_t N ## _vec_scan(N ## _vec_t vec__tmp, TK key__tmp)\
{ return N ## _vec_scan_by_ ## NK(vec__tmp, key__tmp); }\
static inline size_t N ## _vec_scan_ex(N ## _vec_t vec__tmp, size_t begin__tmp, size_t end__tmp, TK key__tmp)\
{ return N ## _vec_scan_ex_by_ ## NK(vec__tmp, begin__tmp, end__tmp, key__tmp); }\
static inline size_t N ## _vec_rscan(N ## _vec_t vec__tmp, TK key__tmp)\
{ return N ## _vec_rscan_by_ ## NK(vec__tmp, key__tmp); }\
static inline size_t N ## _vec_rscan_ex(N ## _vec_t vec__tmp, size_t begin__tmp, size_t end__tmp, TK key__tmp)\
{ return N ## _vec_rscan_ex_by_ ## NK(vec__tmp, begin__tmp, end__tmp, key__tmp); }
#define __flatbuffers_define_default_scan_by_string_field(N, NK) \
static inline size_t N ## _vec_scan(N ## _vec_t vec__tmp, const char *s__tmp)\
{ return N ## _vec_scan_by_ ## NK(vec__tmp, s__tmp); }\
static inline size_t N ## _vec_scan_n(N ## _vec_t vec__tmp, const char *s__tmp, size_t n__tmp)\
{ return N ## _vec_scan_n_by_ ## NK(vec__tmp, s__tmp, n__tmp); }\
static inline size_t N ## _vec_scan_ex(N ## _vec_t vec__tmp, size_t begin__tmp, size_t end__tmp, const char *s__tmp)\
{ return N ## _vec_scan_ex_by_ ## NK(vec__tmp, begin__tmp, end__tmp, s__tmp); }\
static inline size_t N ## _vec_scan_ex_n(N ## _vec_t vec__tmp, size_t begin__tmp, size_t end__tmp, const char *s__tmp, size_t n__tmp)\
{ return N ## _vec_scan_ex_n_by_ ## NK(vec__tmp, begin__tmp, end__tmp, s__tmp, n__tmp); }\
static inline size_t N ## _vec_rscan(N ## _vec_t vec__tmp, const char *s__tmp)\
{ return N ## _vec_rscan_by_ ## NK(vec__tmp, s__tmp); }\
static inline size_t N ## _vec_rscan_n(N ## _vec_t vec__tmp, const char *s__tmp, size_t n__tmp)\
{ return N ## _vec_rscan_n_by_ ## NK(vec__tmp, s__tmp, n__tmp); }\
static inline size_t N ## _vec_rscan_ex(N ## _vec_t vec__tmp, size_t begin__tmp, size_t end__tmp, const char *s__tmp)\
{ return N ## _vec_rscan_ex_by_ ## NK(vec__tmp, begin__tmp, end__tmp, s__tmp); }\
static inline size_t N ## _vec_rscan_ex_n(N ## _vec_t vec__tmp, size_t begin__tmp, size_t end__tmp, const char *s__tmp, size_t n__tmp)\
{ return N ## _vec_rscan_ex_n_by_ ## NK(vec__tmp, begin__tmp, end__tmp, s__tmp, n__tmp); }
#define __flatbuffers_heap_sort(N, X, A, E, L, TK, TE, D, S)\
static inline void __ ## N ## X ## __heap_sift_down(\
        N ## _mutable_vec_t vec__tmp, size_t start__tmp, size_t end__tmp)\
{ size_t child__tmp, root__tmp; TK v1__tmp, v2__tmp, vroot__tmp;\
  root__tmp = start__tmp;\
  while ((root__tmp << 1) <= end__tmp) {\
    child__tmp = root__tmp << 1;\
    if (child__tmp < end__tmp) {\
      v1__tmp = A(E(vec__tmp, child__tmp));\
      v2__tmp = A(E(vec__tmp, child__tmp + 1));\
      if (D(v1__tmp, v2__tmp) < 0) {\
        child__tmp++;\
      }\
    }\
    vroot__tmp = A(E(vec__tmp, root__tmp));\
    v1__tmp = A(E(vec__tmp, child__tmp));\
    if (D(vroot__tmp, v1__tmp) < 0) {\
      S(vec__tmp, root__tmp, child__tmp, TE);\
      root__tmp = child__tmp;\
    } else {\
      return;\
    }\
  }\
}\
static inline void __ ## N ## X ## __heap_sort(N ## _mutable_vec_t vec__tmp)\
{ size_t start__tmp, end__tmp, size__tmp;\
  size__tmp = L(vec__tmp); if (size__tmp == 0) return; end__tmp = size__tmp - 1; start__tmp = size__tmp >> 1;\
  do { __ ## N ## X ## __heap_sift_down(vec__tmp, start__tmp, end__tmp); } while (start__tmp--);\
  while (end__tmp > 0) { \
    S(vec__tmp, 0, end__tmp, TE);\
    __ ## N ## X ## __heap_sift_down(vec__tmp, 0, --end__tmp); } }
#define __flatbuffers_define_sort_by_field(N, NK, TK, TE, D, S)\
  __flatbuffers_heap_sort(N, _sort_by_ ## NK, N ## _ ## NK ## _get, N ## _vec_at, N ## _vec_len, TK, TE, D, S)\
static inline void N ## _vec_sort_by_ ## NK(N ## _mutable_vec_t vec__tmp)\
{ __ ## N ## _sort_by_ ## NK ## __heap_sort(vec__tmp); }
#define __flatbuffers_define_sort(N, TK, TE, D, S)\
__flatbuffers_heap_sort(N, , __flatbuffers_identity, N ## _vec_at, N ## _vec_len, TK, TE, D, S)\
static inline void N ## _vec_sort(N ## _mutable_vec_t vec__tmp) { __ ## N ## __heap_sort(vec__tmp); }
#define __flatbuffers_scalar_diff(x, y) ((x) < (y) ? -1 : (x) > (y))
#define __flatbuffers_string_diff(x, y) __flatbuffers_string_n_cmp((x), (const char *)(y), flatbuffers_string_len(y))
#define __flatbuffers_value_swap(vec, a, b, TE) { TE x__tmp = vec[b]; vec[b] = vec[a]; vec[a] = x__tmp; }
#define __flatbuffers_uoffset_swap(vec, a, b, TE)\
{ TE ta__tmp, tb__tmp, d__tmp;\
  d__tmp = (TE)((a - b) * sizeof(vec[0]));\
  ta__tmp =  __flatbuffers_uoffset_read_from_pe(vec + b) - d__tmp;\
  tb__tmp =  __flatbuffers_uoffset_read_from_pe(vec + a) + d__tmp;\
  __flatbuffers_uoffset_write_to_pe(vec + a, ta__tmp);\
  __flatbuffers_uoffset_write_to_pe(vec + b, tb__tmp); }
#define __flatbuffers_scalar_swap(vec, a, b, TE) __flatbuffers_value_swap(vec, a, b, TE)
#define __flatbuffers_string_swap(vec, a, b, TE) __flatbuffers_uoffset_swap(vec, a, b, TE)
#define __flatbuffers_struct_swap(vec, a, b, TE) __flatbuffers_value_swap(vec, a, b, TE)
#define __flatbuffers_table_swap(vec, a, b, TE) __flatbuffers_uoffset_swap(vec, a, b, TE)
#define __flatbuffers_define_struct_sort_by_scalar_field(N, NK, TK, TE)\
  __flatbuffers_define_sort_by_field(N, NK, TK, TE, __flatbuffers_scalar_diff, __flatbuffers_struct_swap)
#define __flatbuffers_define_table_sort_by_scalar_field(N, NK, TK)\
  __flatbuffers_define_sort_by_field(N, NK, TK, flatbuffers_uoffset_t, __flatbuffers_scalar_diff, __flatbuffers_table_swap)
#define __flatbuffers_define_table_sort_by_string_field(N, NK)\
  __flatbuffers_define_sort_by_field(N, NK, flatbuffers_string_t, flatbuffers_uoffset_t, __flatbuffers_string_diff, __flatbuffers_table_swap)
#define __flatbuffers_define_scalar_sort(N, T) __flatbuffers_define_sort(N, T, T, __flatbuffers_scalar_diff, __flatbuffers_scalar_swap)
#define __flatbuffers_define_string_sort() __flatbuffers_define_sort(flatbuffers_string, flatbuffers_string_t, flatbuffers_uoffset_t, __flatbuffers_string_diff, __flatbuffers_string_swap)
#define __flatbuffers_sort_vector_field(N, NK, T, t)\
{ T ## _mutable_vec_t v__tmp = (T ## _mutable_vec_t) N ## _ ## NK ## _get(t);\
  if (v__tmp) T ## _vec_sort(v__tmp); }
#define __flatbuffers_sort_table_field(N, NK, T, t)\
{ T ## _sort((T ## _mutable_table_t)N ## _ ## NK ## _get(t)); }
#define __flatbuffers_sort_union_field(N, NK, T, t)\
{ T ## _sort(T ## _mutable_union_cast(N ## _ ## NK ## _union(t))); }
#define __flatbuffers_sort_table_vector_field_elements(N, NK, T, t)\
{ T ## _vec_t v__tmp = N ## _ ## NK ## _get(t); size_t i__tmp, n__tmp;\
  n__tmp = T ## _vec_len(v__tmp); for (i__tmp = 0; i__tmp < n__tmp; ++i__tmp) {\
  T ## _sort((T ## _mutable_table_t)T ## _vec_at(v__tmp, i__tmp)); }}
#define __flatbuffers_sort_union_vector_field_elements(N, NK, T, t)\
{ T ## _union_vec_t v__tmp = N ## _ ## NK ## _union(t); size_t i__tmp, n__tmp;\
  n__tmp = T ## _union_vec_len(v__tmp); for (i__tmp = 0; i__tmp < n__tmp; ++i__tmp) {\
  T ## _sort(T ## _mutable_union_cast(T ## _union_vec_at(v__tmp, i__tmp))); }}
#define __flatbuffers_define_scalar_vector(N, T)\
typedef const T *N ## _vec_t;\
typedef T *N ## _mutable_vec_t;\
__flatbuffers_define_scalar_vec_len(N)\
__flatbuffers_define_scalar_vec_at(N, T)\
__flatbuffers_define_scalar_find(N, T)\
__flatbuffers_define_scalar_scan(N, T)\
__flatbuffers_define_scalar_sort(N, T)

#define __flatbuffers_define_integer_type(N, T, W)\
__flatcc_define_integer_accessors(N, T, W, flatbuffers_endian)\
__flatbuffers_define_scalar_vector(N, T)
__flatbuffers_define_scalar_vector(flatbuffers_bool, flatbuffers_bool_t)
__flatbuffers_define_scalar_vector(flatbuffers_char, char)
__flatbuffers_define_scalar_vector(flatbuffers_uint8, uint8_t)
__flatbuffers_define_scalar_vector(flatbuffers_int8, int8_t)
__flatbuffers_define_scalar_vector(flatbuffers_uint16, uint16_t)
__flatbuffers_define_scalar_vector(flatbuffers_int16, int16_t)
__flatbuffers_define_scalar_vector(flatbuffers_uint32, uint32_t)
__flatbuffers_define_scalar_vector(flatbuffers_int32, int32_t)
__flatbuffers_define_scalar_vector(flatbuffers_uint64, uint64_t)
__flatbuffers_define_scalar_vector(flatbuffers_int64, int64_t)
__flatbuffers_define_scalar_vector(flatbuffers_float, float)
__flatbuffers_define_scalar_vector(flatbuffers_double, double)
__flatbuffers_define_scalar_vector(flatbuffers_union_type, flatbuffers_union_type_t)
static inline size_t flatbuffers_string_vec_find(flatbuffers_string_vec_t vec, const char *s)
__flatbuffers_find_by_string_field(__flatbuffers_identity, vec, flatbuffers_string_vec_at, flatbuffers_string_vec_len, s)
static inline size_t flatbuffers_string_vec_find_n(flatbuffers_string_vec_t vec, const char *s, size_t n)
__flatbuffers_find_by_string_n_field(__flatbuffers_identity, vec, flatbuffers_string_vec_at, flatbuffers_string_vec_len, s, n)
static inline size_t flatbuffers_string_vec_scan(flatbuffers_string_vec_t vec, const char *s)
__flatbuffers_scan_by_string_field(0, flatbuffers_string_vec_len(vec), __flatbuffers_identity, vec, flatbuffers_string_vec_at, flatbuffers_string_vec_len, s)
static inline size_t flatbuffers_string_vec_scan_n(flatbuffers_string_vec_t vec, const char *s, size_t n)
__flatbuffers_scan_by_string_n_field(0, flatbuffers_string_vec_len(vec), __flatbuffers_identity, vec, flatbuffers_string_vec_at, flatbuffers_string_vec_len, s, n)
static inline size_t flatbuffers_string_vec_scan_ex(flatbuffers_string_vec_t vec, size_t begin, size_t end, const char *s)
__flatbuffers_scan_by_string_field(begin, __flatbuffers_min(end, flatbuffers_string_vec_len(vec)), __flatbuffers_identity, vec, flatbuffers_string_vec_at, flatbuffers_string_vec_len, s)
static inline size_t flatbuffers_string_vec_scan_ex_n(flatbuffers_string_vec_t vec, size_t begin, size_t end, const char *s, size_t n)
__flatbuffers_scan_by_string_n_field(begin, __flatbuffers_min(end, flatbuffers_string_vec_len(vec)), __flatbuffers_identity, vec, flatbuffers_string_vec_at, flatbuffers_string_vec_len, s, n)
static inline size_t flatbuffers_string_vec_rscan(flatbuffers_string_vec_t vec, const char *s)
__flatbuffers_rscan_by_string_field(0, flatbuffers_string_vec_len(vec), __flatbuffers_identity, vec, flatbuffers_string_vec_at, flatbuffers_string_vec_len, s)
static inline size_t flatbuffers_string_vec_rscan_n(flatbuffers_string_vec_t vec, const char *s, size_t n)
__flatbuffers_rscan_by_string_n_field(0, flatbuffers_string_vec_len(vec), __flatbuffers_identity, vec, flatbuffers_string_vec_at, flatbuffers_string_vec_len, s, n)
static inline size_t flatbuffers_string_vec_rscan_ex(flatbuffers_string_vec_t vec, size_t begin, size_t end, const char *s)
__flatbuffers_rscan_by_string_field(begin, __flatbuffers_min(end, flatbuffers_string_vec_len(vec)), __flatbuffers_identity, vec, flatbuffers_string_vec_at, flatbuffers_string_vec_len, s)
static inline size_t flatbuffers_string_vec_rscan_ex_n(flatbuffers_string_vec_t vec, size_t begin, size_t end, const char *s, size_t n)
__flatbuffers_rscan_by_string_n_field(begin, __flatbuffers_min(end, flatbuffers_string_vec_len(vec)), __flatbuffers_identity, vec, flatbuffers_string_vec_at, flatbuffers_string_vec_len, s, n)
__flatbuffers_define_string_sort()
#define __flatbuffers_define_struct_scalar_fixed_array_field(N, NK, TK, T, L)\
static inline T N ## _ ## NK ## _get(N ## _struct_t t__tmp, size_t i__tmp)\
{ if (!t__tmp || i__tmp >= L) return 0;\
  return __flatbuffers_read_scalar(TK, &(t__tmp->NK[i__tmp])); }\
static inline const T *N ## _ ## NK ## _get_ptr(N ## _struct_t t__tmp)\
{ return t__tmp ? t__tmp->NK : 0; }\
static inline size_t N ## _ ## NK ## _get_len(void) { return L; }\
static inline T N ## _ ## NK (N ## _struct_t t__tmp, size_t i__tmp)\
{ return N ## _ ## NK ## _get(t__tmp, i__tmp); }
#define __flatbuffers_define_struct_struct_fixed_array_field(N, NK, T, L)\
static inline T N ## _ ## NK ## _get(N ## _struct_t t__tmp, size_t i__tmp)\
{ if (!t__tmp || i__tmp >= L) return 0; return t__tmp->NK + i__tmp; }static inline T N ## _ ## NK ## _get_ptr(N ## _struct_t t__tmp)\
{ return t__tmp ? t__tmp->NK : 0; }\
static inline size_t N ## _ ## NK ## _get_len(void) { return L; }\
static inline T N ## _ ## NK(N ## _struct_t t__tmp, size_t i__tmp)\
{ if (!t__tmp || i__tmp >= L) return 0; return t__tmp->NK + i__tmp; }
#define __flatbuffers_define_struct_scalar_field(N, NK, TK, T)\
static inline T N ## _ ## NK ## _get(N ## _struct_t t__tmp)\
{ return t__tmp ? __flatbuffers_read_scalar(TK, &(t__tmp->NK)) : 0; }\
static inline const T *N ## _ ## NK ## _get_ptr(N ## _struct_t t__tmp)\
{ return t__tmp ? &(t__tmp->NK) : 0; }\
static inline T N ## _ ## NK (N ## _struct_t t__tmp)\
{ return t__tmp ? __flatbuffers_read_scalar(TK, &(t__tmp->NK)) : 0; }\
__flatbuffers_define_scan_by_scalar_field(N, NK, T)
#define __flatbuffers_define_struct_struct_field(N, NK, T)\
static inline T N ## _ ## NK ## _get(N ## _struct_t t__tmp) { return t__tmp ? &(t__tmp->NK) : 0; }\
static inline T N ## _ ## NK (N ## _struct_t t__tmp) { return t__tmp ? &(t__tmp->NK) : 0; }
/* If fid is null, the function returns true without testing as buffer is not expected to have any id. */
static inline int flatbuffers_has_identifier(const void *buffer, const char *fid)
{ flatbuffers_thash_t id, id2 = 0; if (fid == 0) { return 1; };
  id2 = flatbuffers_type_hash_from_string(fid);
  id = __flatbuffers_thash_read_from_pe(((flatbuffers_uoffset_t *)buffer) + 1);
  return id2 == 0 || id == id2; }
static inline int flatbuffers_has_type_hash(const void *buffer, flatbuffers_thash_t thash)
{ return thash == 0 || (__flatbuffers_thash_read_from_pe((flatbuffers_uoffset_t *)buffer + 1) == thash); }

static inline flatbuffers_thash_t flatbuffers_get_type_hash(const void *buffer)
{ return __flatbuffers_thash_read_from_pe((flatbuffers_uoffset_t *)buffer + 1); }

#define flatbuffers_verify_endian() flatbuffers_has_identifier("\x00\x00\x00\x00" "1234", "1234")
static inline void *flatbuffers_read_size_prefix(void *b, size_t *size_out)
{ if (size_out) { *size_out = (size_t)__flatbuffers_uoffset_read_from_pe(b); }
  return (uint8_t *)b + sizeof(flatbuffers_uoffset_t); }
/* Null file identifier accepts anything, otherwise fid should be 4 characters. */
#define __flatbuffers_read_root(T, K, buffer, fid)\
  ((!buffer || !flatbuffers_has_identifier(buffer, fid)) ? 0 :\
  ((T ## _ ## K ## t)(((uint8_t *)buffer) +\
    __flatbuffers_uoffset_read_from_pe(buffer))))
#define __flatbuffers_read_typed_root(T, K, buffer, thash)\
  ((!buffer || !flatbuffers_has_type_hash(buffer, thash)) ? 0 :\
  ((T ## _ ## K ## t)(((uint8_t *)buffer) +\
    __flatbuffers_uoffset_read_from_pe(buffer))))
#define __flatbuffers_nested_buffer_as_root(C, N, T, K)\
static inline T ## _ ## K ## t C ## _ ## N ## _as_root_with_identifier(C ## _ ## table_t t__tmp, const char *fid__tmp)\
{ const uint8_t *buffer__tmp = C ## _ ## N(t__tmp); return __flatbuffers_read_root(T, K, buffer__tmp, fid__tmp); }\
static inline T ## _ ## K ## t C ## _ ## N ## _as_typed_root(C ## _ ## table_t t__tmp)\
{ const uint8_t *buffer__tmp = C ## _ ## N(t__tmp); return __flatbuffers_read_root(T, K, buffer__tmp, C ## _ ## type_identifier); }\
static inline T ## _ ## K ## t C ## _ ## N ## _as_root(C ## _ ## table_t t__tmp)\
{ const char *fid__tmp = T ## _file_identifier;\
  const uint8_t *buffer__tmp = C ## _ ## N(t__tmp); return __flatbuffers_read_root(T, K, buffer__tmp, fid__tmp); }
#define __flatbuffers_buffer_as_root(N, K)\
static inline N ## _ ## K ## t N ## _as_root_with_identifier(const void *buffer__tmp, const char *fid__tmp)\
{ return __flatbuffers_read_root(N, K, buffer__tmp, fid__tmp); }\
static inline N ## _ ## K ## t N ## _as_root_with_type_hash(const void *buffer__tmp, flatbuffers_thash_t thash__tmp)\
{ return __flatbuffers_read_typed_root(N, K, buffer__tmp, thash__tmp); }\
static inline N ## _ ## K ## t N ## _as_root(const void *buffer__tmp)\
{ const char *fid__tmp = N ## _file_identifier;\
  return __flatbuffers_read_root(N, K, buffer__tmp, fid__tmp); }\
static inline N ## _ ## K ## t N ## _as_typed_root(const void *buffer__tmp)\
{ return __flatbuffers_read_typed_root(N, K, buffer__tmp, N ## _type_hash); }
#define __flatbuffers_struct_as_root(N) __flatbuffers_buffer_as_root(N, struct_)
#define __flatbuffers_table_as_root(N) __flatbuffers_buffer_as_root(N, table_)

#include "flatcc/flatcc_epilogue.h"
#endif /* FLATBUFFERS_COMMON_H */
#ifndef FLATBUFFERS_COMMON_BUILDER_H
#define FLATBUFFERS_COMMON_BUILDER_H

/* Generated by flatcc 0.6.1-dev FlatBuffers schema compiler for C by dvide.com */

/* Common FlatBuffers build functionality for C. */

#include "flatcc/flatcc_prologue.h"
#ifndef FLATBUILDER_H
#include "flatcc/flatcc_builder.h"
#endif
typedef flatcc_builder_t flatbuffers_builder_t;
typedef flatcc_builder_ref_t flatbuffers_ref_t;
typedef flatcc_builder_ref_t flatbuffers_vec_ref_t;
typedef flatcc_builder_union_ref_t flatbuffers_union_ref_t;
typedef flatcc_builder_union_vec_ref_t flatbuffers_union_vec_ref_t;
/* integer return code (ref and ptr always fail on 0) */
#define flatbuffers_failed(x) ((x) < 0)
typedef flatbuffers_ref_t flatbuffers_root_t;
#define flatbuffers_root(ref) ((flatbuffers_root_t)(ref))

#define __flatbuffers_memoize_begin(B, src)\
do { flatcc_builder_ref_t _ref; if ((_ref = flatcc_builder_refmap_find((B), (src)))) return _ref; } while (0)
#define __flatbuffers_memoize_end(B, src, op) do { return flatcc_builder_refmap_insert((B), (src), (op)); } while (0)
#define __flatbuffers_memoize(B, src, op) do { __flatbuffers_memoize_begin(B, src); __flatbuffers_memoize_end(B, src, op); } while (0)

#define __flatbuffers_build_buffer(NS)\
typedef NS ## ref_t NS ## buffer_ref_t;\
static inline int NS ## buffer_start(NS ## builder_t *B, const NS ##fid_t fid)\
{ return flatcc_builder_start_buffer(B, fid, 0, 0); }\
static inline int NS ## buffer_start_with_size(NS ## builder_t *B, const NS ##fid_t fid)\
{ return flatcc_builder_start_buffer(B, fid, 0, flatcc_builder_with_size); }\
static inline int NS ## buffer_start_aligned(NS ## builder_t *B, NS ##fid_t fid, uint16_t block_align)\
{ return flatcc_builder_start_buffer(B, fid, block_align, 0); }\
static inline int NS ## buffer_start_aligned_with_size(NS ## builder_t *B, NS ##fid_t fid, uint16_t block_align)\
{ return flatcc_builder_start_buffer(B, fid, block_align, flatcc_builder_with_size); }\
static inline NS ## buffer_ref_t NS ## buffer_end(NS ## builder_t *B, NS ## ref_t root)\
{ return flatcc_builder_end_buffer(B, root); }

#define __flatbuffers_build_table_root(NS, N, FID, TFID)\
static inline int N ## _start_as_root(NS ## builder_t *B)\
{ return NS ## buffer_start(B, FID) ? -1 : N ## _start(B); }\
static inline int N ## _start_as_root_with_size(NS ## builder_t *B)\
{ return NS ## buffer_start_with_size(B, FID) ? -1 : N ## _start(B); }\
static inline int N ## _start_as_typed_root(NS ## builder_t *B)\
{ return NS ## buffer_start(B, TFID) ? -1 : N ## _start(B); }\
static inline int N ## _start_as_typed_root_with_size(NS ## builder_t *B)\
{ return NS ## buffer_start_with_size(B, TFID) ? -1 : N ## _start(B); }\
static inline NS ## buffer_ref_t N ## _end_as_root(NS ## builder_t *B)\
{ return NS ## buffer_end(B, N ## _end(B)); }\
static inline NS ## buffer_ref_t N ## _end_as_typed_root(NS ## builder_t *B)\
{ return NS ## buffer_end(B, N ## _end(B)); }\
static inline NS ## buffer_ref_t N ## _create_as_root(NS ## builder_t *B __ ## N ## _formal_args)\
{ if (NS ## buffer_start(B, FID)) return 0; return NS ## buffer_end(B, N ## _create(B __ ## N ## _call_args)); }\
static inline NS ## buffer_ref_t N ## _create_as_root_with_size(NS ## builder_t *B __ ## N ## _formal_args)\
{ if (NS ## buffer_start_with_size(B, FID)) return 0; return NS ## buffer_end(B, N ## _create(B __ ## N ## _call_args)); }\
static inline NS ## buffer_ref_t N ## _create_as_typed_root(NS ## builder_t *B __ ## N ## _formal_args)\
{ if (NS ## buffer_start(B, TFID)) return 0; return NS ## buffer_end(B, N ## _create(B __ ## N ## _call_args)); }\
static inline NS ## buffer_ref_t N ## _create_as_typed_root_with_size(NS ## builder_t *B __ ## N ## _formal_args)\
{ if (NS ## buffer_start_with_size(B, TFID)) return 0; return NS ## buffer_end(B, N ## _create(B __ ## N ## _call_args)); }\
static inline NS ## buffer_ref_t N ## _clone_as_root(NS ## builder_t *B, N ## _table_t t)\
{ if (NS ## buffer_start(B, FID)) return 0; return NS ## buffer_end(B, N ## _clone(B, t)); }\
static inline NS ## buffer_ref_t N ## _clone_as_root_with_size(NS ## builder_t *B, N ## _table_t t)\
{ if (NS ## buffer_start_with_size(B, FID)) return 0; return NS ## buffer_end(B, N ## _clone(B, t)); }\
static inline NS ## buffer_ref_t N ## _clone_as_typed_root(NS ## builder_t *B, N ## _table_t t)\
{ if (NS ## buffer_start(B, TFID)) return 0;return NS ## buffer_end(B, N ## _clone(B, t)); }\
static inline NS ## buffer_ref_t N ## _clone_as_typed_root_with_size(NS ## builder_t *B, N ## _table_t t)\
{ if (NS ## buffer_start_with_size(B, TFID)) return 0; return NS ## buffer_end(B, N ## _clone(B, t)); }

#define __flatbuffers_build_table_prolog(NS, N, FID, TFID)\
__flatbuffers_build_table_vector_ops(NS, N ## _vec, N)\
__flatbuffers_build_table_root(NS, N, FID, TFID)

#define __flatbuffers_build_struct_root(NS, N, A, FID, TFID)\
static inline N ## _t *N ## _start_as_root(NS ## builder_t *B)\
{ return NS ## buffer_start(B, FID) ? 0 : N ## _start(B); }\
static inline N ## _t *N ## _start_as_root_with_size(NS ## builder_t *B)\
{ return NS ## buffer_start_with_size(B, FID) ? 0 : N ## _start(B); }\
static inline N ## _t *N ## _start_as_typed_root(NS ## builder_t *B)\
{ return NS ## buffer_start(B, TFID) ? 0 : N ## _start(B); }\
static inline N ## _t *N ## _start_as_typed_root_with_size(NS ## builder_t *B)\
{ return NS ## buffer_start_with_size(B, TFID) ? 0 : N ## _start(B); }\
static inline NS ## buffer_ref_t N ## _end_as_root(NS ## builder_t *B)\
{ return NS ## buffer_end(B, N ## _end(B)); }\
static inline NS ## buffer_ref_t N ## _end_as_typed_root(NS ## builder_t *B)\
{ return NS ## buffer_end(B, N ## _end(B)); }\
static inline NS ## buffer_ref_t N ## _end_pe_as_root(NS ## builder_t *B)\
{ return NS ## buffer_end(B, N ## _end_pe(B)); }\
static inline NS ## buffer_ref_t N ## _end_pe_as_typed_root(NS ## builder_t *B)\
{ return NS ## buffer_end(B, N ## _end_pe(B)); }\
static inline NS ## buffer_ref_t N ## _create_as_root(NS ## builder_t *B __ ## N ## _formal_args)\
{ return flatcc_builder_create_buffer(B, FID, 0,\
  N ## _create(B __ ## N ## _call_args), A, 0); }\
static inline NS ## buffer_ref_t N ## _create_as_root_with_size(NS ## builder_t *B __ ## N ## _formal_args)\
{ return flatcc_builder_create_buffer(B, FID, 0,\
  N ## _create(B __ ## N ## _call_args), A, flatcc_builder_with_size); }\
static inline NS ## buffer_ref_t N ## _create_as_typed_root(NS ## builder_t *B __ ## N ## _formal_args)\
{ return flatcc_builder_create_buffer(B, TFID, 0,\
  N ## _create(B __ ## N ## _call_args), A, 0); }\
static inline NS ## buffer_ref_t N ## _create_as_typed_root_with_size(NS ## builder_t *B __ ## N ## _formal_args)\
{ return flatcc_builder_create_buffer(B, TFID, 0,\
  N ## _create(B __ ## N ## _call_args), A, flatcc_builder_with_size); }\
static inline NS ## buffer_ref_t N ## _clone_as_root(NS ## builder_t *B, N ## _struct_t p)\
{ return flatcc_builder_create_buffer(B, FID, 0, N ## _clone(B, p), A, 0); }\
static inline NS ## buffer_ref_t N ## _clone_as_root_with_size(NS ## builder_t *B, N ## _struct_t p)\
{ return flatcc_builder_create_buffer(B, FID, 0, N ## _clone(B, p), A, flatcc_builder_with_size); }\
static inline NS ## buffer_ref_t N ## _clone_as_typed_root(NS ## builder_t *B, N ## _struct_t p)\
{ return flatcc_builder_create_buffer(B, TFID, 0, N ## _clone(B, p), A, 0); }\
static inline NS ## buffer_ref_t N ## _clone_as_typed_root_with_size(NS ## builder_t *B, N ## _struct_t p)\
{ return flatcc_builder_create_buffer(B, TFID, 0, N ## _clone(B, p), A, flatcc_builder_with_size); }

#define __flatbuffers_build_nested_table_root(NS, N, TN, FID, TFID)\
static inline int N ## _start_as_root(NS ## builder_t *B)\
{ return NS ## buffer_start(B, FID) ? -1 : TN ## _start(B); }\
static inline int N ## _start_as_typed_root(NS ## builder_t *B)\
{ return NS ## buffer_start(B, TFID) ? -1 : TN ## _start(B); }\
static inline int N ## _end_as_root(NS ## builder_t *B)\
{ return N ## _add(B, NS ## buffer_end(B, TN ## _end(B))); }\
static inline int N ## _end_as_typed_root(NS ## builder_t *B)\
{ return N ## _add(B, NS ## buffer_end(B, TN ## _end(B))); }\
static inline int N ## _nest(NS ## builder_t *B, void *data, size_t size, uint16_t align)\
{ return N ## _add(B, flatcc_builder_create_vector(B, data, size, 1,\
  align ? align : 8, FLATBUFFERS_COUNT_MAX(1))); }\
static inline int N ## _typed_nest(NS ## builder_t *B, void *data, size_t size, uint16_t align)\
{ return N ## _add(B, flatcc_builder_create_vector(B, data, size, 1,\
  align ? align : 8, FLATBUFFERS_COUNT_MAX(1))); }\
static inline int N ## _clone_as_root(NS ## builder_t *B, TN ## _table_t t)\
{ return N ## _add(B, TN ## _clone_as_root(B, t)); }\
static inline int N ## _clone_as_typed_root(NS ## builder_t *B, TN ## _table_t t)\
{ return N ## _add(B, TN ## _clone_as_typed_root(B, t)); }

#define __flatbuffers_build_nested_struct_root(NS, N, TN, A, FID, TFID)\
static inline TN ## _t *N ## _start_as_root(NS ## builder_t *B)\
{ return NS ## buffer_start(B, FID) ? 0 : TN ## _start(B); }\
static inline TN ## _t *N ## _start_as_typed_root(NS ## builder_t *B)\
{ return NS ## buffer_start(B, FID) ? 0 : TN ## _start(B); }\
static inline int N ## _end_as_root(NS ## builder_t *B)\
{ return N ## _add(B, NS ## buffer_end(B, TN ## _end(B))); }\
static inline int N ## _end_as_typed_root(NS ## builder_t *B)\
{ return N ## _add(B, NS ## buffer_end(B, TN ## _end(B))); }\
static inline int N ## _end_pe_as_root(NS ## builder_t *B)\
{ return N ## _add(B, NS ## buffer_end(B, TN ## _end_pe(B))); }\
static inline int N ## _create_as_root(NS ## builder_t *B __ ## TN ## _formal_args)\
{ return N ## _add(B, flatcc_builder_create_buffer(B, FID, 0,\
  TN ## _create(B __ ## TN ## _call_args), A, flatcc_builder_is_nested)); }\
static inline int N ## _create_as_typed_root(NS ## builder_t *B __ ## TN ## _formal_args)\
{ return N ## _add(B, flatcc_builder_create_buffer(B, TFID, 0,\
  TN ## _create(B __ ## TN ## _call_args), A, flatcc_builder_is_nested)); }\
static inline int N ## _nest(NS ## builder_t *B, void *data, size_t size, uint16_t align)\
{ return N ## _add(B, flatcc_builder_create_vector(B, data, size, 1,\
  align < A ? A : align, FLATBUFFERS_COUNT_MAX(1))); }\
static inline int N ## _typed_nest(NS ## builder_t *B, void *data, size_t size, uint16_t align)\
{ return N ## _add(B, flatcc_builder_create_vector(B, data, size, 1,\
  align < A ? A : align, FLATBUFFERS_COUNT_MAX(1))); }\
static inline int N ## _clone_as_root(NS ## builder_t *B, TN ## _struct_t p)\
{ return N ## _add(B, TN ## _clone_as_root(B, p)); }\
static inline int N ## _clone_as_typed_root(NS ## builder_t *B, TN ## _struct_t p)\
{ return N ## _add(B, TN ## _clone_as_typed_root(B, p)); }

#define __flatbuffers_build_vector_ops(NS, V, N, TN, T)\
static inline T *V ## _extend(NS ## builder_t *B, size_t len)\
{ return (T *)flatcc_builder_extend_vector(B, len); }\
static inline T *V ## _append(NS ## builder_t *B, const T *data, size_t len)\
{ return (T *)flatcc_builder_append_vector(B, data, len); }\
static inline int V ## _truncate(NS ## builder_t *B, size_t len)\
{ return flatcc_builder_truncate_vector(B, len); }\
static inline T *V ## _edit(NS ## builder_t *B)\
{ return (T *)flatcc_builder_vector_edit(B); }\
static inline size_t V ## _reserved_len(NS ## builder_t *B)\
{ return flatcc_builder_vector_count(B); }\
static inline T *V ## _push(NS ## builder_t *B, const T *p)\
{ T *_p; return (_p = (T *)flatcc_builder_extend_vector(B, 1)) ? (memcpy(_p, p, TN ## __size()), _p) : 0; }\
static inline T *V ## _push_copy(NS ## builder_t *B, const T *p)\
{ T *_p; return (_p = (T *)flatcc_builder_extend_vector(B, 1)) ? TN ## _copy(_p, p) : 0; }\
static inline T *V ## _push_clone(NS ## builder_t *B, const T *p)\
{ T *_p; return (_p = (T *)flatcc_builder_extend_vector(B, 1)) ? TN ## _copy(_p, p) : 0; }\
static inline T *V ## _push_create(NS ## builder_t *B __ ## TN ## _formal_args)\
{ T *_p; return (_p = (T *)flatcc_builder_extend_vector(B, 1)) ? TN ## _assign(_p __ ## TN ## _call_args) : 0; }

#define __flatbuffers_build_vector(NS, N, T, S, A)\
typedef NS ## ref_t N ## _vec_ref_t;\
static inline int N ## _vec_start(NS ## builder_t *B)\
{ return flatcc_builder_start_vector(B, S, A, FLATBUFFERS_COUNT_MAX(S)); }\
static inline N ## _vec_ref_t N ## _vec_end_pe(NS ## builder_t *B)\
{ return flatcc_builder_end_vector(B); }\
static inline N ## _vec_ref_t N ## _vec_end(NS ## builder_t *B)\
{ if (!NS ## is_native_pe()) { size_t i, n; T *p = (T *)flatcc_builder_vector_edit(B);\
    for (i = 0, n = flatcc_builder_vector_count(B); i < n; ++i)\
    { N ## _to_pe(N ## __ptr_add(p, i)); }} return flatcc_builder_end_vector(B); }\
static inline N ## _vec_ref_t N ## _vec_create_pe(NS ## builder_t *B, const T *data, size_t len)\
{ return flatcc_builder_create_vector(B, data, len, S, A, FLATBUFFERS_COUNT_MAX(S)); }\
static inline N ## _vec_ref_t N ## _vec_create(NS ## builder_t *B, const T *data, size_t len)\
{ if (!NS ## is_native_pe()) { size_t i; T *p; int ret = flatcc_builder_start_vector(B, S, A, FLATBUFFERS_COUNT_MAX(S)); if (ret) { return ret; }\
  p = (T *)flatcc_builder_extend_vector(B, len); if (!p) return 0;\
  for (i = 0; i < len; ++i) { N ## _copy_to_pe(N ## __ptr_add(p, i), N ## __const_ptr_add(data, i)); }\
  return flatcc_builder_end_vector(B); } else return flatcc_builder_create_vector(B, data, len, S, A, FLATBUFFERS_COUNT_MAX(S)); }\
static inline N ## _vec_ref_t N ## _vec_clone(NS ## builder_t *B, N ##_vec_t vec)\
{ __flatbuffers_memoize(B, vec, flatcc_builder_create_vector(B, vec, N ## _vec_len(vec), S, A, FLATBUFFERS_COUNT_MAX(S))); }\
static inline N ## _vec_ref_t N ## _vec_slice(NS ## builder_t *B, N ##_vec_t vec, size_t index, size_t len)\
{ size_t n = N ## _vec_len(vec); if (index >= n) index = n; n -= index; if (len > n) len = n;\
  return flatcc_builder_create_vector(B, N ## __const_ptr_add(vec, index), len, S, A, FLATBUFFERS_COUNT_MAX(S)); }\
__flatbuffers_build_vector_ops(NS, N ## _vec, N, N, T)

#define __flatbuffers_build_union_vector_ops(NS, V, N, TN)\
static inline TN ## _union_ref_t *V ## _extend(NS ## builder_t *B, size_t len)\
{ return flatcc_builder_extend_union_vector(B, len); }\
static inline TN ## _union_ref_t *V ## _append(NS ## builder_t *B, const TN ## _union_ref_t *data, size_t len)\
{ return flatcc_builder_append_union_vector(B, data, len); }\
static inline int V ## _truncate(NS ## builder_t *B, size_t len)\
{ return flatcc_builder_truncate_union_vector(B, len); }\
static inline TN ## _union_ref_t *V ## _edit(NS ## builder_t *B)\
{ return (TN ## _union_ref_t *) flatcc_builder_union_vector_edit(B); }\
static inline size_t V ## _reserved_len(NS ## builder_t *B)\
{ return flatcc_builder_union_vector_count(B); }\
static inline TN ## _union_ref_t *V ## _push(NS ## builder_t *B, const TN ## _union_ref_t ref)\
{ return flatcc_builder_union_vector_push(B, ref); }\
static inline TN ## _union_ref_t *V ## _push_clone(NS ## builder_t *B, TN ## _union_t u)\
{ return TN ## _vec_push(B, TN ## _clone(B, u)); }

#define __flatbuffers_build_union_vector(NS, N)\
static inline int N ## _vec_start(NS ## builder_t *B)\
{ return flatcc_builder_start_union_vector(B); }\
static inline N ## _union_vec_ref_t N ## _vec_end(NS ## builder_t *B)\
{ return flatcc_builder_end_union_vector(B); }\
static inline N ## _union_vec_ref_t N ## _vec_create(NS ## builder_t *B, const N ## _union_ref_t *data, size_t len)\
{ return flatcc_builder_create_union_vector(B, data, len); }\
__flatbuffers_build_union_vector_ops(NS, N ## _vec, N, N)\
/* Preserves DAG structure separately for type and value vector, so a type vector could be shared for many value vectors. */\
static inline N ## _union_vec_ref_t N ## _vec_clone(NS ## builder_t *B, N ##_union_vec_t vec)\
{ N ## _union_vec_ref_t _uvref, _ret = { 0, 0 }; NS ## union_ref_t _uref; size_t _i, _len;\
  if (vec.type == 0) return _ret;\
  _uvref.type = flatcc_builder_refmap_find(B, vec.type); _uvref.value = flatcc_builder_refmap_find(B, vec.value);\
  _len = N ## _union_vec_len(vec); if (_uvref.type == 0) {\
  _uvref.type = flatcc_builder_refmap_insert(B, vec.type, (flatcc_builder_create_type_vector(B, vec.type, _len))); }\
  if (_uvref.type == 0) return _ret; if (_uvref.value == 0) {\
  if (flatcc_builder_start_offset_vector(B)) return _ret;\
  for (_i = 0; _i < _len; ++_i) { _uref = N ## _clone(B, N ## _union_vec_at(vec, _i));\
    if (!_uref.value || !(flatcc_builder_offset_vector_push(B, _uref.value))) return _ret; }\
  _uvref.value = flatcc_builder_refmap_insert(B, vec.value, flatcc_builder_end_offset_vector(B));\
  if (_uvref.value == 0) return _ret; } return _uvref; }

#define __flatbuffers_build_string_vector_ops(NS, N)\
static inline int N ## _push_start(NS ## builder_t *B)\
{ return NS ## string_start(B); }\
static inline NS ## string_ref_t *N ## _push_end(NS ## builder_t *B)\
{ return NS ## string_vec_push(B, NS ## string_end(B)); }\
static inline NS ## string_ref_t *N ## _push_create(NS ## builder_t *B, const char *s, size_t len)\
{ return NS ## string_vec_push(B, NS ## string_create(B, s, len)); }\
static inline NS ## string_ref_t *N ## _push_create_str(NS ## builder_t *B, const char *s)\
{ return NS ## string_vec_push(B, NS ## string_create_str(B, s)); }\
static inline NS ## string_ref_t *N ## _push_create_strn(NS ## builder_t *B, const char *s, size_t max_len)\
{ return NS ## string_vec_push(B, NS ## string_create_strn(B, s, max_len)); }\
static inline NS ## string_ref_t *N ## _push_clone(NS ## builder_t *B, NS ## string_t string)\
{ return NS ## string_vec_push(B, NS ## string_clone(B, string)); }\
static inline NS ## string_ref_t *N ## _push_slice(NS ## builder_t *B, NS ## string_t string, size_t index, size_t len)\
{ return NS ## string_vec_push(B, NS ## string_slice(B, string, index, len)); }

#define __flatbuffers_build_table_vector_ops(NS, N, TN)\
static inline int N ## _push_start(NS ## builder_t *B)\
{ return TN ## _start(B); }\
static inline TN ## _ref_t *N ## _push_end(NS ## builder_t *B)\
{ return N ## _push(B, TN ## _end(B)); }\
static inline TN ## _ref_t *N ## _push_create(NS ## builder_t *B __ ## TN ##_formal_args)\
{ return N ## _push(B, TN ## _create(B __ ## TN ## _call_args)); }

#define __flatbuffers_build_offset_vector_ops(NS, V, N, TN)\
static inline TN ## _ref_t *V ## _extend(NS ## builder_t *B, size_t len)\
{ return flatcc_builder_extend_offset_vector(B, len); }\
static inline TN ## _ref_t *V ## _append(NS ## builder_t *B, const TN ## _ref_t *data, size_t len)\
{ return flatcc_builder_append_offset_vector(B, data, len); }\
static inline int V ## _truncate(NS ## builder_t *B, size_t len)\
{ return flatcc_builder_truncate_offset_vector(B, len); }\
static inline TN ## _ref_t *V ## _edit(NS ## builder_t *B)\
{ return (TN ## _ref_t *)flatcc_builder_offset_vector_edit(B); }\
static inline size_t V ## _reserved_len(NS ## builder_t *B)\
{ return flatcc_builder_offset_vector_count(B); }\
static inline TN ## _ref_t *V ## _push(NS ## builder_t *B, const TN ## _ref_t ref)\
{ return ref ? flatcc_builder_offset_vector_push(B, ref) : 0; }

#define __flatbuffers_build_offset_vector(NS, N)\
typedef NS ## ref_t N ## _vec_ref_t;\
static inline int N ## _vec_start(NS ## builder_t *B)\
{ return flatcc_builder_start_offset_vector(B); }\
static inline N ## _vec_ref_t N ## _vec_end(NS ## builder_t *B)\
{ return flatcc_builder_end_offset_vector(B); }\
static inline N ## _vec_ref_t N ## _vec_create(NS ## builder_t *B, const N ## _ref_t *data, size_t len)\
{ return flatcc_builder_create_offset_vector(B, data, len); }\
__flatbuffers_build_offset_vector_ops(NS, N ## _vec, N, N)\
static inline N ## _vec_ref_t N ## _vec_clone(NS ## builder_t *B, N ##_vec_t vec)\
{ int _ret; N ## _ref_t _e; size_t _i, _len; __flatbuffers_memoize_begin(B, vec);\
 _len = N ## _vec_len(vec); if (flatcc_builder_start_offset_vector(B)) return 0;\
  for (_i = 0; _i < _len; ++_i) { if (!(_e = N ## _clone(B, N ## _vec_at(vec, _i)))) return 0;\
    if (!flatcc_builder_offset_vector_push(B, _e)) return 0; }\
  __flatbuffers_memoize_end(B, vec, flatcc_builder_end_offset_vector(B)); }\

#define __flatbuffers_build_string_ops(NS, N)\
static inline char *N ## _append(NS ## builder_t *B, const char *s, size_t len)\
{ return flatcc_builder_append_string(B, s, len); }\
static inline char *N ## _append_str(NS ## builder_t *B, const char *s)\
{ return flatcc_builder_append_string_str(B, s); }\
static inline char *N ## _append_strn(NS ## builder_t *B, const char *s, size_t len)\
{ return flatcc_builder_append_string_strn(B, s, len); }\
static inline size_t N ## _reserved_len(NS ## builder_t *B)\
{ return flatcc_builder_string_len(B); }\
static inline char *N ## _extend(NS ## builder_t *B, size_t len)\
{ return flatcc_builder_extend_string(B, len); }\
static inline char *N ## _edit(NS ## builder_t *B)\
{ return flatcc_builder_string_edit(B); }\
static inline int N ## _truncate(NS ## builder_t *B, size_t len)\
{ return flatcc_builder_truncate_string(B, len); }

#define __flatbuffers_build_string(NS)\
typedef NS ## ref_t NS ## string_ref_t;\
static inline int NS ## string_start(NS ## builder_t *B)\
{ return flatcc_builder_start_string(B); }\
static inline NS ## string_ref_t NS ## string_end(NS ## builder_t *B)\
{ return flatcc_builder_end_string(B); }\
static inline NS ## ref_t NS ## string_create(NS ## builder_t *B, const char *s, size_t len)\
{ return flatcc_builder_create_string(B, s, len); }\
static inline NS ## ref_t NS ## string_create_str(NS ## builder_t *B, const char *s)\
{ return flatcc_builder_create_string_str(B, s); }\
static inline NS ## ref_t NS ## string_create_strn(NS ## builder_t *B, const char *s, size_t len)\
{ return flatcc_builder_create_string_strn(B, s, len); }\
static inline NS ## string_ref_t NS ## string_clone(NS ## builder_t *B, NS ## string_t string)\
{ __flatbuffers_memoize(B, string, flatcc_builder_create_string(B, string, NS ## string_len(string))); }\
static inline NS ## string_ref_t NS ## string_slice(NS ## builder_t *B, NS ## string_t string, size_t index, size_t len)\
{ size_t n = NS ## string_len(string); if (index >= n) index = n; n -= index; if (len > n) len = n;\
  return flatcc_builder_create_string(B, string + index, len); }\
__flatbuffers_build_string_ops(NS, NS ## string)\
__flatbuffers_build_offset_vector(NS, NS ## string)

#define __flatbuffers_copy_from_pe(P, P2, N) (*(P) = N ## _read_from_pe(P2), (P))
#define __flatbuffers_from_pe(P, N) (*(P) = N ## _read_from_pe(P), (P))
#define __flatbuffers_copy_to_pe(P, P2, N) (N ## _write_to_pe((P), *(P2)), (P))
#define __flatbuffers_to_pe(P, N) (N ## _write_to_pe((P), *(P)), (P))
#define __flatbuffers_define_fixed_array_primitives(NS, N, T)\
static inline T *N ## _array_copy(T *p, const T *p2, size_t n)\
{ memcpy(p, p2, n * sizeof(T)); return p; }\
static inline T *N ## _array_copy_from_pe(T *p, const T *p2, size_t n)\
{ size_t i; if (NS ## is_native_pe()) memcpy(p, p2, n * sizeof(T)); else\
  for (i = 0; i < n; ++i) N ## _copy_from_pe(&p[i], &p2[i]); return p; }\
static inline T *N ## _array_copy_to_pe(T *p, const T *p2, size_t n)\
{ size_t i; if (NS ## is_native_pe()) memcpy(p, p2, n * sizeof(T)); else\
  for (i = 0; i < n; ++i) N ## _copy_to_pe(&p[i], &p2[i]); return p; }
#define __flatbuffers_define_scalar_primitives(NS, N, T)\
static inline T *N ## _from_pe(T *p) { return __ ## NS ## from_pe(p, N); }\
static inline T *N ## _to_pe(T *p) { return __ ## NS ## to_pe(p, N); }\
static inline T *N ## _copy(T *p, const T *p2) { *p = *p2; return p; }\
static inline T *N ## _copy_from_pe(T *p, const T *p2)\
{ return __ ## NS ## copy_from_pe(p, p2, N); }\
static inline T *N ## _copy_to_pe(T *p, const T *p2) \
{ return __ ## NS ## copy_to_pe(p, p2, N); }\
static inline T *N ## _assign(T *p, const T v0) { *p = v0; return p; }\
static inline T *N ## _assign_from_pe(T *p, T v0)\
{ *p = N ## _read_from_pe(&v0); return p; }\
static inline T *N ## _assign_to_pe(T *p, T v0)\
{ N ## _write_to_pe(p, v0); return p; }
#define __flatbuffers_build_scalar(NS, N, T)\
__ ## NS ## define_scalar_primitives(NS, N, T)\
__ ## NS ## define_fixed_array_primitives(NS, N, T)\
__ ## NS ## build_vector(NS, N, T, sizeof(T), sizeof(T))
/* Depends on generated copy_to/from_pe functions, and the type. */
#define __flatbuffers_define_struct_primitives(NS, N)\
static inline N ## _t *N ##_to_pe(N ## _t *p)\
{ if (!NS ## is_native_pe()) { N ## _copy_to_pe(p, p); }; return p; }\
static inline N ## _t *N ##_from_pe(N ## _t *p)\
{ if (!NS ## is_native_pe()) { N ## _copy_from_pe(p, p); }; return p; }\
static inline N ## _t *N ## _clear(N ## _t *p) { return (N ## _t *)memset(p, 0, N ## __size()); }

/* Depends on generated copy/assign_to/from_pe functions, and the type. */
#define __flatbuffers_build_struct(NS, N, S, A, FID, TFID)\
__ ## NS ## define_struct_primitives(NS, N)\
typedef NS ## ref_t N ## _ref_t;\
static inline N ## _t *N ## _start(NS ## builder_t *B)\
{ return (N ## _t *)flatcc_builder_start_struct(B, S, A); }\
static inline N ## _ref_t N ## _end(NS ## builder_t *B)\
{ if (!NS ## is_native_pe()) { N ## _to_pe((N ## _t *)flatcc_builder_struct_edit(B)); }\
  return flatcc_builder_end_struct(B); }\
static inline N ## _ref_t N ## _end_pe(NS ## builder_t *B)\
{ return flatcc_builder_end_struct(B); }\
static inline N ## _ref_t N ## _create(NS ## builder_t *B __ ## N ## _formal_args)\
{ N ## _t *_p = N ## _start(B); if (!_p) return 0; N ##_assign_to_pe(_p __ ## N ## _call_args);\
  return N ## _end_pe(B); }\
static inline N ## _ref_t N ## _clone(NS ## builder_t *B, N ## _struct_t p)\
{ N ## _t *_p; __flatbuffers_memoize_begin(B, p); _p = N ## _start(B); if (!_p) return 0;\
  N ## _copy(_p, p); __flatbuffers_memoize_end(B, p, N ##_end_pe(B)); }\
__flatbuffers_build_vector(NS, N, N ## _t, S, A)\
__flatbuffers_build_struct_root(NS, N, A, FID, TFID)\

#define __flatbuffers_struct_clear_field(p) memset((p), 0, sizeof(*(p)))
#define __flatbuffers_build_table(NS, N, K)\
static inline int N ## _start(NS ## builder_t *B)\
{ return flatcc_builder_start_table(B, K); }\
static inline N ## _ref_t N ## _end(NS ## builder_t *B)\
{ FLATCC_ASSERT(flatcc_builder_check_required(B, __ ## N ## _required,\
  sizeof(__ ## N ## _required) / sizeof(__ ## N ## _required[0]) - 1));\
  return flatcc_builder_end_table(B); }\
__flatbuffers_build_offset_vector(NS, N)

#define __flatbuffers_build_table_field(ID, NS, N, TN, TT)\
static inline int N ## _add(NS ## builder_t *B, TN ## _ref_t ref)\
{ TN ## _ref_t *_p; return (ref && (_p = flatcc_builder_table_add_offset(B, ID))) ?\
  ((*_p = ref), 0) : -1; }\
static inline int N ## _start(NS ## builder_t *B)\
{ return TN ## _start(B); }\
static inline int N ## _end(NS ## builder_t *B)\
{ return N ## _add(B, TN ## _end(B)); }\
static inline TN ## _ref_t N ## _create(NS ## builder_t *B __ ## TN ##_formal_args)\
{ return N ## _add(B, TN ## _create(B __ ## TN ## _call_args)); }\
static inline int N ## _clone(NS ## builder_t *B, TN ## _table_t p)\
{ return N ## _add(B, TN ## _clone(B, p)); }\
static inline int N ## _pick(NS ## builder_t *B, TT ## _table_t t)\
{ TN ## _table_t _p = N ## _get(t); return _p ? N ## _clone(B, _p) : 0; }

#define __flatbuffers_build_union_field(ID, NS, N, TN, TT)\
static inline int N ## _add(NS ## builder_t *B, TN ## _union_ref_t uref)\
{ NS ## ref_t *_p; TN ## _union_type_t *_pt; if (uref.type == TN ## _NONE) return 0; if (uref.value == 0) return -1;\
  if (!(_pt = (TN ## _union_type_t *)flatcc_builder_table_add(B, ID - 1, sizeof(*_pt), sizeof(*_pt)))) return -1;\
  *_pt = uref.type; if (!(_p = flatcc_builder_table_add_offset(B, ID))) return -1; *_p = uref.value; return 0; }\
static inline int N ## _add_type(NS ## builder_t *B, TN ## _union_type_t type)\
{ TN ## _union_type_t *_pt; if (type == TN ## _NONE) return 0; return (_pt = (TN ## _union_type_t *)flatcc_builder_table_add(B, ID - 1,\
  sizeof(*_pt), sizeof(*_pt))) ? ((*_pt = type), 0) : -1; }\
static inline int N ## _add_value(NS ## builder_t *B, TN ## _union_ref_t uref)\
{ NS ## ref_t *p; if (uref.type == TN ## _NONE) return 0; return (p = flatcc_builder_table_add_offset(B, ID)) ?\
  ((*p = uref.value), 0) : -1; }\
static inline int N ## _clone(NS ## builder_t *B, TN ## _union_t p)\
{ return N ## _add(B, TN ## _clone(B, p)); }\
static inline int N ## _pick(NS ## builder_t *B, TT ## _table_t t)\
{ TN ## _union_t _p = N ## _union(t); return _p.type ? N ## _clone(B, _p) : 0; }

/* M is the union value name and T is its type, i.e. the qualified name. */
#define __flatbuffers_build_union_table_value_field(NS, N, NU, M, T)\
static inline int N ## _ ## M ## _add(NS ## builder_t *B, T ## _ref_t ref)\
{ return N ## _add(B, NU ## _as_ ## M (ref)); }\
static inline int N ## _ ## M ## _start(NS ## builder_t *B)\
{ return T ## _start(B); }\
static inline int N ## _ ## M ## _end(NS ## builder_t *B)\
{ T ## _ref_t ref = T ## _end(B);\
  return ref ? N ## _ ## M ## _add(B, ref) : -1; }\
static inline int N ## _ ## M ## _create(NS ## builder_t *B __ ## T ##_formal_args)\
{ T ## _ref_t ref = T ## _create(B __ ## T ## _call_args);\
  return ref ? N ## _add(B, NU ## _as_ ## M(ref)) : -1; }\
static inline int N ## _ ## M ## _clone(NS ## builder_t *B, T ## _table_t t)\
{ T ## _ref_t ref = T ## _clone(B, t);\
  return ref ? N ## _add(B, NU ## _as_ ## M(ref)) : -1; }

/* M is the union value name and T is its type, i.e. the qualified name. */
#define __flatbuffers_build_union_struct_value_field(NS, N, NU, M, T)\
static inline int N ## _ ## M ## _add(NS ## builder_t *B, T ## _ref_t ref)\
{ return N ## _add(B, NU ## _as_ ## M (ref)); }\
static inline T ## _t *N ## _ ## M ## _start(NS ## builder_t *B)\
{ return T ## _start(B); }\
static inline int N ## _ ## M ## _end(NS ## builder_t *B)\
{ T ## _ref_t ref = T ## _end(B);\
  return ref ? N ## _ ## M ## _add(B, ref) : -1; }\
static inline int N ## _ ## M ## _create(NS ## builder_t *B __ ## T ##_formal_args)\
{ T ## _ref_t ref = T ## _create(B __ ## T ## _call_args);\
  return ref ? N ## _add(B, NU ## _as_ ## M(ref)) : -1; }\
static inline int N ## _ ## M ## _end_pe(NS ## builder_t *B)\
{ T ## _ref_t ref = T ## _end_pe(B);\
  return ref ? N ## _add(B, NU ## _as_ ## M(ref)) : -1; }\
static inline int N ## _ ## M ## _clone(NS ## builder_t *B, T ## _struct_t p)\
{ T ## _ref_t ref = T ## _clone(B, p);\
  return ref ? N ## _add(B, NU ## _as_ ## M(ref)) : -1; }
#define __flatbuffers_build_union_string_value_field(NS, N, NU, M)\
static inline int N ## _ ## M ## _add(NS ## builder_t *B, NS ## string_ref_t ref)\
{ return N ## _add(B, NU ## _as_ ## M (ref)); }\
__flatbuffers_build_string_field_ops(NS, N ## _ ## M)

/* NS: common namespace, ID: table field id (not offset), TN: name of type T, TT: name of table type
 * S: sizeof of scalar type, A: alignment of type T, default value V of type T. */
#define __flatbuffers_build_scalar_field(ID, NS, N, TN, T, S, A, V, TT)\
static inline int N ## _add(NS ## builder_t *B, const T v)\
{ T *_p; if (v == V) return 0; if (!(_p = (T *)flatcc_builder_table_add(B, ID, S, A))) return -1;\
  TN ## _assign_to_pe(_p, v); return 0; }\
static inline int N ## _force_add(NS ## builder_t *B, const T v)\
{ T *_p; if (!(_p = (T *)flatcc_builder_table_add(B, ID, S, A))) return -1;\
  TN ## _assign_to_pe(_p, v); return 0; }\
/* Clone does not skip default values and expects pe endian content. */\
static inline int N ## _clone(NS ## builder_t *B, const T *p)\
{ return 0 == flatcc_builder_table_add_copy(B, ID, p, S, A) ? -1 : 0; }\
/* Transferring a missing field is a nop success with 0 as result. */\
static inline int N ## _pick(NS ## builder_t *B, TT ## _table_t t)\
{ const T *_p = N ## _get_ptr(t); return _p ? N ## _clone(B, _p) : 0; }

/* NS: common namespace, ID: table field id (not offset), TN: name of type T, TT: name of table type
 * S: sizeof of scalar type, A: alignment of type T. */
#define __flatbuffers_build_scalar_optional_field(ID, NS, N, TN, T, S, A, TT)\
static inline int N ## _add(NS ## builder_t *B, const T v)\
{ T *_p; if (!(_p = (T *)flatcc_builder_table_add(B, ID, S, A))) return -1;\
  TN ## _assign_to_pe(_p, v); return 0; }\
/* Clone does not skip default values and expects pe endian content. */\
static inline int N ## _clone(NS ## builder_t *B, const T *p)\
{ return 0 == flatcc_builder_table_add_copy(B, ID, p, S, A) ? -1 : 0; }\
/* Transferring a missing field is a nop success with 0 as result. */\
static inline int N ## _pick(NS ## builder_t *B, TT ## _table_t t)\
{ const T *_p = N ## _get_ptr(t); return _p ? N ## _clone(B, _p) : 0; }

#define __flatbuffers_build_struct_field(ID, NS, N, TN, S, A, TT)\
static inline TN ## _t *N ## _start(NS ## builder_t *B)\
{ return (TN ## _t *)flatcc_builder_table_add(B, ID, S, A); }\
static inline int N ## _end(NS ## builder_t *B)\
{ if (!NS ## is_native_pe()) { TN ## _to_pe((TN ## _t *)flatcc_builder_table_edit(B, S)); } return 0; }\
static inline int N ## _end_pe(NS ## builder_t *B) { return 0; }\
static inline int N ## _create(NS ## builder_t *B __ ## TN ## _formal_args)\
{ TN ## _t *_p = N ## _start(B); if (!_p) return -1; TN ##_assign_to_pe(_p __ ## TN ## _call_args);\
  return 0; }\
static inline int N ## _add(NS ## builder_t *B, const TN ## _t *p)\
{ TN ## _t *_p = N ## _start(B); if (!_p) return -1; TN ##_copy_to_pe(_p, p); return 0; }\
static inline int N ## _clone(NS ## builder_t *B, TN ## _struct_t p)\
{ return 0 == flatcc_builder_table_add_copy(B, ID, p, S, A) ? -1 : 0; }\
static inline int N ## _pick(NS ## builder_t *B, TT ## _table_t t)\
{ TN ## _struct_t _p = N ## _get(t); return _p ? N ## _clone(B, _p) : 0; }

#define __flatbuffers_build_vector_field(ID, NS, N, TN, T, TT)\
static inline int N ## _add(NS ## builder_t *B, TN ## _vec_ref_t ref)\
{ TN ## _vec_ref_t *_p; return (ref && (_p = flatcc_builder_table_add_offset(B, ID))) ? ((*_p = ref), 0) : -1; }\
static inline int N ## _start(NS ## builder_t *B)\
{ return TN ## _vec_start(B); }\
static inline int N ## _end_pe(NS ## builder_t *B)\
{ return N ## _add(B, TN ## _vec_end_pe(B)); }\
static inline int N ## _end(NS ## builder_t *B)\
{ return N ## _add(B, TN ## _vec_end(B)); }\
static inline int N ## _create_pe(NS ## builder_t *B, const T *data, size_t len)\
{ return N ## _add(B, TN ## _vec_create_pe(B, data, len)); }\
static inline int N ## _create(NS ## builder_t *B, const T *data, size_t len)\
{ return N ## _add(B, TN ## _vec_create(B, data, len)); }\
static inline int N ## _slice(NS ## builder_t *B, TN ## _vec_t vec, size_t index, size_t len)\
{ return N ## _add(B, TN ## _vec_slice(B, vec, index, len)); }\
static inline int N ## _clone(NS ## builder_t *B, TN ## _vec_t vec)\
{ return N ## _add(B, TN ## _vec_clone(B, vec)); }\
static inline int N ## _pick(NS ## builder_t *B, TT ## _table_t t)\
{ TN ## _vec_t _p = N ## _get(t); return _p ? N ## _clone(B, _p) : 0; }\
__flatbuffers_build_vector_ops(NS, N, N, TN, T)\

#define __flatbuffers_build_offset_vector_field(ID, NS, N, TN, TT)\
static inline int N ## _add(NS ## builder_t *B, TN ## _vec_ref_t ref)\
{ TN ## _vec_ref_t *_p; return (ref && (_p = flatcc_builder_table_add_offset(B, ID))) ? ((*_p = ref), 0) : -1; }\
static inline int N ## _start(NS ## builder_t *B)\
{ return flatcc_builder_start_offset_vector(B); }\
static inline int N ## _end(NS ## builder_t *B)\
{ return N ## _add(B, flatcc_builder_end_offset_vector(B)); }\
static inline int N ## _create(NS ## builder_t *B, const TN ## _ref_t *data, size_t len)\
{ return N ## _add(B, flatcc_builder_create_offset_vector(B, data, len)); }\
__flatbuffers_build_offset_vector_ops(NS, N, N, TN)\
static inline int N ## _clone(NS ## builder_t *B, TN ## _vec_t vec)\
{ return N ## _add(B, TN ## _vec_clone(B, vec)); }\
static inline int N ## _pick(NS ## builder_t *B, TT ## _table_t t)\
{ TN ## _vec_t _p = N ## _get(t); return _p ? N ## _clone(B, _p) : 0; }

/* depends on N ## _add which differs for union member fields and ordinary fields */\
#define __flatbuffers_build_string_field_ops(NS, N)\
static inline int N ## _start(NS ## builder_t *B)\
{ return flatcc_builder_start_string(B); }\
static inline int N ## _end(NS ## builder_t *B)\
{ return N ## _add(B, flatcc_builder_end_string(B)); }\
static inline int N ## _create(NS ## builder_t *B, const char *s, size_t len)\
{ return N ## _add(B, flatcc_builder_create_string(B, s, len)); }\
static inline int N ## _create_str(NS ## builder_t *B, const char *s)\
{ return N ## _add(B, flatcc_builder_create_string_str(B, s)); }\
static inline int N ## _create_strn(NS ## builder_t *B, const char *s, size_t max_len)\
{ return N ## _add(B, flatcc_builder_create_string_strn(B, s, max_len)); }\
static inline int N ## _clone(NS ## builder_t *B, NS ## string_t string)\
{ return N ## _add(B, NS ## string_clone(B, string)); }\
static inline int N ## _slice(NS ## builder_t *B, NS ## string_t string, size_t index, size_t len)\
{ return N ## _add(B, NS ## string_slice(B, string, index, len)); }\
__flatbuffers_build_string_ops(NS, N)

#define __flatbuffers_build_string_field(ID, NS, N, TT)\
static inline int N ## _add(NS ## builder_t *B, NS ## string_ref_t ref)\
{ NS ## string_ref_t *_p; return (ref && (_p = flatcc_builder_table_add_offset(B, ID))) ? ((*_p = ref), 0) : -1; }\
__flatbuffers_build_string_field_ops(NS, N)\
static inline int N ## _pick(NS ## builder_t *B, TT ## _table_t t)\
{ NS ## string_t _p = N ## _get(t); return _p ? N ## _clone(B, _p) : 0; }

#define __flatbuffers_build_table_vector_field(ID, NS, N, TN, TT)\
__flatbuffers_build_offset_vector_field(ID, NS, N, TN, TT)\
__flatbuffers_build_table_vector_ops(NS, N, TN)

#define __flatbuffers_build_union_vector_field(ID, NS, N, TN, TT)\
static inline int N ## _add(NS ## builder_t *B, TN ## _union_vec_ref_t uvref)\
{ NS ## vec_ref_t *_p; if (!uvref.type || !uvref.value) return uvref.type == uvref.value ? 0 : -1;\
  if (!(_p = flatcc_builder_table_add_offset(B, ID - 1))) return -1; *_p = uvref.type;\
  if (!(_p = flatcc_builder_table_add_offset(B, ID))) return -1; *_p = uvref.value; return 0; }\
static inline int N ## _start(NS ## builder_t *B)\
{ return flatcc_builder_start_union_vector(B); }\
static inline int N ## _end(NS ## builder_t *B)\
{ return N ## _add(B, flatcc_builder_end_union_vector(B)); }\
static inline int N ## _create(NS ## builder_t *B, const TN ## _union_ref_t *data, size_t len)\
{ return N ## _add(B, flatcc_builder_create_union_vector(B, data, len)); }\
__flatbuffers_build_union_vector_ops(NS, N, N, TN)\
static inline int N ## _clone(NS ## builder_t *B, TN ## _union_vec_t vec)\
{ return N ## _add(B, TN ## _vec_clone(B, vec)); }\
static inline int N ## _pick(NS ## builder_t *B, TT ## _table_t t)\
{ TN ## _union_vec_t _p = N ## _union(t); return _p.type ? N ## _clone(B, _p) : 0; }

#define __flatbuffers_build_union_table_vector_value_field(NS, N, NU, M, T)\
static inline int N ## _ ## M ## _push_start(NS ## builder_t *B)\
{ return T ## _start(B); }\
static inline NU ## _union_ref_t *N ## _ ## M ## _push_end(NS ## builder_t *B)\
{ return NU ## _vec_push(B, NU ## _as_ ## M (T ## _end(B))); }\
static inline NU ## _union_ref_t *N ## _ ## M ## _push(NS ## builder_t *B, T ## _ref_t ref)\
{ return NU ## _vec_push(B, NU ## _as_ ## M (ref)); }\
static inline NU ## _union_ref_t *N ## _ ## M ## _push_create(NS ## builder_t *B __ ## T ##_formal_args)\
{ return NU ## _vec_push(B, NU ## _as_ ## M(T ## _create(B __ ## T ## _call_args))); }\
static inline NU ## _union_ref_t *N ## _ ## M ## _push_clone(NS ## builder_t *B, T ## _table_t t)\
{ return NU ## _vec_push(B, NU ## _as_ ## M(T ## _clone(B, t))); }

#define __flatbuffers_build_union_struct_vector_value_field(NS, N, NU, M, T)\
static inline T ## _t *N ## _ ## M ## _push_start(NS ## builder_t *B)\
{ return T ## _start(B); }\
static inline NU ## _union_ref_t *N ## _ ## M ## _push_end(NS ## builder_t *B)\
{ return NU ## _vec_push(B, NU ## _as_ ## M (T ## _end(B))); }\
static inline NU ## _union_ref_t *N ## _ ## M ## _push(NS ## builder_t *B, T ## _ref_t ref)\
{ return NU ## _vec_push(B, NU ## _as_ ## M (ref)); }\
static inline NU ## _union_ref_t *N ## _ ## M ## _push_create(NS ## builder_t *B __ ## T ##_formal_args)\
{ return NU ## _vec_push(B, NU ## _as_ ## M(T ## _create(B __ ## T ## _call_args))); }\
static inline NU ## _union_ref_t *N ## _ ## M ## _push_clone(NS ## builder_t *B, T ## _struct_t p)\
{ return NU ## _vec_push(B, NU ## _as_ ## M(T ## _clone(B, p))); }

#define __flatbuffers_build_union_string_vector_value_field(NS, N, NU, M)\
static inline NU ## _union_ref_t *N ## _ ## M ## _push(NS ## builder_t *B, NS ## string_ref_t ref)\
{ return NU ## _vec_push(B, NU ## _as_ ## M (ref)); }\
static inline int N ## _ ## M ## _push_start(NS ## builder_t *B)\
{ return NS ## string_start(B); }\
static inline NU ## _union_ref_t *N ## _ ## M ## _push_end(NS ## builder_t *B)\
{ return NU ## _vec_push(B, NU ## _as_ ## M(NS ## string_end(B))); }\
static inline NU ## _union_ref_t *N ## _ ## M ## _push_create(NS ## builder_t *B, const char *s, size_t len)\
{ return NU ## _vec_push(B, NU ## _as_ ## M(NS ## string_create(B, s, len))); }\
static inline NU ## _union_ref_t *N ## _ ## M ## _push_create_str(NS ## builder_t *B, const char *s)\
{ return NU ## _vec_push(B, NU ## _as_ ## M(NS ## string_create_str(B, s))); }\
static inline NU ## _union_ref_t *N ## _ ## M ## _push_create_strn(NS ## builder_t *B, const char *s, size_t max_len)\
{ return NU ## _vec_push(B, NU ## _as_ ## M(NS ## string_create_strn(B, s, max_len))); }\
static inline NU ## _union_ref_t *N ## _ ## M ## _push_clone(NS ## builder_t *B, NS ## string_t string)\
{ return NU ## _vec_push(B, NU ## _as_ ## M(NS ## string_clone(B, string))); }\
static inline NU ## _union_ref_t *N ## _ ## M ## _push_slice(NS ## builder_t *B, NS ## string_t string, size_t index, size_t len)\
{ return NU ## _vec_push(B, NU ## _as_ ## M(NS ## string_slice(B, string, index, len))); }

#define __flatbuffers_build_string_vector_field(ID, NS, N, TT)\
__flatbuffers_build_offset_vector_field(ID, NS, N, NS ## string, TT)\
__flatbuffers_build_string_vector_ops(NS, N)

#define __flatbuffers_char_formal_args , char v0
#define __flatbuffers_char_call_args , v0
#define __flatbuffers_uint8_formal_args , uint8_t v0
#define __flatbuffers_uint8_call_args , v0
#define __flatbuffers_int8_formal_args , int8_t v0
#define __flatbuffers_int8_call_args , v0
#define __flatbuffers_bool_formal_args , flatbuffers_bool_t v0
#define __flatbuffers_bool_call_args , v0
#define __flatbuffers_uint16_formal_args , uint16_t v0
#define __flatbuffers_uint16_call_args , v0
#define __flatbuffers_uint32_formal_args , uint32_t v0
#define __flatbuffers_uint32_call_args , v0
#define __flatbuffers_uint64_formal_args , uint64_t v0
#define __flatbuffers_uint64_call_args , v0
#define __flatbuffers_int16_formal_args , int16_t v0
#define __flatbuffers_int16_call_args , v0
#define __flatbuffers_int32_formal_args , int32_t v0
#define __flatbuffers_int32_call_args , v0
#define __flatbuffers_int64_formal_args , int64_t v0
#define __flatbuffers_int64_call_args , v0
#define __flatbuffers_float_formal_args , float v0
#define __flatbuffers_float_call_args , v0
#define __flatbuffers_double_formal_args , double v0
#define __flatbuffers_double_call_args , v0

__flatbuffers_build_scalar(flatbuffers_, flatbuffers_char, char)
__flatbuffers_build_scalar(flatbuffers_, flatbuffers_uint8, uint8_t)
__flatbuffers_build_scalar(flatbuffers_, flatbuffers_int8, int8_t)
__flatbuffers_build_scalar(flatbuffers_, flatbuffers_bool, flatbuffers_bool_t)
__flatbuffers_build_scalar(flatbuffers_, flatbuffers_uint16, uint16_t)
__flatbuffers_build_scalar(flatbuffers_, flatbuffers_uint32, uint32_t)
__flatbuffers_build_scalar(flatbuffers_, flatbuffers_uint64, uint64_t)
__flatbuffers_build_scalar(flatbuffers_, flatbuffers_int16, int16_t)
__flatbuffers_build_scalar(flatbuffers_, flatbuffers_int32, int32_t)
__flatbuffers_build_scalar(flatbuffers_, flatbuffers_int64, int64_t)
__flatbuffers_build_scalar(flatbuffers_, flatbuffers_float, float)
__flatbuffers_build_scalar(flatbuffers_, flatbuffers_double, double)

__flatbuffers_build_string(flatbuffers_)

__flatbuffers_build_buffer(flatbuffers_)
#include "flatcc/flatcc_epilogue.h"
#endif /* FLATBUFFERS_COMMON_BUILDER_H */
#ifndef SCHEMA_NO_FORCE_ALIGN_READER_H
#define SCHEMA_NO_FORCE_ALIGN_READER_H

/* Generated by flatcc 0.6.1-dev FlatBuffers schema compiler for C by dvide.com */

#ifndef FLATBUFFERS_COMMON_READER_H
#include "flatbuffers_common_reader.h"
#endif
#include "flatcc/flatcc_flatbuffers.h"
#ifndef __alignas_is_defined
#include <stdalign.h>
#endif
#include "flatcc/flatcc_prologue.h"
#undef flatbuffers_identifier
#define flatbuffers_identifier "TFL3"
#undef flatbuffers_extension
#define flatbuffers_extension ".tflite"


typedef const struct tflite_CustomQuantization_table *tflite_CustomQuantization_table_t;
typedef struct tflite_CustomQuantization_table *tflite_CustomQuantization_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_CustomQuantization_vec_t;
typedef flatbuffers_uoffset_t *tflite_CustomQuantization_mutable_vec_t;
typedef const struct tflite_QuantizationParameters_table *tflite_QuantizationParameters_table_t;
typedef struct tflite_QuantizationParameters_table *tflite_QuantizationParameters_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_QuantizationParameters_vec_t;
typedef flatbuffers_uoffset_t *tflite_QuantizationParameters_mutable_vec_t;
typedef const struct tflite_Int32Vector_table *tflite_Int32Vector_table_t;
typedef struct tflite_Int32Vector_table *tflite_Int32Vector_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_Int32Vector_vec_t;
typedef flatbuffers_uoffset_t *tflite_Int32Vector_mutable_vec_t;
typedef const struct tflite_Uint16Vector_table *tflite_Uint16Vector_table_t;
typedef struct tflite_Uint16Vector_table *tflite_Uint16Vector_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_Uint16Vector_vec_t;
typedef flatbuffers_uoffset_t *tflite_Uint16Vector_mutable_vec_t;
typedef const struct tflite_Uint8Vector_table *tflite_Uint8Vector_table_t;
typedef struct tflite_Uint8Vector_table *tflite_Uint8Vector_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_Uint8Vector_vec_t;
typedef flatbuffers_uoffset_t *tflite_Uint8Vector_mutable_vec_t;
typedef const struct tflite_DimensionMetadata_table *tflite_DimensionMetadata_table_t;
typedef struct tflite_DimensionMetadata_table *tflite_DimensionMetadata_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_DimensionMetadata_vec_t;
typedef flatbuffers_uoffset_t *tflite_DimensionMetadata_mutable_vec_t;
typedef const struct tflite_SparsityParameters_table *tflite_SparsityParameters_table_t;
typedef struct tflite_SparsityParameters_table *tflite_SparsityParameters_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_SparsityParameters_vec_t;
typedef flatbuffers_uoffset_t *tflite_SparsityParameters_mutable_vec_t;
typedef const struct tflite_Tensor_table *tflite_Tensor_table_t;
typedef struct tflite_Tensor_table *tflite_Tensor_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_Tensor_vec_t;
typedef flatbuffers_uoffset_t *tflite_Tensor_mutable_vec_t;
typedef const struct tflite_Conv2DOptions_table *tflite_Conv2DOptions_table_t;
typedef struct tflite_Conv2DOptions_table *tflite_Conv2DOptions_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_Conv2DOptions_vec_t;
typedef flatbuffers_uoffset_t *tflite_Conv2DOptions_mutable_vec_t;
typedef const struct tflite_Pool2DOptions_table *tflite_Pool2DOptions_table_t;
typedef struct tflite_Pool2DOptions_table *tflite_Pool2DOptions_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_Pool2DOptions_vec_t;
typedef flatbuffers_uoffset_t *tflite_Pool2DOptions_mutable_vec_t;
typedef const struct tflite_DepthwiseConv2DOptions_table *tflite_DepthwiseConv2DOptions_table_t;
typedef struct tflite_DepthwiseConv2DOptions_table *tflite_DepthwiseConv2DOptions_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_DepthwiseConv2DOptions_vec_t;
typedef flatbuffers_uoffset_t *tflite_DepthwiseConv2DOptions_mutable_vec_t;
typedef const struct tflite_ConcatEmbeddingsOptions_table *tflite_ConcatEmbeddingsOptions_table_t;
typedef struct tflite_ConcatEmbeddingsOptions_table *tflite_ConcatEmbeddingsOptions_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_ConcatEmbeddingsOptions_vec_t;
typedef flatbuffers_uoffset_t *tflite_ConcatEmbeddingsOptions_mutable_vec_t;
typedef const struct tflite_LSHProjectionOptions_table *tflite_LSHProjectionOptions_table_t;
typedef struct tflite_LSHProjectionOptions_table *tflite_LSHProjectionOptions_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_LSHProjectionOptions_vec_t;
typedef flatbuffers_uoffset_t *tflite_LSHProjectionOptions_mutable_vec_t;
typedef const struct tflite_SVDFOptions_table *tflite_SVDFOptions_table_t;
typedef struct tflite_SVDFOptions_table *tflite_SVDFOptions_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_SVDFOptions_vec_t;
typedef flatbuffers_uoffset_t *tflite_SVDFOptions_mutable_vec_t;
typedef const struct tflite_RNNOptions_table *tflite_RNNOptions_table_t;
typedef struct tflite_RNNOptions_table *tflite_RNNOptions_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_RNNOptions_vec_t;
typedef flatbuffers_uoffset_t *tflite_RNNOptions_mutable_vec_t;
typedef const struct tflite_SequenceRNNOptions_table *tflite_SequenceRNNOptions_table_t;
typedef struct tflite_SequenceRNNOptions_table *tflite_SequenceRNNOptions_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_SequenceRNNOptions_vec_t;
typedef flatbuffers_uoffset_t *tflite_SequenceRNNOptions_mutable_vec_t;
typedef const struct tflite_BidirectionalSequenceRNNOptions_table *tflite_BidirectionalSequenceRNNOptions_table_t;
typedef struct tflite_BidirectionalSequenceRNNOptions_table *tflite_BidirectionalSequenceRNNOptions_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_BidirectionalSequenceRNNOptions_vec_t;
typedef flatbuffers_uoffset_t *tflite_BidirectionalSequenceRNNOptions_mutable_vec_t;
typedef const struct tflite_FullyConnectedOptions_table *tflite_FullyConnectedOptions_table_t;
typedef struct tflite_FullyConnectedOptions_table *tflite_FullyConnectedOptions_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_FullyConnectedOptions_vec_t;
typedef flatbuffers_uoffset_t *tflite_FullyConnectedOptions_mutable_vec_t;
typedef const struct tflite_SoftmaxOptions_table *tflite_SoftmaxOptions_table_t;
typedef struct tflite_SoftmaxOptions_table *tflite_SoftmaxOptions_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_SoftmaxOptions_vec_t;
typedef flatbuffers_uoffset_t *tflite_SoftmaxOptions_mutable_vec_t;
typedef const struct tflite_ConcatenationOptions_table *tflite_ConcatenationOptions_table_t;
typedef struct tflite_ConcatenationOptions_table *tflite_ConcatenationOptions_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_ConcatenationOptions_vec_t;
typedef flatbuffers_uoffset_t *tflite_ConcatenationOptions_mutable_vec_t;
typedef const struct tflite_AddOptions_table *tflite_AddOptions_table_t;
typedef struct tflite_AddOptions_table *tflite_AddOptions_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_AddOptions_vec_t;
typedef flatbuffers_uoffset_t *tflite_AddOptions_mutable_vec_t;
typedef const struct tflite_MulOptions_table *tflite_MulOptions_table_t;
typedef struct tflite_MulOptions_table *tflite_MulOptions_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_MulOptions_vec_t;
typedef flatbuffers_uoffset_t *tflite_MulOptions_mutable_vec_t;
typedef const struct tflite_L2NormOptions_table *tflite_L2NormOptions_table_t;
typedef struct tflite_L2NormOptions_table *tflite_L2NormOptions_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_L2NormOptions_vec_t;
typedef flatbuffers_uoffset_t *tflite_L2NormOptions_mutable_vec_t;
typedef const struct tflite_LocalResponseNormalizationOptions_table *tflite_LocalResponseNormalizationOptions_table_t;
typedef struct tflite_LocalResponseNormalizationOptions_table *tflite_LocalResponseNormalizationOptions_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_LocalResponseNormalizationOptions_vec_t;
typedef flatbuffers_uoffset_t *tflite_LocalResponseNormalizationOptions_mutable_vec_t;
typedef const struct tflite_LSTMOptions_table *tflite_LSTMOptions_table_t;
typedef struct tflite_LSTMOptions_table *tflite_LSTMOptions_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_LSTMOptions_vec_t;
typedef flatbuffers_uoffset_t *tflite_LSTMOptions_mutable_vec_t;
typedef const struct tflite_UnidirectionalSequenceLSTMOptions_table *tflite_UnidirectionalSequenceLSTMOptions_table_t;
typedef struct tflite_UnidirectionalSequenceLSTMOptions_table *tflite_UnidirectionalSequenceLSTMOptions_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_UnidirectionalSequenceLSTMOptions_vec_t;
typedef flatbuffers_uoffset_t *tflite_UnidirectionalSequenceLSTMOptions_mutable_vec_t;
typedef const struct tflite_BidirectionalSequenceLSTMOptions_table *tflite_BidirectionalSequenceLSTMOptions_table_t;
typedef struct tflite_BidirectionalSequenceLSTMOptions_table *tflite_BidirectionalSequenceLSTMOptions_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_BidirectionalSequenceLSTMOptions_vec_t;
typedef flatbuffers_uoffset_t *tflite_BidirectionalSequenceLSTMOptions_mutable_vec_t;
typedef const struct tflite_ResizeBilinearOptions_table *tflite_ResizeBilinearOptions_table_t;
typedef struct tflite_ResizeBilinearOptions_table *tflite_ResizeBilinearOptions_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_ResizeBilinearOptions_vec_t;
typedef flatbuffers_uoffset_t *tflite_ResizeBilinearOptions_mutable_vec_t;
typedef const struct tflite_ResizeNearestNeighborOptions_table *tflite_ResizeNearestNeighborOptions_table_t;
typedef struct tflite_ResizeNearestNeighborOptions_table *tflite_ResizeNearestNeighborOptions_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_ResizeNearestNeighborOptions_vec_t;
typedef flatbuffers_uoffset_t *tflite_ResizeNearestNeighborOptions_mutable_vec_t;
typedef const struct tflite_CallOptions_table *tflite_CallOptions_table_t;
typedef struct tflite_CallOptions_table *tflite_CallOptions_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_CallOptions_vec_t;
typedef flatbuffers_uoffset_t *tflite_CallOptions_mutable_vec_t;
typedef const struct tflite_PadOptions_table *tflite_PadOptions_table_t;
typedef struct tflite_PadOptions_table *tflite_PadOptions_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_PadOptions_vec_t;
typedef flatbuffers_uoffset_t *tflite_PadOptions_mutable_vec_t;
typedef const struct tflite_PadV2Options_table *tflite_PadV2Options_table_t;
typedef struct tflite_PadV2Options_table *tflite_PadV2Options_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_PadV2Options_vec_t;
typedef flatbuffers_uoffset_t *tflite_PadV2Options_mutable_vec_t;
typedef const struct tflite_ReshapeOptions_table *tflite_ReshapeOptions_table_t;
typedef struct tflite_ReshapeOptions_table *tflite_ReshapeOptions_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_ReshapeOptions_vec_t;
typedef flatbuffers_uoffset_t *tflite_ReshapeOptions_mutable_vec_t;
typedef const struct tflite_SpaceToBatchNDOptions_table *tflite_SpaceToBatchNDOptions_table_t;
typedef struct tflite_SpaceToBatchNDOptions_table *tflite_SpaceToBatchNDOptions_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_SpaceToBatchNDOptions_vec_t;
typedef flatbuffers_uoffset_t *tflite_SpaceToBatchNDOptions_mutable_vec_t;
typedef const struct tflite_BatchToSpaceNDOptions_table *tflite_BatchToSpaceNDOptions_table_t;
typedef struct tflite_BatchToSpaceNDOptions_table *tflite_BatchToSpaceNDOptions_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_BatchToSpaceNDOptions_vec_t;
typedef flatbuffers_uoffset_t *tflite_BatchToSpaceNDOptions_mutable_vec_t;
typedef const struct tflite_SkipGramOptions_table *tflite_SkipGramOptions_table_t;
typedef struct tflite_SkipGramOptions_table *tflite_SkipGramOptions_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_SkipGramOptions_vec_t;
typedef flatbuffers_uoffset_t *tflite_SkipGramOptions_mutable_vec_t;
typedef const struct tflite_SpaceToDepthOptions_table *tflite_SpaceToDepthOptions_table_t;
typedef struct tflite_SpaceToDepthOptions_table *tflite_SpaceToDepthOptions_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_SpaceToDepthOptions_vec_t;
typedef flatbuffers_uoffset_t *tflite_SpaceToDepthOptions_mutable_vec_t;
typedef const struct tflite_DepthToSpaceOptions_table *tflite_DepthToSpaceOptions_table_t;
typedef struct tflite_DepthToSpaceOptions_table *tflite_DepthToSpaceOptions_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_DepthToSpaceOptions_vec_t;
typedef flatbuffers_uoffset_t *tflite_DepthToSpaceOptions_mutable_vec_t;
typedef const struct tflite_SubOptions_table *tflite_SubOptions_table_t;
typedef struct tflite_SubOptions_table *tflite_SubOptions_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_SubOptions_vec_t;
typedef flatbuffers_uoffset_t *tflite_SubOptions_mutable_vec_t;
typedef const struct tflite_DivOptions_table *tflite_DivOptions_table_t;
typedef struct tflite_DivOptions_table *tflite_DivOptions_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_DivOptions_vec_t;
typedef flatbuffers_uoffset_t *tflite_DivOptions_mutable_vec_t;
typedef const struct tflite_TopKV2Options_table *tflite_TopKV2Options_table_t;
typedef struct tflite_TopKV2Options_table *tflite_TopKV2Options_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_TopKV2Options_vec_t;
typedef flatbuffers_uoffset_t *tflite_TopKV2Options_mutable_vec_t;
typedef const struct tflite_EmbeddingLookupSparseOptions_table *tflite_EmbeddingLookupSparseOptions_table_t;
typedef struct tflite_EmbeddingLookupSparseOptions_table *tflite_EmbeddingLookupSparseOptions_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_EmbeddingLookupSparseOptions_vec_t;
typedef flatbuffers_uoffset_t *tflite_EmbeddingLookupSparseOptions_mutable_vec_t;
typedef const struct tflite_GatherOptions_table *tflite_GatherOptions_table_t;
typedef struct tflite_GatherOptions_table *tflite_GatherOptions_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_GatherOptions_vec_t;
typedef flatbuffers_uoffset_t *tflite_GatherOptions_mutable_vec_t;
typedef const struct tflite_TransposeOptions_table *tflite_TransposeOptions_table_t;
typedef struct tflite_TransposeOptions_table *tflite_TransposeOptions_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_TransposeOptions_vec_t;
typedef flatbuffers_uoffset_t *tflite_TransposeOptions_mutable_vec_t;
typedef const struct tflite_ExpOptions_table *tflite_ExpOptions_table_t;
typedef struct tflite_ExpOptions_table *tflite_ExpOptions_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_ExpOptions_vec_t;
typedef flatbuffers_uoffset_t *tflite_ExpOptions_mutable_vec_t;
typedef const struct tflite_CosOptions_table *tflite_CosOptions_table_t;
typedef struct tflite_CosOptions_table *tflite_CosOptions_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_CosOptions_vec_t;
typedef flatbuffers_uoffset_t *tflite_CosOptions_mutable_vec_t;
typedef const struct tflite_ReducerOptions_table *tflite_ReducerOptions_table_t;
typedef struct tflite_ReducerOptions_table *tflite_ReducerOptions_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_ReducerOptions_vec_t;
typedef flatbuffers_uoffset_t *tflite_ReducerOptions_mutable_vec_t;
typedef const struct tflite_SqueezeOptions_table *tflite_SqueezeOptions_table_t;
typedef struct tflite_SqueezeOptions_table *tflite_SqueezeOptions_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_SqueezeOptions_vec_t;
typedef flatbuffers_uoffset_t *tflite_SqueezeOptions_mutable_vec_t;
typedef const struct tflite_SplitOptions_table *tflite_SplitOptions_table_t;
typedef struct tflite_SplitOptions_table *tflite_SplitOptions_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_SplitOptions_vec_t;
typedef flatbuffers_uoffset_t *tflite_SplitOptions_mutable_vec_t;
typedef const struct tflite_SplitVOptions_table *tflite_SplitVOptions_table_t;
typedef struct tflite_SplitVOptions_table *tflite_SplitVOptions_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_SplitVOptions_vec_t;
typedef flatbuffers_uoffset_t *tflite_SplitVOptions_mutable_vec_t;
typedef const struct tflite_StridedSliceOptions_table *tflite_StridedSliceOptions_table_t;
typedef struct tflite_StridedSliceOptions_table *tflite_StridedSliceOptions_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_StridedSliceOptions_vec_t;
typedef flatbuffers_uoffset_t *tflite_StridedSliceOptions_mutable_vec_t;
typedef const struct tflite_LogSoftmaxOptions_table *tflite_LogSoftmaxOptions_table_t;
typedef struct tflite_LogSoftmaxOptions_table *tflite_LogSoftmaxOptions_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_LogSoftmaxOptions_vec_t;
typedef flatbuffers_uoffset_t *tflite_LogSoftmaxOptions_mutable_vec_t;
typedef const struct tflite_CastOptions_table *tflite_CastOptions_table_t;
typedef struct tflite_CastOptions_table *tflite_CastOptions_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_CastOptions_vec_t;
typedef flatbuffers_uoffset_t *tflite_CastOptions_mutable_vec_t;
typedef const struct tflite_DequantizeOptions_table *tflite_DequantizeOptions_table_t;
typedef struct tflite_DequantizeOptions_table *tflite_DequantizeOptions_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_DequantizeOptions_vec_t;
typedef flatbuffers_uoffset_t *tflite_DequantizeOptions_mutable_vec_t;
typedef const struct tflite_MaximumMinimumOptions_table *tflite_MaximumMinimumOptions_table_t;
typedef struct tflite_MaximumMinimumOptions_table *tflite_MaximumMinimumOptions_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_MaximumMinimumOptions_vec_t;
typedef flatbuffers_uoffset_t *tflite_MaximumMinimumOptions_mutable_vec_t;
typedef const struct tflite_TileOptions_table *tflite_TileOptions_table_t;
typedef struct tflite_TileOptions_table *tflite_TileOptions_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_TileOptions_vec_t;
typedef flatbuffers_uoffset_t *tflite_TileOptions_mutable_vec_t;
typedef const struct tflite_ArgMaxOptions_table *tflite_ArgMaxOptions_table_t;
typedef struct tflite_ArgMaxOptions_table *tflite_ArgMaxOptions_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_ArgMaxOptions_vec_t;
typedef flatbuffers_uoffset_t *tflite_ArgMaxOptions_mutable_vec_t;
typedef const struct tflite_ArgMinOptions_table *tflite_ArgMinOptions_table_t;
typedef struct tflite_ArgMinOptions_table *tflite_ArgMinOptions_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_ArgMinOptions_vec_t;
typedef flatbuffers_uoffset_t *tflite_ArgMinOptions_mutable_vec_t;
typedef const struct tflite_GreaterOptions_table *tflite_GreaterOptions_table_t;
typedef struct tflite_GreaterOptions_table *tflite_GreaterOptions_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_GreaterOptions_vec_t;
typedef flatbuffers_uoffset_t *tflite_GreaterOptions_mutable_vec_t;
typedef const struct tflite_GreaterEqualOptions_table *tflite_GreaterEqualOptions_table_t;
typedef struct tflite_GreaterEqualOptions_table *tflite_GreaterEqualOptions_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_GreaterEqualOptions_vec_t;
typedef flatbuffers_uoffset_t *tflite_GreaterEqualOptions_mutable_vec_t;
typedef const struct tflite_LessOptions_table *tflite_LessOptions_table_t;
typedef struct tflite_LessOptions_table *tflite_LessOptions_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_LessOptions_vec_t;
typedef flatbuffers_uoffset_t *tflite_LessOptions_mutable_vec_t;
typedef const struct tflite_LessEqualOptions_table *tflite_LessEqualOptions_table_t;
typedef struct tflite_LessEqualOptions_table *tflite_LessEqualOptions_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_LessEqualOptions_vec_t;
typedef flatbuffers_uoffset_t *tflite_LessEqualOptions_mutable_vec_t;
typedef const struct tflite_NegOptions_table *tflite_NegOptions_table_t;
typedef struct tflite_NegOptions_table *tflite_NegOptions_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_NegOptions_vec_t;
typedef flatbuffers_uoffset_t *tflite_NegOptions_mutable_vec_t;
typedef const struct tflite_SelectOptions_table *tflite_SelectOptions_table_t;
typedef struct tflite_SelectOptions_table *tflite_SelectOptions_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_SelectOptions_vec_t;
typedef flatbuffers_uoffset_t *tflite_SelectOptions_mutable_vec_t;
typedef const struct tflite_SliceOptions_table *tflite_SliceOptions_table_t;
typedef struct tflite_SliceOptions_table *tflite_SliceOptions_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_SliceOptions_vec_t;
typedef flatbuffers_uoffset_t *tflite_SliceOptions_mutable_vec_t;
typedef const struct tflite_TransposeConvOptions_table *tflite_TransposeConvOptions_table_t;
typedef struct tflite_TransposeConvOptions_table *tflite_TransposeConvOptions_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_TransposeConvOptions_vec_t;
typedef flatbuffers_uoffset_t *tflite_TransposeConvOptions_mutable_vec_t;
typedef const struct tflite_ExpandDimsOptions_table *tflite_ExpandDimsOptions_table_t;
typedef struct tflite_ExpandDimsOptions_table *tflite_ExpandDimsOptions_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_ExpandDimsOptions_vec_t;
typedef flatbuffers_uoffset_t *tflite_ExpandDimsOptions_mutable_vec_t;
typedef const struct tflite_SparseToDenseOptions_table *tflite_SparseToDenseOptions_table_t;
typedef struct tflite_SparseToDenseOptions_table *tflite_SparseToDenseOptions_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_SparseToDenseOptions_vec_t;
typedef flatbuffers_uoffset_t *tflite_SparseToDenseOptions_mutable_vec_t;
typedef const struct tflite_EqualOptions_table *tflite_EqualOptions_table_t;
typedef struct tflite_EqualOptions_table *tflite_EqualOptions_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_EqualOptions_vec_t;
typedef flatbuffers_uoffset_t *tflite_EqualOptions_mutable_vec_t;
typedef const struct tflite_NotEqualOptions_table *tflite_NotEqualOptions_table_t;
typedef struct tflite_NotEqualOptions_table *tflite_NotEqualOptions_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_NotEqualOptions_vec_t;
typedef flatbuffers_uoffset_t *tflite_NotEqualOptions_mutable_vec_t;
typedef const struct tflite_ShapeOptions_table *tflite_ShapeOptions_table_t;
typedef struct tflite_ShapeOptions_table *tflite_ShapeOptions_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_ShapeOptions_vec_t;
typedef flatbuffers_uoffset_t *tflite_ShapeOptions_mutable_vec_t;
typedef const struct tflite_RankOptions_table *tflite_RankOptions_table_t;
typedef struct tflite_RankOptions_table *tflite_RankOptions_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_RankOptions_vec_t;
typedef flatbuffers_uoffset_t *tflite_RankOptions_mutable_vec_t;
typedef const struct tflite_PowOptions_table *tflite_PowOptions_table_t;
typedef struct tflite_PowOptions_table *tflite_PowOptions_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_PowOptions_vec_t;
typedef flatbuffers_uoffset_t *tflite_PowOptions_mutable_vec_t;
typedef const struct tflite_FakeQuantOptions_table *tflite_FakeQuantOptions_table_t;
typedef struct tflite_FakeQuantOptions_table *tflite_FakeQuantOptions_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_FakeQuantOptions_vec_t;
typedef flatbuffers_uoffset_t *tflite_FakeQuantOptions_mutable_vec_t;
typedef const struct tflite_PackOptions_table *tflite_PackOptions_table_t;
typedef struct tflite_PackOptions_table *tflite_PackOptions_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_PackOptions_vec_t;
typedef flatbuffers_uoffset_t *tflite_PackOptions_mutable_vec_t;
typedef const struct tflite_LogicalOrOptions_table *tflite_LogicalOrOptions_table_t;
typedef struct tflite_LogicalOrOptions_table *tflite_LogicalOrOptions_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_LogicalOrOptions_vec_t;
typedef flatbuffers_uoffset_t *tflite_LogicalOrOptions_mutable_vec_t;
typedef const struct tflite_OneHotOptions_table *tflite_OneHotOptions_table_t;
typedef struct tflite_OneHotOptions_table *tflite_OneHotOptions_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_OneHotOptions_vec_t;
typedef flatbuffers_uoffset_t *tflite_OneHotOptions_mutable_vec_t;
typedef const struct tflite_AbsOptions_table *tflite_AbsOptions_table_t;
typedef struct tflite_AbsOptions_table *tflite_AbsOptions_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_AbsOptions_vec_t;
typedef flatbuffers_uoffset_t *tflite_AbsOptions_mutable_vec_t;
typedef const struct tflite_HardSwishOptions_table *tflite_HardSwishOptions_table_t;
typedef struct tflite_HardSwishOptions_table *tflite_HardSwishOptions_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_HardSwishOptions_vec_t;
typedef flatbuffers_uoffset_t *tflite_HardSwishOptions_mutable_vec_t;
typedef const struct tflite_LogicalAndOptions_table *tflite_LogicalAndOptions_table_t;
typedef struct tflite_LogicalAndOptions_table *tflite_LogicalAndOptions_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_LogicalAndOptions_vec_t;
typedef flatbuffers_uoffset_t *tflite_LogicalAndOptions_mutable_vec_t;
typedef const struct tflite_LogicalNotOptions_table *tflite_LogicalNotOptions_table_t;
typedef struct tflite_LogicalNotOptions_table *tflite_LogicalNotOptions_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_LogicalNotOptions_vec_t;
typedef flatbuffers_uoffset_t *tflite_LogicalNotOptions_mutable_vec_t;
typedef const struct tflite_UnpackOptions_table *tflite_UnpackOptions_table_t;
typedef struct tflite_UnpackOptions_table *tflite_UnpackOptions_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_UnpackOptions_vec_t;
typedef flatbuffers_uoffset_t *tflite_UnpackOptions_mutable_vec_t;
typedef const struct tflite_FloorDivOptions_table *tflite_FloorDivOptions_table_t;
typedef struct tflite_FloorDivOptions_table *tflite_FloorDivOptions_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_FloorDivOptions_vec_t;
typedef flatbuffers_uoffset_t *tflite_FloorDivOptions_mutable_vec_t;
typedef const struct tflite_SquareOptions_table *tflite_SquareOptions_table_t;
typedef struct tflite_SquareOptions_table *tflite_SquareOptions_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_SquareOptions_vec_t;
typedef flatbuffers_uoffset_t *tflite_SquareOptions_mutable_vec_t;
typedef const struct tflite_ZerosLikeOptions_table *tflite_ZerosLikeOptions_table_t;
typedef struct tflite_ZerosLikeOptions_table *tflite_ZerosLikeOptions_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_ZerosLikeOptions_vec_t;
typedef flatbuffers_uoffset_t *tflite_ZerosLikeOptions_mutable_vec_t;
typedef const struct tflite_FillOptions_table *tflite_FillOptions_table_t;
typedef struct tflite_FillOptions_table *tflite_FillOptions_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_FillOptions_vec_t;
typedef flatbuffers_uoffset_t *tflite_FillOptions_mutable_vec_t;
typedef const struct tflite_FloorModOptions_table *tflite_FloorModOptions_table_t;
typedef struct tflite_FloorModOptions_table *tflite_FloorModOptions_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_FloorModOptions_vec_t;
typedef flatbuffers_uoffset_t *tflite_FloorModOptions_mutable_vec_t;
typedef const struct tflite_RangeOptions_table *tflite_RangeOptions_table_t;
typedef struct tflite_RangeOptions_table *tflite_RangeOptions_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_RangeOptions_vec_t;
typedef flatbuffers_uoffset_t *tflite_RangeOptions_mutable_vec_t;
typedef const struct tflite_LeakyReluOptions_table *tflite_LeakyReluOptions_table_t;
typedef struct tflite_LeakyReluOptions_table *tflite_LeakyReluOptions_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_LeakyReluOptions_vec_t;
typedef flatbuffers_uoffset_t *tflite_LeakyReluOptions_mutable_vec_t;
typedef const struct tflite_SquaredDifferenceOptions_table *tflite_SquaredDifferenceOptions_table_t;
typedef struct tflite_SquaredDifferenceOptions_table *tflite_SquaredDifferenceOptions_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_SquaredDifferenceOptions_vec_t;
typedef flatbuffers_uoffset_t *tflite_SquaredDifferenceOptions_mutable_vec_t;
typedef const struct tflite_MirrorPadOptions_table *tflite_MirrorPadOptions_table_t;
typedef struct tflite_MirrorPadOptions_table *tflite_MirrorPadOptions_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_MirrorPadOptions_vec_t;
typedef flatbuffers_uoffset_t *tflite_MirrorPadOptions_mutable_vec_t;
typedef const struct tflite_UniqueOptions_table *tflite_UniqueOptions_table_t;
typedef struct tflite_UniqueOptions_table *tflite_UniqueOptions_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_UniqueOptions_vec_t;
typedef flatbuffers_uoffset_t *tflite_UniqueOptions_mutable_vec_t;
typedef const struct tflite_ReverseV2Options_table *tflite_ReverseV2Options_table_t;
typedef struct tflite_ReverseV2Options_table *tflite_ReverseV2Options_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_ReverseV2Options_vec_t;
typedef flatbuffers_uoffset_t *tflite_ReverseV2Options_mutable_vec_t;
typedef const struct tflite_AddNOptions_table *tflite_AddNOptions_table_t;
typedef struct tflite_AddNOptions_table *tflite_AddNOptions_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_AddNOptions_vec_t;
typedef flatbuffers_uoffset_t *tflite_AddNOptions_mutable_vec_t;
typedef const struct tflite_GatherNdOptions_table *tflite_GatherNdOptions_table_t;
typedef struct tflite_GatherNdOptions_table *tflite_GatherNdOptions_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_GatherNdOptions_vec_t;
typedef flatbuffers_uoffset_t *tflite_GatherNdOptions_mutable_vec_t;
typedef const struct tflite_WhereOptions_table *tflite_WhereOptions_table_t;
typedef struct tflite_WhereOptions_table *tflite_WhereOptions_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_WhereOptions_vec_t;
typedef flatbuffers_uoffset_t *tflite_WhereOptions_mutable_vec_t;
typedef const struct tflite_ReverseSequenceOptions_table *tflite_ReverseSequenceOptions_table_t;
typedef struct tflite_ReverseSequenceOptions_table *tflite_ReverseSequenceOptions_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_ReverseSequenceOptions_vec_t;
typedef flatbuffers_uoffset_t *tflite_ReverseSequenceOptions_mutable_vec_t;
typedef const struct tflite_MatrixDiagOptions_table *tflite_MatrixDiagOptions_table_t;
typedef struct tflite_MatrixDiagOptions_table *tflite_MatrixDiagOptions_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_MatrixDiagOptions_vec_t;
typedef flatbuffers_uoffset_t *tflite_MatrixDiagOptions_mutable_vec_t;
typedef const struct tflite_QuantizeOptions_table *tflite_QuantizeOptions_table_t;
typedef struct tflite_QuantizeOptions_table *tflite_QuantizeOptions_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_QuantizeOptions_vec_t;
typedef flatbuffers_uoffset_t *tflite_QuantizeOptions_mutable_vec_t;
typedef const struct tflite_MatrixSetDiagOptions_table *tflite_MatrixSetDiagOptions_table_t;
typedef struct tflite_MatrixSetDiagOptions_table *tflite_MatrixSetDiagOptions_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_MatrixSetDiagOptions_vec_t;
typedef flatbuffers_uoffset_t *tflite_MatrixSetDiagOptions_mutable_vec_t;
typedef const struct tflite_IfOptions_table *tflite_IfOptions_table_t;
typedef struct tflite_IfOptions_table *tflite_IfOptions_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_IfOptions_vec_t;
typedef flatbuffers_uoffset_t *tflite_IfOptions_mutable_vec_t;
typedef const struct tflite_WhileOptions_table *tflite_WhileOptions_table_t;
typedef struct tflite_WhileOptions_table *tflite_WhileOptions_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_WhileOptions_vec_t;
typedef flatbuffers_uoffset_t *tflite_WhileOptions_mutable_vec_t;
typedef const struct tflite_NonMaxSuppressionV4Options_table *tflite_NonMaxSuppressionV4Options_table_t;
typedef struct tflite_NonMaxSuppressionV4Options_table *tflite_NonMaxSuppressionV4Options_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_NonMaxSuppressionV4Options_vec_t;
typedef flatbuffers_uoffset_t *tflite_NonMaxSuppressionV4Options_mutable_vec_t;
typedef const struct tflite_NonMaxSuppressionV5Options_table *tflite_NonMaxSuppressionV5Options_table_t;
typedef struct tflite_NonMaxSuppressionV5Options_table *tflite_NonMaxSuppressionV5Options_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_NonMaxSuppressionV5Options_vec_t;
typedef flatbuffers_uoffset_t *tflite_NonMaxSuppressionV5Options_mutable_vec_t;
typedef const struct tflite_ScatterNdOptions_table *tflite_ScatterNdOptions_table_t;
typedef struct tflite_ScatterNdOptions_table *tflite_ScatterNdOptions_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_ScatterNdOptions_vec_t;
typedef flatbuffers_uoffset_t *tflite_ScatterNdOptions_mutable_vec_t;
typedef const struct tflite_SelectV2Options_table *tflite_SelectV2Options_table_t;
typedef struct tflite_SelectV2Options_table *tflite_SelectV2Options_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_SelectV2Options_vec_t;
typedef flatbuffers_uoffset_t *tflite_SelectV2Options_mutable_vec_t;
typedef const struct tflite_DensifyOptions_table *tflite_DensifyOptions_table_t;
typedef struct tflite_DensifyOptions_table *tflite_DensifyOptions_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_DensifyOptions_vec_t;
typedef flatbuffers_uoffset_t *tflite_DensifyOptions_mutable_vec_t;
typedef const struct tflite_SegmentSumOptions_table *tflite_SegmentSumOptions_table_t;
typedef struct tflite_SegmentSumOptions_table *tflite_SegmentSumOptions_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_SegmentSumOptions_vec_t;
typedef flatbuffers_uoffset_t *tflite_SegmentSumOptions_mutable_vec_t;
typedef const struct tflite_OperatorCode_table *tflite_OperatorCode_table_t;
typedef struct tflite_OperatorCode_table *tflite_OperatorCode_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_OperatorCode_vec_t;
typedef flatbuffers_uoffset_t *tflite_OperatorCode_mutable_vec_t;
typedef const struct tflite_Operator_table *tflite_Operator_table_t;
typedef struct tflite_Operator_table *tflite_Operator_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_Operator_vec_t;
typedef flatbuffers_uoffset_t *tflite_Operator_mutable_vec_t;
typedef const struct tflite_SubGraph_table *tflite_SubGraph_table_t;
typedef struct tflite_SubGraph_table *tflite_SubGraph_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_SubGraph_vec_t;
typedef flatbuffers_uoffset_t *tflite_SubGraph_mutable_vec_t;
typedef const struct tflite_Buffer_table *tflite_Buffer_table_t;
typedef struct tflite_Buffer_table *tflite_Buffer_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_Buffer_vec_t;
typedef flatbuffers_uoffset_t *tflite_Buffer_mutable_vec_t;
typedef const struct tflite_Metadata_table *tflite_Metadata_table_t;
typedef struct tflite_Metadata_table *tflite_Metadata_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_Metadata_vec_t;
typedef flatbuffers_uoffset_t *tflite_Metadata_mutable_vec_t;
typedef const struct tflite_Model_table *tflite_Model_table_t;
typedef struct tflite_Model_table *tflite_Model_mutable_table_t;
typedef const flatbuffers_uoffset_t *tflite_Model_vec_t;
typedef flatbuffers_uoffset_t *tflite_Model_mutable_vec_t;
#ifndef tflite_CustomQuantization_file_identifier
#define tflite_CustomQuantization_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_CustomQuantization_file_identifier */
#ifndef tflite_CustomQuantization_identifier
#define tflite_CustomQuantization_identifier flatbuffers_identifier
#endif
#define tflite_CustomQuantization_type_hash ((flatbuffers_thash_t)0xdffa7075)
#define tflite_CustomQuantization_type_identifier "\x75\x70\xfa\xdf"
#ifndef tflite_QuantizationParameters_file_identifier
#define tflite_QuantizationParameters_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_QuantizationParameters_file_identifier */
#ifndef tflite_QuantizationParameters_identifier
#define tflite_QuantizationParameters_identifier flatbuffers_identifier
#endif
#define tflite_QuantizationParameters_type_hash ((flatbuffers_thash_t)0xb0da78a6)
#define tflite_QuantizationParameters_type_identifier "\xa6\x78\xda\xb0"
#ifndef tflite_Int32Vector_file_identifier
#define tflite_Int32Vector_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_Int32Vector_file_identifier */
#ifndef tflite_Int32Vector_identifier
#define tflite_Int32Vector_identifier flatbuffers_identifier
#endif
#define tflite_Int32Vector_type_hash ((flatbuffers_thash_t)0x6c201a3e)
#define tflite_Int32Vector_type_identifier "\x3e\x1a\x20\x6c"
#ifndef tflite_Uint16Vector_file_identifier
#define tflite_Uint16Vector_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_Uint16Vector_file_identifier */
#ifndef tflite_Uint16Vector_identifier
#define tflite_Uint16Vector_identifier flatbuffers_identifier
#endif
#define tflite_Uint16Vector_type_hash ((flatbuffers_thash_t)0xb0fc8313)
#define tflite_Uint16Vector_type_identifier "\x13\x83\xfc\xb0"
#ifndef tflite_Uint8Vector_file_identifier
#define tflite_Uint8Vector_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_Uint8Vector_file_identifier */
#ifndef tflite_Uint8Vector_identifier
#define tflite_Uint8Vector_identifier flatbuffers_identifier
#endif
#define tflite_Uint8Vector_type_hash ((flatbuffers_thash_t)0x7748f462)
#define tflite_Uint8Vector_type_identifier "\x62\xf4\x48\x77"
#ifndef tflite_DimensionMetadata_file_identifier
#define tflite_DimensionMetadata_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_DimensionMetadata_file_identifier */
#ifndef tflite_DimensionMetadata_identifier
#define tflite_DimensionMetadata_identifier flatbuffers_identifier
#endif
#define tflite_DimensionMetadata_type_hash ((flatbuffers_thash_t)0x96b2b42c)
#define tflite_DimensionMetadata_type_identifier "\x2c\xb4\xb2\x96"
#ifndef tflite_SparsityParameters_file_identifier
#define tflite_SparsityParameters_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_SparsityParameters_file_identifier */
#ifndef tflite_SparsityParameters_identifier
#define tflite_SparsityParameters_identifier flatbuffers_identifier
#endif
#define tflite_SparsityParameters_type_hash ((flatbuffers_thash_t)0xcfca1f4)
#define tflite_SparsityParameters_type_identifier "\xf4\xa1\xfc\x0c"
#ifndef tflite_Tensor_file_identifier
#define tflite_Tensor_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_Tensor_file_identifier */
#ifndef tflite_Tensor_identifier
#define tflite_Tensor_identifier flatbuffers_identifier
#endif
#define tflite_Tensor_type_hash ((flatbuffers_thash_t)0xbf797836)
#define tflite_Tensor_type_identifier "\x36\x78\x79\xbf"
#ifndef tflite_Conv2DOptions_file_identifier
#define tflite_Conv2DOptions_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_Conv2DOptions_file_identifier */
#ifndef tflite_Conv2DOptions_identifier
#define tflite_Conv2DOptions_identifier flatbuffers_identifier
#endif
#define tflite_Conv2DOptions_type_hash ((flatbuffers_thash_t)0xd9a30bc3)
#define tflite_Conv2DOptions_type_identifier "\xc3\x0b\xa3\xd9"
#ifndef tflite_Pool2DOptions_file_identifier
#define tflite_Pool2DOptions_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_Pool2DOptions_file_identifier */
#ifndef tflite_Pool2DOptions_identifier
#define tflite_Pool2DOptions_identifier flatbuffers_identifier
#endif
#define tflite_Pool2DOptions_type_hash ((flatbuffers_thash_t)0x58c5a337)
#define tflite_Pool2DOptions_type_identifier "\x37\xa3\xc5\x58"
#ifndef tflite_DepthwiseConv2DOptions_file_identifier
#define tflite_DepthwiseConv2DOptions_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_DepthwiseConv2DOptions_file_identifier */
#ifndef tflite_DepthwiseConv2DOptions_identifier
#define tflite_DepthwiseConv2DOptions_identifier flatbuffers_identifier
#endif
#define tflite_DepthwiseConv2DOptions_type_hash ((flatbuffers_thash_t)0xf9403ace)
#define tflite_DepthwiseConv2DOptions_type_identifier "\xce\x3a\x40\xf9"
#ifndef tflite_ConcatEmbeddingsOptions_file_identifier
#define tflite_ConcatEmbeddingsOptions_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_ConcatEmbeddingsOptions_file_identifier */
#ifndef tflite_ConcatEmbeddingsOptions_identifier
#define tflite_ConcatEmbeddingsOptions_identifier flatbuffers_identifier
#endif
#define tflite_ConcatEmbeddingsOptions_type_hash ((flatbuffers_thash_t)0x5cbf7355)
#define tflite_ConcatEmbeddingsOptions_type_identifier "\x55\x73\xbf\x5c"
#ifndef tflite_LSHProjectionOptions_file_identifier
#define tflite_LSHProjectionOptions_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_LSHProjectionOptions_file_identifier */
#ifndef tflite_LSHProjectionOptions_identifier
#define tflite_LSHProjectionOptions_identifier flatbuffers_identifier
#endif
#define tflite_LSHProjectionOptions_type_hash ((flatbuffers_thash_t)0xf4a1ca43)
#define tflite_LSHProjectionOptions_type_identifier "\x43\xca\xa1\xf4"
#ifndef tflite_SVDFOptions_file_identifier
#define tflite_SVDFOptions_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_SVDFOptions_file_identifier */
#ifndef tflite_SVDFOptions_identifier
#define tflite_SVDFOptions_identifier flatbuffers_identifier
#endif
#define tflite_SVDFOptions_type_hash ((flatbuffers_thash_t)0xf19e3ade)
#define tflite_SVDFOptions_type_identifier "\xde\x3a\x9e\xf1"
#ifndef tflite_RNNOptions_file_identifier
#define tflite_RNNOptions_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_RNNOptions_file_identifier */
#ifndef tflite_RNNOptions_identifier
#define tflite_RNNOptions_identifier flatbuffers_identifier
#endif
#define tflite_RNNOptions_type_hash ((flatbuffers_thash_t)0xd92694bb)
#define tflite_RNNOptions_type_identifier "\xbb\x94\x26\xd9"
#ifndef tflite_SequenceRNNOptions_file_identifier
#define tflite_SequenceRNNOptions_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_SequenceRNNOptions_file_identifier */
#ifndef tflite_SequenceRNNOptions_identifier
#define tflite_SequenceRNNOptions_identifier flatbuffers_identifier
#endif
#define tflite_SequenceRNNOptions_type_hash ((flatbuffers_thash_t)0xd82643c6)
#define tflite_SequenceRNNOptions_type_identifier "\xc6\x43\x26\xd8"
#ifndef tflite_BidirectionalSequenceRNNOptions_file_identifier
#define tflite_BidirectionalSequenceRNNOptions_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_BidirectionalSequenceRNNOptions_file_identifier */
#ifndef tflite_BidirectionalSequenceRNNOptions_identifier
#define tflite_BidirectionalSequenceRNNOptions_identifier flatbuffers_identifier
#endif
#define tflite_BidirectionalSequenceRNNOptions_type_hash ((flatbuffers_thash_t)0x1362e847)
#define tflite_BidirectionalSequenceRNNOptions_type_identifier "\x47\xe8\x62\x13"
#ifndef tflite_FullyConnectedOptions_file_identifier
#define tflite_FullyConnectedOptions_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_FullyConnectedOptions_file_identifier */
#ifndef tflite_FullyConnectedOptions_identifier
#define tflite_FullyConnectedOptions_identifier flatbuffers_identifier
#endif
#define tflite_FullyConnectedOptions_type_hash ((flatbuffers_thash_t)0x93db5b3a)
#define tflite_FullyConnectedOptions_type_identifier "\x3a\x5b\xdb\x93"
#ifndef tflite_SoftmaxOptions_file_identifier
#define tflite_SoftmaxOptions_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_SoftmaxOptions_file_identifier */
#ifndef tflite_SoftmaxOptions_identifier
#define tflite_SoftmaxOptions_identifier flatbuffers_identifier
#endif
#define tflite_SoftmaxOptions_type_hash ((flatbuffers_thash_t)0x891b190f)
#define tflite_SoftmaxOptions_type_identifier "\x0f\x19\x1b\x89"
#ifndef tflite_ConcatenationOptions_file_identifier
#define tflite_ConcatenationOptions_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_ConcatenationOptions_file_identifier */
#ifndef tflite_ConcatenationOptions_identifier
#define tflite_ConcatenationOptions_identifier flatbuffers_identifier
#endif
#define tflite_ConcatenationOptions_type_hash ((flatbuffers_thash_t)0xb58162bd)
#define tflite_ConcatenationOptions_type_identifier "\xbd\x62\x81\xb5"
#ifndef tflite_AddOptions_file_identifier
#define tflite_AddOptions_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_AddOptions_file_identifier */
#ifndef tflite_AddOptions_identifier
#define tflite_AddOptions_identifier flatbuffers_identifier
#endif
#define tflite_AddOptions_type_hash ((flatbuffers_thash_t)0x863ea624)
#define tflite_AddOptions_type_identifier "\x24\xa6\x3e\x86"
#ifndef tflite_MulOptions_file_identifier
#define tflite_MulOptions_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_MulOptions_file_identifier */
#ifndef tflite_MulOptions_identifier
#define tflite_MulOptions_identifier flatbuffers_identifier
#endif
#define tflite_MulOptions_type_hash ((flatbuffers_thash_t)0xa726f07b)
#define tflite_MulOptions_type_identifier "\x7b\xf0\x26\xa7"
#ifndef tflite_L2NormOptions_file_identifier
#define tflite_L2NormOptions_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_L2NormOptions_file_identifier */
#ifndef tflite_L2NormOptions_identifier
#define tflite_L2NormOptions_identifier flatbuffers_identifier
#endif
#define tflite_L2NormOptions_type_hash ((flatbuffers_thash_t)0xb9f707f7)
#define tflite_L2NormOptions_type_identifier "\xf7\x07\xf7\xb9"
#ifndef tflite_LocalResponseNormalizationOptions_file_identifier
#define tflite_LocalResponseNormalizationOptions_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_LocalResponseNormalizationOptions_file_identifier */
#ifndef tflite_LocalResponseNormalizationOptions_identifier
#define tflite_LocalResponseNormalizationOptions_identifier flatbuffers_identifier
#endif
#define tflite_LocalResponseNormalizationOptions_type_hash ((flatbuffers_thash_t)0xbfb218a8)
#define tflite_LocalResponseNormalizationOptions_type_identifier "\xa8\x18\xb2\xbf"
#ifndef tflite_LSTMOptions_file_identifier
#define tflite_LSTMOptions_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_LSTMOptions_file_identifier */
#ifndef tflite_LSTMOptions_identifier
#define tflite_LSTMOptions_identifier flatbuffers_identifier
#endif
#define tflite_LSTMOptions_type_hash ((flatbuffers_thash_t)0x8f5d68d1)
#define tflite_LSTMOptions_type_identifier "\xd1\x68\x5d\x8f"
#ifndef tflite_UnidirectionalSequenceLSTMOptions_file_identifier
#define tflite_UnidirectionalSequenceLSTMOptions_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_UnidirectionalSequenceLSTMOptions_file_identifier */
#ifndef tflite_UnidirectionalSequenceLSTMOptions_identifier
#define tflite_UnidirectionalSequenceLSTMOptions_identifier flatbuffers_identifier
#endif
#define tflite_UnidirectionalSequenceLSTMOptions_type_hash ((flatbuffers_thash_t)0xb4ccf058)
#define tflite_UnidirectionalSequenceLSTMOptions_type_identifier "\x58\xf0\xcc\xb4"
#ifndef tflite_BidirectionalSequenceLSTMOptions_file_identifier
#define tflite_BidirectionalSequenceLSTMOptions_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_BidirectionalSequenceLSTMOptions_file_identifier */
#ifndef tflite_BidirectionalSequenceLSTMOptions_identifier
#define tflite_BidirectionalSequenceLSTMOptions_identifier flatbuffers_identifier
#endif
#define tflite_BidirectionalSequenceLSTMOptions_type_hash ((flatbuffers_thash_t)0x4f191bcd)
#define tflite_BidirectionalSequenceLSTMOptions_type_identifier "\xcd\x1b\x19\x4f"
#ifndef tflite_ResizeBilinearOptions_file_identifier
#define tflite_ResizeBilinearOptions_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_ResizeBilinearOptions_file_identifier */
#ifndef tflite_ResizeBilinearOptions_identifier
#define tflite_ResizeBilinearOptions_identifier flatbuffers_identifier
#endif
#define tflite_ResizeBilinearOptions_type_hash ((flatbuffers_thash_t)0x2f688e57)
#define tflite_ResizeBilinearOptions_type_identifier "\x57\x8e\x68\x2f"
#ifndef tflite_ResizeNearestNeighborOptions_file_identifier
#define tflite_ResizeNearestNeighborOptions_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_ResizeNearestNeighborOptions_file_identifier */
#ifndef tflite_ResizeNearestNeighborOptions_identifier
#define tflite_ResizeNearestNeighborOptions_identifier flatbuffers_identifier
#endif
#define tflite_ResizeNearestNeighborOptions_type_hash ((flatbuffers_thash_t)0xa7bd74d)
#define tflite_ResizeNearestNeighborOptions_type_identifier "\x4d\xd7\x7b\x0a"
#ifndef tflite_CallOptions_file_identifier
#define tflite_CallOptions_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_CallOptions_file_identifier */
#ifndef tflite_CallOptions_identifier
#define tflite_CallOptions_identifier flatbuffers_identifier
#endif
#define tflite_CallOptions_type_hash ((flatbuffers_thash_t)0x73bc5adb)
#define tflite_CallOptions_type_identifier "\xdb\x5a\xbc\x73"
#ifndef tflite_PadOptions_file_identifier
#define tflite_PadOptions_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_PadOptions_file_identifier */
#ifndef tflite_PadOptions_identifier
#define tflite_PadOptions_identifier flatbuffers_identifier
#endif
#define tflite_PadOptions_type_hash ((flatbuffers_thash_t)0x2c72eb7e)
#define tflite_PadOptions_type_identifier "\x7e\xeb\x72\x2c"
#ifndef tflite_PadV2Options_file_identifier
#define tflite_PadV2Options_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_PadV2Options_file_identifier */
#ifndef tflite_PadV2Options_identifier
#define tflite_PadV2Options_identifier flatbuffers_identifier
#endif
#define tflite_PadV2Options_type_hash ((flatbuffers_thash_t)0x61cfd26e)
#define tflite_PadV2Options_type_identifier "\x6e\xd2\xcf\x61"
#ifndef tflite_ReshapeOptions_file_identifier
#define tflite_ReshapeOptions_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_ReshapeOptions_file_identifier */
#ifndef tflite_ReshapeOptions_identifier
#define tflite_ReshapeOptions_identifier flatbuffers_identifier
#endif
#define tflite_ReshapeOptions_type_hash ((flatbuffers_thash_t)0x9c0f9797)
#define tflite_ReshapeOptions_type_identifier "\x97\x97\x0f\x9c"
#ifndef tflite_SpaceToBatchNDOptions_file_identifier
#define tflite_SpaceToBatchNDOptions_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_SpaceToBatchNDOptions_file_identifier */
#ifndef tflite_SpaceToBatchNDOptions_identifier
#define tflite_SpaceToBatchNDOptions_identifier flatbuffers_identifier
#endif
#define tflite_SpaceToBatchNDOptions_type_hash ((flatbuffers_thash_t)0x1ac8113e)
#define tflite_SpaceToBatchNDOptions_type_identifier "\x3e\x11\xc8\x1a"
#ifndef tflite_BatchToSpaceNDOptions_file_identifier
#define tflite_BatchToSpaceNDOptions_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_BatchToSpaceNDOptions_file_identifier */
#ifndef tflite_BatchToSpaceNDOptions_identifier
#define tflite_BatchToSpaceNDOptions_identifier flatbuffers_identifier
#endif
#define tflite_BatchToSpaceNDOptions_type_hash ((flatbuffers_thash_t)0x2e26be3a)
#define tflite_BatchToSpaceNDOptions_type_identifier "\x3a\xbe\x26\x2e"
#ifndef tflite_SkipGramOptions_file_identifier
#define tflite_SkipGramOptions_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_SkipGramOptions_file_identifier */
#ifndef tflite_SkipGramOptions_identifier
#define tflite_SkipGramOptions_identifier flatbuffers_identifier
#endif
#define tflite_SkipGramOptions_type_hash ((flatbuffers_thash_t)0x7d3ad1e3)
#define tflite_SkipGramOptions_type_identifier "\xe3\xd1\x3a\x7d"
#ifndef tflite_SpaceToDepthOptions_file_identifier
#define tflite_SpaceToDepthOptions_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_SpaceToDepthOptions_file_identifier */
#ifndef tflite_SpaceToDepthOptions_identifier
#define tflite_SpaceToDepthOptions_identifier flatbuffers_identifier
#endif
#define tflite_SpaceToDepthOptions_type_hash ((flatbuffers_thash_t)0x599e1b6b)
#define tflite_SpaceToDepthOptions_type_identifier "\x6b\x1b\x9e\x59"
#ifndef tflite_DepthToSpaceOptions_file_identifier
#define tflite_DepthToSpaceOptions_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_DepthToSpaceOptions_file_identifier */
#ifndef tflite_DepthToSpaceOptions_identifier
#define tflite_DepthToSpaceOptions_identifier flatbuffers_identifier
#endif
#define tflite_DepthToSpaceOptions_type_hash ((flatbuffers_thash_t)0x68ca2df9)
#define tflite_DepthToSpaceOptions_type_identifier "\xf9\x2d\xca\x68"
#ifndef tflite_SubOptions_file_identifier
#define tflite_SubOptions_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_SubOptions_file_identifier */
#ifndef tflite_SubOptions_identifier
#define tflite_SubOptions_identifier flatbuffers_identifier
#endif
#define tflite_SubOptions_type_hash ((flatbuffers_thash_t)0xd3e4a217)
#define tflite_SubOptions_type_identifier "\x17\xa2\xe4\xd3"
#ifndef tflite_DivOptions_file_identifier
#define tflite_DivOptions_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_DivOptions_file_identifier */
#ifndef tflite_DivOptions_identifier
#define tflite_DivOptions_identifier flatbuffers_identifier
#endif
#define tflite_DivOptions_type_hash ((flatbuffers_thash_t)0xf5490dd4)
#define tflite_DivOptions_type_identifier "\xd4\x0d\x49\xf5"
#ifndef tflite_TopKV2Options_file_identifier
#define tflite_TopKV2Options_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_TopKV2Options_file_identifier */
#ifndef tflite_TopKV2Options_identifier
#define tflite_TopKV2Options_identifier flatbuffers_identifier
#endif
#define tflite_TopKV2Options_type_hash ((flatbuffers_thash_t)0x4b96811f)
#define tflite_TopKV2Options_type_identifier "\x1f\x81\x96\x4b"
#ifndef tflite_EmbeddingLookupSparseOptions_file_identifier
#define tflite_EmbeddingLookupSparseOptions_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_EmbeddingLookupSparseOptions_file_identifier */
#ifndef tflite_EmbeddingLookupSparseOptions_identifier
#define tflite_EmbeddingLookupSparseOptions_identifier flatbuffers_identifier
#endif
#define tflite_EmbeddingLookupSparseOptions_type_hash ((flatbuffers_thash_t)0x490b5c0)
#define tflite_EmbeddingLookupSparseOptions_type_identifier "\xc0\xb5\x90\x04"
#ifndef tflite_GatherOptions_file_identifier
#define tflite_GatherOptions_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_GatherOptions_file_identifier */
#ifndef tflite_GatherOptions_identifier
#define tflite_GatherOptions_identifier flatbuffers_identifier
#endif
#define tflite_GatherOptions_type_hash ((flatbuffers_thash_t)0x6caef51a)
#define tflite_GatherOptions_type_identifier "\x1a\xf5\xae\x6c"
#ifndef tflite_TransposeOptions_file_identifier
#define tflite_TransposeOptions_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_TransposeOptions_file_identifier */
#ifndef tflite_TransposeOptions_identifier
#define tflite_TransposeOptions_identifier flatbuffers_identifier
#endif
#define tflite_TransposeOptions_type_hash ((flatbuffers_thash_t)0xb72d05ac)
#define tflite_TransposeOptions_type_identifier "\xac\x05\x2d\xb7"
#ifndef tflite_ExpOptions_file_identifier
#define tflite_ExpOptions_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_ExpOptions_file_identifier */
#ifndef tflite_ExpOptions_identifier
#define tflite_ExpOptions_identifier flatbuffers_identifier
#endif
#define tflite_ExpOptions_type_hash ((flatbuffers_thash_t)0x1f27c848)
#define tflite_ExpOptions_type_identifier "\x48\xc8\x27\x1f"
#ifndef tflite_CosOptions_file_identifier
#define tflite_CosOptions_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_CosOptions_file_identifier */
#ifndef tflite_CosOptions_identifier
#define tflite_CosOptions_identifier flatbuffers_identifier
#endif
#define tflite_CosOptions_type_hash ((flatbuffers_thash_t)0x7d5b4528)
#define tflite_CosOptions_type_identifier "\x28\x45\x5b\x7d"
#ifndef tflite_ReducerOptions_file_identifier
#define tflite_ReducerOptions_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_ReducerOptions_file_identifier */
#ifndef tflite_ReducerOptions_identifier
#define tflite_ReducerOptions_identifier flatbuffers_identifier
#endif
#define tflite_ReducerOptions_type_hash ((flatbuffers_thash_t)0x74698e91)
#define tflite_ReducerOptions_type_identifier "\x91\x8e\x69\x74"
#ifndef tflite_SqueezeOptions_file_identifier
#define tflite_SqueezeOptions_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_SqueezeOptions_file_identifier */
#ifndef tflite_SqueezeOptions_identifier
#define tflite_SqueezeOptions_identifier flatbuffers_identifier
#endif
#define tflite_SqueezeOptions_type_hash ((flatbuffers_thash_t)0xaef42aa5)
#define tflite_SqueezeOptions_type_identifier "\xa5\x2a\xf4\xae"
#ifndef tflite_SplitOptions_file_identifier
#define tflite_SplitOptions_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_SplitOptions_file_identifier */
#ifndef tflite_SplitOptions_identifier
#define tflite_SplitOptions_identifier flatbuffers_identifier
#endif
#define tflite_SplitOptions_type_hash ((flatbuffers_thash_t)0x82a1093d)
#define tflite_SplitOptions_type_identifier "\x3d\x09\xa1\x82"
#ifndef tflite_SplitVOptions_file_identifier
#define tflite_SplitVOptions_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_SplitVOptions_file_identifier */
#ifndef tflite_SplitVOptions_identifier
#define tflite_SplitVOptions_identifier flatbuffers_identifier
#endif
#define tflite_SplitVOptions_type_hash ((flatbuffers_thash_t)0x1a4a76f9)
#define tflite_SplitVOptions_type_identifier "\xf9\x76\x4a\x1a"
#ifndef tflite_StridedSliceOptions_file_identifier
#define tflite_StridedSliceOptions_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_StridedSliceOptions_file_identifier */
#ifndef tflite_StridedSliceOptions_identifier
#define tflite_StridedSliceOptions_identifier flatbuffers_identifier
#endif
#define tflite_StridedSliceOptions_type_hash ((flatbuffers_thash_t)0x20819b6e)
#define tflite_StridedSliceOptions_type_identifier "\x6e\x9b\x81\x20"
#ifndef tflite_LogSoftmaxOptions_file_identifier
#define tflite_LogSoftmaxOptions_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_LogSoftmaxOptions_file_identifier */
#ifndef tflite_LogSoftmaxOptions_identifier
#define tflite_LogSoftmaxOptions_identifier flatbuffers_identifier
#endif
#define tflite_LogSoftmaxOptions_type_hash ((flatbuffers_thash_t)0x2ca2f21f)
#define tflite_LogSoftmaxOptions_type_identifier "\x1f\xf2\xa2\x2c"
#ifndef tflite_CastOptions_file_identifier
#define tflite_CastOptions_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_CastOptions_file_identifier */
#ifndef tflite_CastOptions_identifier
#define tflite_CastOptions_identifier flatbuffers_identifier
#endif
#define tflite_CastOptions_type_hash ((flatbuffers_thash_t)0xa4c4512e)
#define tflite_CastOptions_type_identifier "\x2e\x51\xc4\xa4"
#ifndef tflite_DequantizeOptions_file_identifier
#define tflite_DequantizeOptions_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_DequantizeOptions_file_identifier */
#ifndef tflite_DequantizeOptions_identifier
#define tflite_DequantizeOptions_identifier flatbuffers_identifier
#endif
#define tflite_DequantizeOptions_type_hash ((flatbuffers_thash_t)0xede6b3a3)
#define tflite_DequantizeOptions_type_identifier "\xa3\xb3\xe6\xed"
#ifndef tflite_MaximumMinimumOptions_file_identifier
#define tflite_MaximumMinimumOptions_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_MaximumMinimumOptions_file_identifier */
#ifndef tflite_MaximumMinimumOptions_identifier
#define tflite_MaximumMinimumOptions_identifier flatbuffers_identifier
#endif
#define tflite_MaximumMinimumOptions_type_hash ((flatbuffers_thash_t)0x39131561)
#define tflite_MaximumMinimumOptions_type_identifier "\x61\x15\x13\x39"
#ifndef tflite_TileOptions_file_identifier
#define tflite_TileOptions_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_TileOptions_file_identifier */
#ifndef tflite_TileOptions_identifier
#define tflite_TileOptions_identifier flatbuffers_identifier
#endif
#define tflite_TileOptions_type_hash ((flatbuffers_thash_t)0x95eb11bf)
#define tflite_TileOptions_type_identifier "\xbf\x11\xeb\x95"
#ifndef tflite_ArgMaxOptions_file_identifier
#define tflite_ArgMaxOptions_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_ArgMaxOptions_file_identifier */
#ifndef tflite_ArgMaxOptions_identifier
#define tflite_ArgMaxOptions_identifier flatbuffers_identifier
#endif
#define tflite_ArgMaxOptions_type_hash ((flatbuffers_thash_t)0x3c9c6fb9)
#define tflite_ArgMaxOptions_type_identifier "\xb9\x6f\x9c\x3c"
#ifndef tflite_ArgMinOptions_file_identifier
#define tflite_ArgMinOptions_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_ArgMinOptions_file_identifier */
#ifndef tflite_ArgMinOptions_identifier
#define tflite_ArgMinOptions_identifier flatbuffers_identifier
#endif
#define tflite_ArgMinOptions_type_hash ((flatbuffers_thash_t)0xf993b60b)
#define tflite_ArgMinOptions_type_identifier "\x0b\xb6\x93\xf9"
#ifndef tflite_GreaterOptions_file_identifier
#define tflite_GreaterOptions_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_GreaterOptions_file_identifier */
#ifndef tflite_GreaterOptions_identifier
#define tflite_GreaterOptions_identifier flatbuffers_identifier
#endif
#define tflite_GreaterOptions_type_hash ((flatbuffers_thash_t)0x2164414f)
#define tflite_GreaterOptions_type_identifier "\x4f\x41\x64\x21"
#ifndef tflite_GreaterEqualOptions_file_identifier
#define tflite_GreaterEqualOptions_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_GreaterEqualOptions_file_identifier */
#ifndef tflite_GreaterEqualOptions_identifier
#define tflite_GreaterEqualOptions_identifier flatbuffers_identifier
#endif
#define tflite_GreaterEqualOptions_type_hash ((flatbuffers_thash_t)0x3f16d449)
#define tflite_GreaterEqualOptions_type_identifier "\x49\xd4\x16\x3f"
#ifndef tflite_LessOptions_file_identifier
#define tflite_LessOptions_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_LessOptions_file_identifier */
#ifndef tflite_LessOptions_identifier
#define tflite_LessOptions_identifier flatbuffers_identifier
#endif
#define tflite_LessOptions_type_hash ((flatbuffers_thash_t)0x565de5ac)
#define tflite_LessOptions_type_identifier "\xac\xe5\x5d\x56"
#ifndef tflite_LessEqualOptions_file_identifier
#define tflite_LessEqualOptions_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_LessEqualOptions_file_identifier */
#ifndef tflite_LessEqualOptions_identifier
#define tflite_LessEqualOptions_identifier flatbuffers_identifier
#endif
#define tflite_LessEqualOptions_type_hash ((flatbuffers_thash_t)0x586deef8)
#define tflite_LessEqualOptions_type_identifier "\xf8\xee\x6d\x58"
#ifndef tflite_NegOptions_file_identifier
#define tflite_NegOptions_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_NegOptions_file_identifier */
#ifndef tflite_NegOptions_identifier
#define tflite_NegOptions_identifier flatbuffers_identifier
#endif
#define tflite_NegOptions_type_hash ((flatbuffers_thash_t)0x59e93a5b)
#define tflite_NegOptions_type_identifier "\x5b\x3a\xe9\x59"
#ifndef tflite_SelectOptions_file_identifier
#define tflite_SelectOptions_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_SelectOptions_file_identifier */
#ifndef tflite_SelectOptions_identifier
#define tflite_SelectOptions_identifier flatbuffers_identifier
#endif
#define tflite_SelectOptions_type_hash ((flatbuffers_thash_t)0x27b8c05b)
#define tflite_SelectOptions_type_identifier "\x5b\xc0\xb8\x27"
#ifndef tflite_SliceOptions_file_identifier
#define tflite_SliceOptions_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_SliceOptions_file_identifier */
#ifndef tflite_SliceOptions_identifier
#define tflite_SliceOptions_identifier flatbuffers_identifier
#endif
#define tflite_SliceOptions_type_hash ((flatbuffers_thash_t)0x99261b4b)
#define tflite_SliceOptions_type_identifier "\x4b\x1b\x26\x99"
#ifndef tflite_TransposeConvOptions_file_identifier
#define tflite_TransposeConvOptions_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_TransposeConvOptions_file_identifier */
#ifndef tflite_TransposeConvOptions_identifier
#define tflite_TransposeConvOptions_identifier flatbuffers_identifier
#endif
#define tflite_TransposeConvOptions_type_hash ((flatbuffers_thash_t)0x2fea88b6)
#define tflite_TransposeConvOptions_type_identifier "\xb6\x88\xea\x2f"
#ifndef tflite_ExpandDimsOptions_file_identifier
#define tflite_ExpandDimsOptions_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_ExpandDimsOptions_file_identifier */
#ifndef tflite_ExpandDimsOptions_identifier
#define tflite_ExpandDimsOptions_identifier flatbuffers_identifier
#endif
#define tflite_ExpandDimsOptions_type_hash ((flatbuffers_thash_t)0x654b3f7a)
#define tflite_ExpandDimsOptions_type_identifier "\x7a\x3f\x4b\x65"
#ifndef tflite_SparseToDenseOptions_file_identifier
#define tflite_SparseToDenseOptions_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_SparseToDenseOptions_file_identifier */
#ifndef tflite_SparseToDenseOptions_identifier
#define tflite_SparseToDenseOptions_identifier flatbuffers_identifier
#endif
#define tflite_SparseToDenseOptions_type_hash ((flatbuffers_thash_t)0x4fe152fd)
#define tflite_SparseToDenseOptions_type_identifier "\xfd\x52\xe1\x4f"
#ifndef tflite_EqualOptions_file_identifier
#define tflite_EqualOptions_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_EqualOptions_file_identifier */
#ifndef tflite_EqualOptions_identifier
#define tflite_EqualOptions_identifier flatbuffers_identifier
#endif
#define tflite_EqualOptions_type_hash ((flatbuffers_thash_t)0x49f543f5)
#define tflite_EqualOptions_type_identifier "\xf5\x43\xf5\x49"
#ifndef tflite_NotEqualOptions_file_identifier
#define tflite_NotEqualOptions_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_NotEqualOptions_file_identifier */
#ifndef tflite_NotEqualOptions_identifier
#define tflite_NotEqualOptions_identifier flatbuffers_identifier
#endif
#define tflite_NotEqualOptions_type_hash ((flatbuffers_thash_t)0x360a8ec6)
#define tflite_NotEqualOptions_type_identifier "\xc6\x8e\x0a\x36"
#ifndef tflite_ShapeOptions_file_identifier
#define tflite_ShapeOptions_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_ShapeOptions_file_identifier */
#ifndef tflite_ShapeOptions_identifier
#define tflite_ShapeOptions_identifier flatbuffers_identifier
#endif
#define tflite_ShapeOptions_type_hash ((flatbuffers_thash_t)0x95c904a6)
#define tflite_ShapeOptions_type_identifier "\xa6\x04\xc9\x95"
#ifndef tflite_RankOptions_file_identifier
#define tflite_RankOptions_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_RankOptions_file_identifier */
#ifndef tflite_RankOptions_identifier
#define tflite_RankOptions_identifier flatbuffers_identifier
#endif
#define tflite_RankOptions_type_hash ((flatbuffers_thash_t)0x67e429bd)
#define tflite_RankOptions_type_identifier "\xbd\x29\xe4\x67"
#ifndef tflite_PowOptions_file_identifier
#define tflite_PowOptions_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_PowOptions_file_identifier */
#ifndef tflite_PowOptions_identifier
#define tflite_PowOptions_identifier flatbuffers_identifier
#endif
#define tflite_PowOptions_type_hash ((flatbuffers_thash_t)0x28a066b7)
#define tflite_PowOptions_type_identifier "\xb7\x66\xa0\x28"
#ifndef tflite_FakeQuantOptions_file_identifier
#define tflite_FakeQuantOptions_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_FakeQuantOptions_file_identifier */
#ifndef tflite_FakeQuantOptions_identifier
#define tflite_FakeQuantOptions_identifier flatbuffers_identifier
#endif
#define tflite_FakeQuantOptions_type_hash ((flatbuffers_thash_t)0xa93b0459)
#define tflite_FakeQuantOptions_type_identifier "\x59\x04\x3b\xa9"
#ifndef tflite_PackOptions_file_identifier
#define tflite_PackOptions_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_PackOptions_file_identifier */
#ifndef tflite_PackOptions_identifier
#define tflite_PackOptions_identifier flatbuffers_identifier
#endif
#define tflite_PackOptions_type_hash ((flatbuffers_thash_t)0x3b68c64)
#define tflite_PackOptions_type_identifier "\x64\x8c\xb6\x03"
#ifndef tflite_LogicalOrOptions_file_identifier
#define tflite_LogicalOrOptions_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_LogicalOrOptions_file_identifier */
#ifndef tflite_LogicalOrOptions_identifier
#define tflite_LogicalOrOptions_identifier flatbuffers_identifier
#endif
#define tflite_LogicalOrOptions_type_hash ((flatbuffers_thash_t)0x9e2b807)
#define tflite_LogicalOrOptions_type_identifier "\x07\xb8\xe2\x09"
#ifndef tflite_OneHotOptions_file_identifier
#define tflite_OneHotOptions_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_OneHotOptions_file_identifier */
#ifndef tflite_OneHotOptions_identifier
#define tflite_OneHotOptions_identifier flatbuffers_identifier
#endif
#define tflite_OneHotOptions_type_hash ((flatbuffers_thash_t)0x68d968c2)
#define tflite_OneHotOptions_type_identifier "\xc2\x68\xd9\x68"
#ifndef tflite_AbsOptions_file_identifier
#define tflite_AbsOptions_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_AbsOptions_file_identifier */
#ifndef tflite_AbsOptions_identifier
#define tflite_AbsOptions_identifier flatbuffers_identifier
#endif
#define tflite_AbsOptions_type_hash ((flatbuffers_thash_t)0x32125b69)
#define tflite_AbsOptions_type_identifier "\x69\x5b\x12\x32"
#ifndef tflite_HardSwishOptions_file_identifier
#define tflite_HardSwishOptions_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_HardSwishOptions_file_identifier */
#ifndef tflite_HardSwishOptions_identifier
#define tflite_HardSwishOptions_identifier flatbuffers_identifier
#endif
#define tflite_HardSwishOptions_type_hash ((flatbuffers_thash_t)0x89348f02)
#define tflite_HardSwishOptions_type_identifier "\x02\x8f\x34\x89"
#ifndef tflite_LogicalAndOptions_file_identifier
#define tflite_LogicalAndOptions_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_LogicalAndOptions_file_identifier */
#ifndef tflite_LogicalAndOptions_identifier
#define tflite_LogicalAndOptions_identifier flatbuffers_identifier
#endif
#define tflite_LogicalAndOptions_type_hash ((flatbuffers_thash_t)0x12b87a23)
#define tflite_LogicalAndOptions_type_identifier "\x23\x7a\xb8\x12"
#ifndef tflite_LogicalNotOptions_file_identifier
#define tflite_LogicalNotOptions_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_LogicalNotOptions_file_identifier */
#ifndef tflite_LogicalNotOptions_identifier
#define tflite_LogicalNotOptions_identifier flatbuffers_identifier
#endif
#define tflite_LogicalNotOptions_type_hash ((flatbuffers_thash_t)0x87d7d10f)
#define tflite_LogicalNotOptions_type_identifier "\x0f\xd1\xd7\x87"
#ifndef tflite_UnpackOptions_file_identifier
#define tflite_UnpackOptions_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_UnpackOptions_file_identifier */
#ifndef tflite_UnpackOptions_identifier
#define tflite_UnpackOptions_identifier flatbuffers_identifier
#endif
#define tflite_UnpackOptions_type_hash ((flatbuffers_thash_t)0x7634b2c9)
#define tflite_UnpackOptions_type_identifier "\xc9\xb2\x34\x76"
#ifndef tflite_FloorDivOptions_file_identifier
#define tflite_FloorDivOptions_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_FloorDivOptions_file_identifier */
#ifndef tflite_FloorDivOptions_identifier
#define tflite_FloorDivOptions_identifier flatbuffers_identifier
#endif
#define tflite_FloorDivOptions_type_hash ((flatbuffers_thash_t)0x1d6e5c18)
#define tflite_FloorDivOptions_type_identifier "\x18\x5c\x6e\x1d"
#ifndef tflite_SquareOptions_file_identifier
#define tflite_SquareOptions_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_SquareOptions_file_identifier */
#ifndef tflite_SquareOptions_identifier
#define tflite_SquareOptions_identifier flatbuffers_identifier
#endif
#define tflite_SquareOptions_type_hash ((flatbuffers_thash_t)0xa96aa1e6)
#define tflite_SquareOptions_type_identifier "\xe6\xa1\x6a\xa9"
#ifndef tflite_ZerosLikeOptions_file_identifier
#define tflite_ZerosLikeOptions_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_ZerosLikeOptions_file_identifier */
#ifndef tflite_ZerosLikeOptions_identifier
#define tflite_ZerosLikeOptions_identifier flatbuffers_identifier
#endif
#define tflite_ZerosLikeOptions_type_hash ((flatbuffers_thash_t)0xde81403d)
#define tflite_ZerosLikeOptions_type_identifier "\x3d\x40\x81\xde"
#ifndef tflite_FillOptions_file_identifier
#define tflite_FillOptions_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_FillOptions_file_identifier */
#ifndef tflite_FillOptions_identifier
#define tflite_FillOptions_identifier flatbuffers_identifier
#endif
#define tflite_FillOptions_type_hash ((flatbuffers_thash_t)0x8fb14bb8)
#define tflite_FillOptions_type_identifier "\xb8\x4b\xb1\x8f"
#ifndef tflite_FloorModOptions_file_identifier
#define tflite_FloorModOptions_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_FloorModOptions_file_identifier */
#ifndef tflite_FloorModOptions_identifier
#define tflite_FloorModOptions_identifier flatbuffers_identifier
#endif
#define tflite_FloorModOptions_type_hash ((flatbuffers_thash_t)0xd9a30d99)
#define tflite_FloorModOptions_type_identifier "\x99\x0d\xa3\xd9"
#ifndef tflite_RangeOptions_file_identifier
#define tflite_RangeOptions_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_RangeOptions_file_identifier */
#ifndef tflite_RangeOptions_identifier
#define tflite_RangeOptions_identifier flatbuffers_identifier
#endif
#define tflite_RangeOptions_type_hash ((flatbuffers_thash_t)0xe742e33a)
#define tflite_RangeOptions_type_identifier "\x3a\xe3\x42\xe7"
#ifndef tflite_LeakyReluOptions_file_identifier
#define tflite_LeakyReluOptions_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_LeakyReluOptions_file_identifier */
#ifndef tflite_LeakyReluOptions_identifier
#define tflite_LeakyReluOptions_identifier flatbuffers_identifier
#endif
#define tflite_LeakyReluOptions_type_hash ((flatbuffers_thash_t)0x87634849)
#define tflite_LeakyReluOptions_type_identifier "\x49\x48\x63\x87"
#ifndef tflite_SquaredDifferenceOptions_file_identifier
#define tflite_SquaredDifferenceOptions_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_SquaredDifferenceOptions_file_identifier */
#ifndef tflite_SquaredDifferenceOptions_identifier
#define tflite_SquaredDifferenceOptions_identifier flatbuffers_identifier
#endif
#define tflite_SquaredDifferenceOptions_type_hash ((flatbuffers_thash_t)0x2ed5c64b)
#define tflite_SquaredDifferenceOptions_type_identifier "\x4b\xc6\xd5\x2e"
#ifndef tflite_MirrorPadOptions_file_identifier
#define tflite_MirrorPadOptions_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_MirrorPadOptions_file_identifier */
#ifndef tflite_MirrorPadOptions_identifier
#define tflite_MirrorPadOptions_identifier flatbuffers_identifier
#endif
#define tflite_MirrorPadOptions_type_hash ((flatbuffers_thash_t)0xb32e4fa9)
#define tflite_MirrorPadOptions_type_identifier "\xa9\x4f\x2e\xb3"
#ifndef tflite_UniqueOptions_file_identifier
#define tflite_UniqueOptions_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_UniqueOptions_file_identifier */
#ifndef tflite_UniqueOptions_identifier
#define tflite_UniqueOptions_identifier flatbuffers_identifier
#endif
#define tflite_UniqueOptions_type_hash ((flatbuffers_thash_t)0x23f9be52)
#define tflite_UniqueOptions_type_identifier "\x52\xbe\xf9\x23"
#ifndef tflite_ReverseV2Options_file_identifier
#define tflite_ReverseV2Options_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_ReverseV2Options_file_identifier */
#ifndef tflite_ReverseV2Options_identifier
#define tflite_ReverseV2Options_identifier flatbuffers_identifier
#endif
#define tflite_ReverseV2Options_type_hash ((flatbuffers_thash_t)0xdd26afdb)
#define tflite_ReverseV2Options_type_identifier "\xdb\xaf\x26\xdd"
#ifndef tflite_AddNOptions_file_identifier
#define tflite_AddNOptions_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_AddNOptions_file_identifier */
#ifndef tflite_AddNOptions_identifier
#define tflite_AddNOptions_identifier flatbuffers_identifier
#endif
#define tflite_AddNOptions_type_hash ((flatbuffers_thash_t)0x46992f92)
#define tflite_AddNOptions_type_identifier "\x92\x2f\x99\x46"
#ifndef tflite_GatherNdOptions_file_identifier
#define tflite_GatherNdOptions_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_GatherNdOptions_file_identifier */
#ifndef tflite_GatherNdOptions_identifier
#define tflite_GatherNdOptions_identifier flatbuffers_identifier
#endif
#define tflite_GatherNdOptions_type_hash ((flatbuffers_thash_t)0xaf82ba00)
#define tflite_GatherNdOptions_type_identifier "\x00\xba\x82\xaf"
#ifndef tflite_WhereOptions_file_identifier
#define tflite_WhereOptions_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_WhereOptions_file_identifier */
#ifndef tflite_WhereOptions_identifier
#define tflite_WhereOptions_identifier flatbuffers_identifier
#endif
#define tflite_WhereOptions_type_hash ((flatbuffers_thash_t)0xd8108f18)
#define tflite_WhereOptions_type_identifier "\x18\x8f\x10\xd8"
#ifndef tflite_ReverseSequenceOptions_file_identifier
#define tflite_ReverseSequenceOptions_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_ReverseSequenceOptions_file_identifier */
#ifndef tflite_ReverseSequenceOptions_identifier
#define tflite_ReverseSequenceOptions_identifier flatbuffers_identifier
#endif
#define tflite_ReverseSequenceOptions_type_hash ((flatbuffers_thash_t)0x5ea6934)
#define tflite_ReverseSequenceOptions_type_identifier "\x34\x69\xea\x05"
#ifndef tflite_MatrixDiagOptions_file_identifier
#define tflite_MatrixDiagOptions_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_MatrixDiagOptions_file_identifier */
#ifndef tflite_MatrixDiagOptions_identifier
#define tflite_MatrixDiagOptions_identifier flatbuffers_identifier
#endif
#define tflite_MatrixDiagOptions_type_hash ((flatbuffers_thash_t)0xaf8f0b5)
#define tflite_MatrixDiagOptions_type_identifier "\xb5\xf0\xf8\x0a"
#ifndef tflite_QuantizeOptions_file_identifier
#define tflite_QuantizeOptions_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_QuantizeOptions_file_identifier */
#ifndef tflite_QuantizeOptions_identifier
#define tflite_QuantizeOptions_identifier flatbuffers_identifier
#endif
#define tflite_QuantizeOptions_type_hash ((flatbuffers_thash_t)0x1862bd66)
#define tflite_QuantizeOptions_type_identifier "\x66\xbd\x62\x18"
#ifndef tflite_MatrixSetDiagOptions_file_identifier
#define tflite_MatrixSetDiagOptions_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_MatrixSetDiagOptions_file_identifier */
#ifndef tflite_MatrixSetDiagOptions_identifier
#define tflite_MatrixSetDiagOptions_identifier flatbuffers_identifier
#endif
#define tflite_MatrixSetDiagOptions_type_hash ((flatbuffers_thash_t)0x719bcba5)
#define tflite_MatrixSetDiagOptions_type_identifier "\xa5\xcb\x9b\x71"
#ifndef tflite_IfOptions_file_identifier
#define tflite_IfOptions_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_IfOptions_file_identifier */
#ifndef tflite_IfOptions_identifier
#define tflite_IfOptions_identifier flatbuffers_identifier
#endif
#define tflite_IfOptions_type_hash ((flatbuffers_thash_t)0x83841142)
#define tflite_IfOptions_type_identifier "\x42\x11\x84\x83"
#ifndef tflite_WhileOptions_file_identifier
#define tflite_WhileOptions_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_WhileOptions_file_identifier */
#ifndef tflite_WhileOptions_identifier
#define tflite_WhileOptions_identifier flatbuffers_identifier
#endif
#define tflite_WhileOptions_type_hash ((flatbuffers_thash_t)0xa589d6fe)
#define tflite_WhileOptions_type_identifier "\xfe\xd6\x89\xa5"
#ifndef tflite_NonMaxSuppressionV4Options_file_identifier
#define tflite_NonMaxSuppressionV4Options_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_NonMaxSuppressionV4Options_file_identifier */
#ifndef tflite_NonMaxSuppressionV4Options_identifier
#define tflite_NonMaxSuppressionV4Options_identifier flatbuffers_identifier
#endif
#define tflite_NonMaxSuppressionV4Options_type_hash ((flatbuffers_thash_t)0x36492665)
#define tflite_NonMaxSuppressionV4Options_type_identifier "\x65\x26\x49\x36"
#ifndef tflite_NonMaxSuppressionV5Options_file_identifier
#define tflite_NonMaxSuppressionV5Options_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_NonMaxSuppressionV5Options_file_identifier */
#ifndef tflite_NonMaxSuppressionV5Options_identifier
#define tflite_NonMaxSuppressionV5Options_identifier flatbuffers_identifier
#endif
#define tflite_NonMaxSuppressionV5Options_type_hash ((flatbuffers_thash_t)0x5318d53c)
#define tflite_NonMaxSuppressionV5Options_type_identifier "\x3c\xd5\x18\x53"
#ifndef tflite_ScatterNdOptions_file_identifier
#define tflite_ScatterNdOptions_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_ScatterNdOptions_file_identifier */
#ifndef tflite_ScatterNdOptions_identifier
#define tflite_ScatterNdOptions_identifier flatbuffers_identifier
#endif
#define tflite_ScatterNdOptions_type_hash ((flatbuffers_thash_t)0x3c0348e1)
#define tflite_ScatterNdOptions_type_identifier "\xe1\x48\x03\x3c"
#ifndef tflite_SelectV2Options_file_identifier
#define tflite_SelectV2Options_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_SelectV2Options_file_identifier */
#ifndef tflite_SelectV2Options_identifier
#define tflite_SelectV2Options_identifier flatbuffers_identifier
#endif
#define tflite_SelectV2Options_type_hash ((flatbuffers_thash_t)0xb1e4c59f)
#define tflite_SelectV2Options_type_identifier "\x9f\xc5\xe4\xb1"
#ifndef tflite_DensifyOptions_file_identifier
#define tflite_DensifyOptions_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_DensifyOptions_file_identifier */
#ifndef tflite_DensifyOptions_identifier
#define tflite_DensifyOptions_identifier flatbuffers_identifier
#endif
#define tflite_DensifyOptions_type_hash ((flatbuffers_thash_t)0xb560a76b)
#define tflite_DensifyOptions_type_identifier "\x6b\xa7\x60\xb5"
#ifndef tflite_SegmentSumOptions_file_identifier
#define tflite_SegmentSumOptions_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_SegmentSumOptions_file_identifier */
#ifndef tflite_SegmentSumOptions_identifier
#define tflite_SegmentSumOptions_identifier flatbuffers_identifier
#endif
#define tflite_SegmentSumOptions_type_hash ((flatbuffers_thash_t)0xf5bdc5ef)
#define tflite_SegmentSumOptions_type_identifier "\xef\xc5\xbd\xf5"
#ifndef tflite_OperatorCode_file_identifier
#define tflite_OperatorCode_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_OperatorCode_file_identifier */
#ifndef tflite_OperatorCode_identifier
#define tflite_OperatorCode_identifier flatbuffers_identifier
#endif
#define tflite_OperatorCode_type_hash ((flatbuffers_thash_t)0x85382f1e)
#define tflite_OperatorCode_type_identifier "\x1e\x2f\x38\x85"
#ifndef tflite_Operator_file_identifier
#define tflite_Operator_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_Operator_file_identifier */
#ifndef tflite_Operator_identifier
#define tflite_Operator_identifier flatbuffers_identifier
#endif
#define tflite_Operator_type_hash ((flatbuffers_thash_t)0xc6a9fe6f)
#define tflite_Operator_type_identifier "\x6f\xfe\xa9\xc6"
#ifndef tflite_SubGraph_file_identifier
#define tflite_SubGraph_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_SubGraph_file_identifier */
#ifndef tflite_SubGraph_identifier
#define tflite_SubGraph_identifier flatbuffers_identifier
#endif
#define tflite_SubGraph_type_hash ((flatbuffers_thash_t)0xfe56cb51)
#define tflite_SubGraph_type_identifier "\x51\xcb\x56\xfe"
#ifndef tflite_Buffer_file_identifier
#define tflite_Buffer_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_Buffer_file_identifier */
#ifndef tflite_Buffer_identifier
#define tflite_Buffer_identifier flatbuffers_identifier
#endif
#define tflite_Buffer_type_hash ((flatbuffers_thash_t)0xfc217c85)
#define tflite_Buffer_type_identifier "\x85\x7c\x21\xfc"
#ifndef tflite_Metadata_file_identifier
#define tflite_Metadata_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_Metadata_file_identifier */
#ifndef tflite_Metadata_identifier
#define tflite_Metadata_identifier flatbuffers_identifier
#endif
#define tflite_Metadata_type_hash ((flatbuffers_thash_t)0xedc67452)
#define tflite_Metadata_type_identifier "\x52\x74\xc6\xed"
#ifndef tflite_Model_file_identifier
#define tflite_Model_file_identifier flatbuffers_identifier
#endif
/* deprecated, use tflite_Model_file_identifier */
#ifndef tflite_Model_identifier
#define tflite_Model_identifier flatbuffers_identifier
#endif
#define tflite_Model_type_hash ((flatbuffers_thash_t)0x9dcb872c)
#define tflite_Model_type_identifier "\x2c\x87\xcb\x9d"

typedef int8_t tflite_TensorType_enum_t;
__flatbuffers_define_integer_type(tflite_TensorType, tflite_TensorType_enum_t, 8)
#define tflite_TensorType_FLOAT32 ((tflite_TensorType_enum_t)INT8_C(0))
#define tflite_TensorType_FLOAT16 ((tflite_TensorType_enum_t)INT8_C(1))
#define tflite_TensorType_INT32 ((tflite_TensorType_enum_t)INT8_C(2))
#define tflite_TensorType_UINT8 ((tflite_TensorType_enum_t)INT8_C(3))
#define tflite_TensorType_INT64 ((tflite_TensorType_enum_t)INT8_C(4))
#define tflite_TensorType_STRING ((tflite_TensorType_enum_t)INT8_C(5))
#define tflite_TensorType_BOOL ((tflite_TensorType_enum_t)INT8_C(6))
#define tflite_TensorType_INT16 ((tflite_TensorType_enum_t)INT8_C(7))
#define tflite_TensorType_COMPLEX64 ((tflite_TensorType_enum_t)INT8_C(8))
#define tflite_TensorType_INT8 ((tflite_TensorType_enum_t)INT8_C(9))

static inline const char *tflite_TensorType_name(tflite_TensorType_enum_t value)
{
    switch (value) {
    case tflite_TensorType_FLOAT32: return "FLOAT32";
    case tflite_TensorType_FLOAT16: return "FLOAT16";
    case tflite_TensorType_INT32: return "INT32";
    case tflite_TensorType_UINT8: return "UINT8";
    case tflite_TensorType_INT64: return "INT64";
    case tflite_TensorType_STRING: return "STRING";
    case tflite_TensorType_BOOL: return "BOOL";
    case tflite_TensorType_INT16: return "INT16";
    case tflite_TensorType_COMPLEX64: return "COMPLEX64";
    case tflite_TensorType_INT8: return "INT8";
    default: return "";
    }
}

static inline int tflite_TensorType_is_known_value(tflite_TensorType_enum_t value)
{
    switch (value) {
    case tflite_TensorType_FLOAT32: return 1;
    case tflite_TensorType_FLOAT16: return 1;
    case tflite_TensorType_INT32: return 1;
    case tflite_TensorType_UINT8: return 1;
    case tflite_TensorType_INT64: return 1;
    case tflite_TensorType_STRING: return 1;
    case tflite_TensorType_BOOL: return 1;
    case tflite_TensorType_INT16: return 1;
    case tflite_TensorType_COMPLEX64: return 1;
    case tflite_TensorType_INT8: return 1;
    default: return 0;
    }
}

typedef int8_t tflite_DimensionType_enum_t;
__flatbuffers_define_integer_type(tflite_DimensionType, tflite_DimensionType_enum_t, 8)
#define tflite_DimensionType_DENSE ((tflite_DimensionType_enum_t)INT8_C(0))
#define tflite_DimensionType_SPARSE_CSR ((tflite_DimensionType_enum_t)INT8_C(1))

static inline const char *tflite_DimensionType_name(tflite_DimensionType_enum_t value)
{
    switch (value) {
    case tflite_DimensionType_DENSE: return "DENSE";
    case tflite_DimensionType_SPARSE_CSR: return "SPARSE_CSR";
    default: return "";
    }
}

static inline int tflite_DimensionType_is_known_value(tflite_DimensionType_enum_t value)
{
    switch (value) {
    case tflite_DimensionType_DENSE: return 1;
    case tflite_DimensionType_SPARSE_CSR: return 1;
    default: return 0;
    }
}

typedef int8_t tflite_BuiltinOperator_enum_t;
__flatbuffers_define_integer_type(tflite_BuiltinOperator, tflite_BuiltinOperator_enum_t, 8)
#define tflite_BuiltinOperator_ADD ((tflite_BuiltinOperator_enum_t)INT8_C(0))
#define tflite_BuiltinOperator_AVERAGE_POOL_2D ((tflite_BuiltinOperator_enum_t)INT8_C(1))
#define tflite_BuiltinOperator_CONCATENATION ((tflite_BuiltinOperator_enum_t)INT8_C(2))
#define tflite_BuiltinOperator_CONV_2D ((tflite_BuiltinOperator_enum_t)INT8_C(3))
#define tflite_BuiltinOperator_DEPTHWISE_CONV_2D ((tflite_BuiltinOperator_enum_t)INT8_C(4))
#define tflite_BuiltinOperator_DEPTH_TO_SPACE ((tflite_BuiltinOperator_enum_t)INT8_C(5))
#define tflite_BuiltinOperator_DEQUANTIZE ((tflite_BuiltinOperator_enum_t)INT8_C(6))
#define tflite_BuiltinOperator_EMBEDDING_LOOKUP ((tflite_BuiltinOperator_enum_t)INT8_C(7))
#define tflite_BuiltinOperator_FLOOR ((tflite_BuiltinOperator_enum_t)INT8_C(8))
#define tflite_BuiltinOperator_FULLY_CONNECTED ((tflite_BuiltinOperator_enum_t)INT8_C(9))
#define tflite_BuiltinOperator_HASHTABLE_LOOKUP ((tflite_BuiltinOperator_enum_t)INT8_C(10))
#define tflite_BuiltinOperator_L2_NORMALIZATION ((tflite_BuiltinOperator_enum_t)INT8_C(11))
#define tflite_BuiltinOperator_L2_POOL_2D ((tflite_BuiltinOperator_enum_t)INT8_C(12))
#define tflite_BuiltinOperator_LOCAL_RESPONSE_NORMALIZATION ((tflite_BuiltinOperator_enum_t)INT8_C(13))
#define tflite_BuiltinOperator_LOGISTIC ((tflite_BuiltinOperator_enum_t)INT8_C(14))
#define tflite_BuiltinOperator_LSH_PROJECTION ((tflite_BuiltinOperator_enum_t)INT8_C(15))
#define tflite_BuiltinOperator_LSTM ((tflite_BuiltinOperator_enum_t)INT8_C(16))
#define tflite_BuiltinOperator_MAX_POOL_2D ((tflite_BuiltinOperator_enum_t)INT8_C(17))
#define tflite_BuiltinOperator_MUL ((tflite_BuiltinOperator_enum_t)INT8_C(18))
#define tflite_BuiltinOperator_RELU ((tflite_BuiltinOperator_enum_t)INT8_C(19))
#define tflite_BuiltinOperator_RELU_N1_TO_1 ((tflite_BuiltinOperator_enum_t)INT8_C(20))
#define tflite_BuiltinOperator_RELU6 ((tflite_BuiltinOperator_enum_t)INT8_C(21))
#define tflite_BuiltinOperator_RESHAPE ((tflite_BuiltinOperator_enum_t)INT8_C(22))
#define tflite_BuiltinOperator_RESIZE_BILINEAR ((tflite_BuiltinOperator_enum_t)INT8_C(23))
#define tflite_BuiltinOperator_RNN ((tflite_BuiltinOperator_enum_t)INT8_C(24))
#define tflite_BuiltinOperator_SOFTMAX ((tflite_BuiltinOperator_enum_t)INT8_C(25))
#define tflite_BuiltinOperator_SPACE_TO_DEPTH ((tflite_BuiltinOperator_enum_t)INT8_C(26))
#define tflite_BuiltinOperator_SVDF ((tflite_BuiltinOperator_enum_t)INT8_C(27))
#define tflite_BuiltinOperator_TANH ((tflite_BuiltinOperator_enum_t)INT8_C(28))
#define tflite_BuiltinOperator_CONCAT_EMBEDDINGS ((tflite_BuiltinOperator_enum_t)INT8_C(29))
#define tflite_BuiltinOperator_SKIP_GRAM ((tflite_BuiltinOperator_enum_t)INT8_C(30))
#define tflite_BuiltinOperator_CALL ((tflite_BuiltinOperator_enum_t)INT8_C(31))
#define tflite_BuiltinOperator_CUSTOM ((tflite_BuiltinOperator_enum_t)INT8_C(32))
#define tflite_BuiltinOperator_EMBEDDING_LOOKUP_SPARSE ((tflite_BuiltinOperator_enum_t)INT8_C(33))
#define tflite_BuiltinOperator_PAD ((tflite_BuiltinOperator_enum_t)INT8_C(34))
#define tflite_BuiltinOperator_UNIDIRECTIONAL_SEQUENCE_RNN ((tflite_BuiltinOperator_enum_t)INT8_C(35))
#define tflite_BuiltinOperator_GATHER ((tflite_BuiltinOperator_enum_t)INT8_C(36))
#define tflite_BuiltinOperator_BATCH_TO_SPACE_ND ((tflite_BuiltinOperator_enum_t)INT8_C(37))
#define tflite_BuiltinOperator_SPACE_TO_BATCH_ND ((tflite_BuiltinOperator_enum_t)INT8_C(38))
#define tflite_BuiltinOperator_TRANSPOSE ((tflite_BuiltinOperator_enum_t)INT8_C(39))
#define tflite_BuiltinOperator_MEAN ((tflite_BuiltinOperator_enum_t)INT8_C(40))
#define tflite_BuiltinOperator_SUB ((tflite_BuiltinOperator_enum_t)INT8_C(41))
#define tflite_BuiltinOperator_DIV ((tflite_BuiltinOperator_enum_t)INT8_C(42))
#define tflite_BuiltinOperator_SQUEEZE ((tflite_BuiltinOperator_enum_t)INT8_C(43))
#define tflite_BuiltinOperator_UNIDIRECTIONAL_SEQUENCE_LSTM ((tflite_BuiltinOperator_enum_t)INT8_C(44))
#define tflite_BuiltinOperator_STRIDED_SLICE ((tflite_BuiltinOperator_enum_t)INT8_C(45))
#define tflite_BuiltinOperator_BIDIRECTIONAL_SEQUENCE_RNN ((tflite_BuiltinOperator_enum_t)INT8_C(46))
#define tflite_BuiltinOperator_EXP ((tflite_BuiltinOperator_enum_t)INT8_C(47))
#define tflite_BuiltinOperator_TOPK_V2 ((tflite_BuiltinOperator_enum_t)INT8_C(48))
#define tflite_BuiltinOperator_SPLIT ((tflite_BuiltinOperator_enum_t)INT8_C(49))
#define tflite_BuiltinOperator_LOG_SOFTMAX ((tflite_BuiltinOperator_enum_t)INT8_C(50))
#define tflite_BuiltinOperator_DELEGATE ((tflite_BuiltinOperator_enum_t)INT8_C(51))
#define tflite_BuiltinOperator_BIDIRECTIONAL_SEQUENCE_LSTM ((tflite_BuiltinOperator_enum_t)INT8_C(52))
#define tflite_BuiltinOperator_CAST ((tflite_BuiltinOperator_enum_t)INT8_C(53))
#define tflite_BuiltinOperator_PRELU ((tflite_BuiltinOperator_enum_t)INT8_C(54))
#define tflite_BuiltinOperator_MAXIMUM ((tflite_BuiltinOperator_enum_t)INT8_C(55))
#define tflite_BuiltinOperator_ARG_MAX ((tflite_BuiltinOperator_enum_t)INT8_C(56))
#define tflite_BuiltinOperator_MINIMUM ((tflite_BuiltinOperator_enum_t)INT8_C(57))
#define tflite_BuiltinOperator_LESS ((tflite_BuiltinOperator_enum_t)INT8_C(58))
#define tflite_BuiltinOperator_NEG ((tflite_BuiltinOperator_enum_t)INT8_C(59))
#define tflite_BuiltinOperator_PADV2 ((tflite_BuiltinOperator_enum_t)INT8_C(60))
#define tflite_BuiltinOperator_GREATER ((tflite_BuiltinOperator_enum_t)INT8_C(61))
#define tflite_BuiltinOperator_GREATER_EQUAL ((tflite_BuiltinOperator_enum_t)INT8_C(62))
#define tflite_BuiltinOperator_LESS_EQUAL ((tflite_BuiltinOperator_enum_t)INT8_C(63))
#define tflite_BuiltinOperator_SELECT ((tflite_BuiltinOperator_enum_t)INT8_C(64))
#define tflite_BuiltinOperator_SLICE ((tflite_BuiltinOperator_enum_t)INT8_C(65))
#define tflite_BuiltinOperator_SIN ((tflite_BuiltinOperator_enum_t)INT8_C(66))
#define tflite_BuiltinOperator_TRANSPOSE_CONV ((tflite_BuiltinOperator_enum_t)INT8_C(67))
#define tflite_BuiltinOperator_SPARSE_TO_DENSE ((tflite_BuiltinOperator_enum_t)INT8_C(68))
#define tflite_BuiltinOperator_TILE ((tflite_BuiltinOperator_enum_t)INT8_C(69))
#define tflite_BuiltinOperator_EXPAND_DIMS ((tflite_BuiltinOperator_enum_t)INT8_C(70))
#define tflite_BuiltinOperator_EQUAL ((tflite_BuiltinOperator_enum_t)INT8_C(71))
#define tflite_BuiltinOperator_NOT_EQUAL ((tflite_BuiltinOperator_enum_t)INT8_C(72))
#define tflite_BuiltinOperator_LOG ((tflite_BuiltinOperator_enum_t)INT8_C(73))
#define tflite_BuiltinOperator_SUM ((tflite_BuiltinOperator_enum_t)INT8_C(74))
#define tflite_BuiltinOperator_SQRT ((tflite_BuiltinOperator_enum_t)INT8_C(75))
#define tflite_BuiltinOperator_RSQRT ((tflite_BuiltinOperator_enum_t)INT8_C(76))
#define tflite_BuiltinOperator_SHAPE ((tflite_BuiltinOperator_enum_t)INT8_C(77))
#define tflite_BuiltinOperator_POW ((tflite_BuiltinOperator_enum_t)INT8_C(78))
#define tflite_BuiltinOperator_ARG_MIN ((tflite_BuiltinOperator_enum_t)INT8_C(79))
#define tflite_BuiltinOperator_FAKE_QUANT ((tflite_BuiltinOperator_enum_t)INT8_C(80))
#define tflite_BuiltinOperator_REDUCE_PROD ((tflite_BuiltinOperator_enum_t)INT8_C(81))
#define tflite_BuiltinOperator_REDUCE_MAX ((tflite_BuiltinOperator_enum_t)INT8_C(82))
#define tflite_BuiltinOperator_PACK ((tflite_BuiltinOperator_enum_t)INT8_C(83))
#define tflite_BuiltinOperator_LOGICAL_OR ((tflite_BuiltinOperator_enum_t)INT8_C(84))
#define tflite_BuiltinOperator_ONE_HOT ((tflite_BuiltinOperator_enum_t)INT8_C(85))
#define tflite_BuiltinOperator_LOGICAL_AND ((tflite_BuiltinOperator_enum_t)INT8_C(86))
#define tflite_BuiltinOperator_LOGICAL_NOT ((tflite_BuiltinOperator_enum_t)INT8_C(87))
#define tflite_BuiltinOperator_UNPACK ((tflite_BuiltinOperator_enum_t)INT8_C(88))
#define tflite_BuiltinOperator_REDUCE_MIN ((tflite_BuiltinOperator_enum_t)INT8_C(89))
#define tflite_BuiltinOperator_FLOOR_DIV ((tflite_BuiltinOperator_enum_t)INT8_C(90))
#define tflite_BuiltinOperator_REDUCE_ANY ((tflite_BuiltinOperator_enum_t)INT8_C(91))
#define tflite_BuiltinOperator_SQUARE ((tflite_BuiltinOperator_enum_t)INT8_C(92))
#define tflite_BuiltinOperator_ZEROS_LIKE ((tflite_BuiltinOperator_enum_t)INT8_C(93))
#define tflite_BuiltinOperator_FILL ((tflite_BuiltinOperator_enum_t)INT8_C(94))
#define tflite_BuiltinOperator_FLOOR_MOD ((tflite_BuiltinOperator_enum_t)INT8_C(95))
#define tflite_BuiltinOperator_RANGE ((tflite_BuiltinOperator_enum_t)INT8_C(96))
#define tflite_BuiltinOperator_RESIZE_NEAREST_NEIGHBOR ((tflite_BuiltinOperator_enum_t)INT8_C(97))
#define tflite_BuiltinOperator_LEAKY_RELU ((tflite_BuiltinOperator_enum_t)INT8_C(98))
#define tflite_BuiltinOperator_SQUARED_DIFFERENCE ((tflite_BuiltinOperator_enum_t)INT8_C(99))
#define tflite_BuiltinOperator_MIRROR_PAD ((tflite_BuiltinOperator_enum_t)INT8_C(100))
#define tflite_BuiltinOperator_ABS ((tflite_BuiltinOperator_enum_t)INT8_C(101))
#define tflite_BuiltinOperator_SPLIT_V ((tflite_BuiltinOperator_enum_t)INT8_C(102))
#define tflite_BuiltinOperator_UNIQUE ((tflite_BuiltinOperator_enum_t)INT8_C(103))
#define tflite_BuiltinOperator_CEIL ((tflite_BuiltinOperator_enum_t)INT8_C(104))
#define tflite_BuiltinOperator_REVERSE_V2 ((tflite_BuiltinOperator_enum_t)INT8_C(105))
#define tflite_BuiltinOperator_ADD_N ((tflite_BuiltinOperator_enum_t)INT8_C(106))
#define tflite_BuiltinOperator_GATHER_ND ((tflite_BuiltinOperator_enum_t)INT8_C(107))
#define tflite_BuiltinOperator_COS ((tflite_BuiltinOperator_enum_t)INT8_C(108))
#define tflite_BuiltinOperator_WHERE ((tflite_BuiltinOperator_enum_t)INT8_C(109))
#define tflite_BuiltinOperator_RANK ((tflite_BuiltinOperator_enum_t)INT8_C(110))
#define tflite_BuiltinOperator_ELU ((tflite_BuiltinOperator_enum_t)INT8_C(111))
#define tflite_BuiltinOperator_REVERSE_SEQUENCE ((tflite_BuiltinOperator_enum_t)INT8_C(112))
#define tflite_BuiltinOperator_MATRIX_DIAG ((tflite_BuiltinOperator_enum_t)INT8_C(113))
#define tflite_BuiltinOperator_QUANTIZE ((tflite_BuiltinOperator_enum_t)INT8_C(114))
#define tflite_BuiltinOperator_MATRIX_SET_DIAG ((tflite_BuiltinOperator_enum_t)INT8_C(115))
#define tflite_BuiltinOperator_ROUND ((tflite_BuiltinOperator_enum_t)INT8_C(116))
#define tflite_BuiltinOperator_HARD_SWISH ((tflite_BuiltinOperator_enum_t)INT8_C(117))
#define tflite_BuiltinOperator_IF ((tflite_BuiltinOperator_enum_t)INT8_C(118))
#define tflite_BuiltinOperator_WHILE ((tflite_BuiltinOperator_enum_t)INT8_C(119))
#define tflite_BuiltinOperator_NON_MAX_SUPPRESSION_V4 ((tflite_BuiltinOperator_enum_t)INT8_C(120))
#define tflite_BuiltinOperator_NON_MAX_SUPPRESSION_V5 ((tflite_BuiltinOperator_enum_t)INT8_C(121))
#define tflite_BuiltinOperator_SCATTER_ND ((tflite_BuiltinOperator_enum_t)INT8_C(122))
#define tflite_BuiltinOperator_SELECT_V2 ((tflite_BuiltinOperator_enum_t)INT8_C(123))
#define tflite_BuiltinOperator_DENSIFY ((tflite_BuiltinOperator_enum_t)INT8_C(124))
#define tflite_BuiltinOperator_SEGMENT_SUM ((tflite_BuiltinOperator_enum_t)INT8_C(125))

static inline const char *tflite_BuiltinOperator_name(tflite_BuiltinOperator_enum_t value)
{
    switch (value) {
    case tflite_BuiltinOperator_ADD: return "ADD";
    case tflite_BuiltinOperator_AVERAGE_POOL_2D: return "AVERAGE_POOL_2D";
    case tflite_BuiltinOperator_CONCATENATION: return "CONCATENATION";
    case tflite_BuiltinOperator_CONV_2D: return "CONV_2D";
    case tflite_BuiltinOperator_DEPTHWISE_CONV_2D: return "DEPTHWISE_CONV_2D";
    case tflite_BuiltinOperator_DEPTH_TO_SPACE: return "DEPTH_TO_SPACE";
    case tflite_BuiltinOperator_DEQUANTIZE: return "DEQUANTIZE";
    case tflite_BuiltinOperator_EMBEDDING_LOOKUP: return "EMBEDDING_LOOKUP";
    case tflite_BuiltinOperator_FLOOR: return "FLOOR";
    case tflite_BuiltinOperator_FULLY_CONNECTED: return "FULLY_CONNECTED";
    case tflite_BuiltinOperator_HASHTABLE_LOOKUP: return "HASHTABLE_LOOKUP";
    case tflite_BuiltinOperator_L2_NORMALIZATION: return "L2_NORMALIZATION";
    case tflite_BuiltinOperator_L2_POOL_2D: return "L2_POOL_2D";
    case tflite_BuiltinOperator_LOCAL_RESPONSE_NORMALIZATION: return "LOCAL_RESPONSE_NORMALIZATION";
    case tflite_BuiltinOperator_LOGISTIC: return "LOGISTIC";
    case tflite_BuiltinOperator_LSH_PROJECTION: return "LSH_PROJECTION";
    case tflite_BuiltinOperator_LSTM: return "LSTM";
    case tflite_BuiltinOperator_MAX_POOL_2D: return "MAX_POOL_2D";
    case tflite_BuiltinOperator_MUL: return "MUL";
    case tflite_BuiltinOperator_RELU: return "RELU";
    case tflite_BuiltinOperator_RELU_N1_TO_1: return "RELU_N1_TO_1";
    case tflite_BuiltinOperator_RELU6: return "RELU6";
    case tflite_BuiltinOperator_RESHAPE: return "RESHAPE";
    case tflite_BuiltinOperator_RESIZE_BILINEAR: return "RESIZE_BILINEAR";
    case tflite_BuiltinOperator_RNN: return "RNN";
    case tflite_BuiltinOperator_SOFTMAX: return "SOFTMAX";
    case tflite_BuiltinOperator_SPACE_TO_DEPTH: return "SPACE_TO_DEPTH";
    case tflite_BuiltinOperator_SVDF: return "SVDF";
    case tflite_BuiltinOperator_TANH: return "TANH";
    case tflite_BuiltinOperator_CONCAT_EMBEDDINGS: return "CONCAT_EMBEDDINGS";
    case tflite_BuiltinOperator_SKIP_GRAM: return "SKIP_GRAM";
    case tflite_BuiltinOperator_CALL: return "CALL";
    case tflite_BuiltinOperator_CUSTOM: return "CUSTOM";
    case tflite_BuiltinOperator_EMBEDDING_LOOKUP_SPARSE: return "EMBEDDING_LOOKUP_SPARSE";
    case tflite_BuiltinOperator_PAD: return "PAD";
    case tflite_BuiltinOperator_UNIDIRECTIONAL_SEQUENCE_RNN: return "UNIDIRECTIONAL_SEQUENCE_RNN";
    case tflite_BuiltinOperator_GATHER: return "GATHER";
    case tflite_BuiltinOperator_BATCH_TO_SPACE_ND: return "BATCH_TO_SPACE_ND";
    case tflite_BuiltinOperator_SPACE_TO_BATCH_ND: return "SPACE_TO_BATCH_ND";
    case tflite_BuiltinOperator_TRANSPOSE: return "TRANSPOSE";
    case tflite_BuiltinOperator_MEAN: return "MEAN";
    case tflite_BuiltinOperator_SUB: return "SUB";
    case tflite_BuiltinOperator_DIV: return "DIV";
    case tflite_BuiltinOperator_SQUEEZE: return "SQUEEZE";
    case tflite_BuiltinOperator_UNIDIRECTIONAL_SEQUENCE_LSTM: return "UNIDIRECTIONAL_SEQUENCE_LSTM";
    case tflite_BuiltinOperator_STRIDED_SLICE: return "STRIDED_SLICE";
    case tflite_BuiltinOperator_BIDIRECTIONAL_SEQUENCE_RNN: return "BIDIRECTIONAL_SEQUENCE_RNN";
    case tflite_BuiltinOperator_EXP: return "EXP";
    case tflite_BuiltinOperator_TOPK_V2: return "TOPK_V2";
    case tflite_BuiltinOperator_SPLIT: return "SPLIT";
    case tflite_BuiltinOperator_LOG_SOFTMAX: return "LOG_SOFTMAX";
    case tflite_BuiltinOperator_DELEGATE: return "DELEGATE";
    case tflite_BuiltinOperator_BIDIRECTIONAL_SEQUENCE_LSTM: return "BIDIRECTIONAL_SEQUENCE_LSTM";
    case tflite_BuiltinOperator_CAST: return "CAST";
    case tflite_BuiltinOperator_PRELU: return "PRELU";
    case tflite_BuiltinOperator_MAXIMUM: return "MAXIMUM";
    case tflite_BuiltinOperator_ARG_MAX: return "ARG_MAX";
    case tflite_BuiltinOperator_MINIMUM: return "MINIMUM";
    case tflite_BuiltinOperator_LESS: return "LESS";
    case tflite_BuiltinOperator_NEG: return "NEG";
    case tflite_BuiltinOperator_PADV2: return "PADV2";
    case tflite_BuiltinOperator_GREATER: return "GREATER";
    case tflite_BuiltinOperator_GREATER_EQUAL: return "GREATER_EQUAL";
    case tflite_BuiltinOperator_LESS_EQUAL: return "LESS_EQUAL";
    case tflite_BuiltinOperator_SELECT: return "SELECT";
    case tflite_BuiltinOperator_SLICE: return "SLICE";
    case tflite_BuiltinOperator_SIN: return "SIN";
    case tflite_BuiltinOperator_TRANSPOSE_CONV: return "TRANSPOSE_CONV";
    case tflite_BuiltinOperator_SPARSE_TO_DENSE: return "SPARSE_TO_DENSE";
    case tflite_BuiltinOperator_TILE: return "TILE";
    case tflite_BuiltinOperator_EXPAND_DIMS: return "EXPAND_DIMS";
    case tflite_BuiltinOperator_EQUAL: return "EQUAL";
    case tflite_BuiltinOperator_NOT_EQUAL: return "NOT_EQUAL";
    case tflite_BuiltinOperator_LOG: return "LOG";
    case tflite_BuiltinOperator_SUM: return "SUM";
    case tflite_BuiltinOperator_SQRT: return "SQRT";
    case tflite_BuiltinOperator_RSQRT: return "RSQRT";
    case tflite_BuiltinOperator_SHAPE: return "SHAPE";
    case tflite_BuiltinOperator_POW: return "POW";
    case tflite_BuiltinOperator_ARG_MIN: return "ARG_MIN";
    case tflite_BuiltinOperator_FAKE_QUANT: return "FAKE_QUANT";
    case tflite_BuiltinOperator_REDUCE_PROD: return "REDUCE_PROD";
    case tflite_BuiltinOperator_REDUCE_MAX: return "REDUCE_MAX";
    case tflite_BuiltinOperator_PACK: return "PACK";
    case tflite_BuiltinOperator_LOGICAL_OR: return "LOGICAL_OR";
    case tflite_BuiltinOperator_ONE_HOT: return "ONE_HOT";
    case tflite_BuiltinOperator_LOGICAL_AND: return "LOGICAL_AND";
    case tflite_BuiltinOperator_LOGICAL_NOT: return "LOGICAL_NOT";
    case tflite_BuiltinOperator_UNPACK: return "UNPACK";
    case tflite_BuiltinOperator_REDUCE_MIN: return "REDUCE_MIN";
    case tflite_BuiltinOperator_FLOOR_DIV: return "FLOOR_DIV";
    case tflite_BuiltinOperator_REDUCE_ANY: return "REDUCE_ANY";
    case tflite_BuiltinOperator_SQUARE: return "SQUARE";
    case tflite_BuiltinOperator_ZEROS_LIKE: return "ZEROS_LIKE";
    case tflite_BuiltinOperator_FILL: return "FILL";
    case tflite_BuiltinOperator_FLOOR_MOD: return "FLOOR_MOD";
    case tflite_BuiltinOperator_RANGE: return "RANGE";
    case tflite_BuiltinOperator_RESIZE_NEAREST_NEIGHBOR: return "RESIZE_NEAREST_NEIGHBOR";
    case tflite_BuiltinOperator_LEAKY_RELU: return "LEAKY_RELU";
    case tflite_BuiltinOperator_SQUARED_DIFFERENCE: return "SQUARED_DIFFERENCE";
    case tflite_BuiltinOperator_MIRROR_PAD: return "MIRROR_PAD";
    case tflite_BuiltinOperator_ABS: return "ABS";
    case tflite_BuiltinOperator_SPLIT_V: return "SPLIT_V";
    case tflite_BuiltinOperator_UNIQUE: return "UNIQUE";
    case tflite_BuiltinOperator_CEIL: return "CEIL";
    case tflite_BuiltinOperator_REVERSE_V2: return "REVERSE_V2";
    case tflite_BuiltinOperator_ADD_N: return "ADD_N";
    case tflite_BuiltinOperator_GATHER_ND: return "GATHER_ND";
    case tflite_BuiltinOperator_COS: return "COS";
    case tflite_BuiltinOperator_WHERE: return "WHERE";
    case tflite_BuiltinOperator_RANK: return "RANK";
    case tflite_BuiltinOperator_ELU: return "ELU";
    case tflite_BuiltinOperator_REVERSE_SEQUENCE: return "REVERSE_SEQUENCE";
    case tflite_BuiltinOperator_MATRIX_DIAG: return "MATRIX_DIAG";
    case tflite_BuiltinOperator_QUANTIZE: return "QUANTIZE";
    case tflite_BuiltinOperator_MATRIX_SET_DIAG: return "MATRIX_SET_DIAG";
    case tflite_BuiltinOperator_ROUND: return "ROUND";
    case tflite_BuiltinOperator_HARD_SWISH: return "HARD_SWISH";
    case tflite_BuiltinOperator_IF: return "IF";
    case tflite_BuiltinOperator_WHILE: return "WHILE";
    case tflite_BuiltinOperator_NON_MAX_SUPPRESSION_V4: return "NON_MAX_SUPPRESSION_V4";
    case tflite_BuiltinOperator_NON_MAX_SUPPRESSION_V5: return "NON_MAX_SUPPRESSION_V5";
    case tflite_BuiltinOperator_SCATTER_ND: return "SCATTER_ND";
    case tflite_BuiltinOperator_SELECT_V2: return "SELECT_V2";
    case tflite_BuiltinOperator_DENSIFY: return "DENSIFY";
    case tflite_BuiltinOperator_SEGMENT_SUM: return "SEGMENT_SUM";
    default: return "";
    }
}

static inline int tflite_BuiltinOperator_is_known_value(tflite_BuiltinOperator_enum_t value)
{
    switch (value) {
    case tflite_BuiltinOperator_ADD: return 1;
    case tflite_BuiltinOperator_AVERAGE_POOL_2D: return 1;
    case tflite_BuiltinOperator_CONCATENATION: return 1;
    case tflite_BuiltinOperator_CONV_2D: return 1;
    case tflite_BuiltinOperator_DEPTHWISE_CONV_2D: return 1;
    case tflite_BuiltinOperator_DEPTH_TO_SPACE: return 1;
    case tflite_BuiltinOperator_DEQUANTIZE: return 1;
    case tflite_BuiltinOperator_EMBEDDING_LOOKUP: return 1;
    case tflite_BuiltinOperator_FLOOR: return 1;
    case tflite_BuiltinOperator_FULLY_CONNECTED: return 1;
    case tflite_BuiltinOperator_HASHTABLE_LOOKUP: return 1;
    case tflite_BuiltinOperator_L2_NORMALIZATION: return 1;
    case tflite_BuiltinOperator_L2_POOL_2D: return 1;
    case tflite_BuiltinOperator_LOCAL_RESPONSE_NORMALIZATION: return 1;
    case tflite_BuiltinOperator_LOGISTIC: return 1;
    case tflite_BuiltinOperator_LSH_PROJECTION: return 1;
    case tflite_BuiltinOperator_LSTM: return 1;
    case tflite_BuiltinOperator_MAX_POOL_2D: return 1;
    case tflite_BuiltinOperator_MUL: return 1;
    case tflite_BuiltinOperator_RELU: return 1;
    case tflite_BuiltinOperator_RELU_N1_TO_1: return 1;
    case tflite_BuiltinOperator_RELU6: return 1;
    case tflite_BuiltinOperator_RESHAPE: return 1;
    case tflite_BuiltinOperator_RESIZE_BILINEAR: return 1;
    case tflite_BuiltinOperator_RNN: return 1;
    case tflite_BuiltinOperator_SOFTMAX: return 1;
    case tflite_BuiltinOperator_SPACE_TO_DEPTH: return 1;
    case tflite_BuiltinOperator_SVDF: return 1;
    case tflite_BuiltinOperator_TANH: return 1;
    case tflite_BuiltinOperator_CONCAT_EMBEDDINGS: return 1;
    case tflite_BuiltinOperator_SKIP_GRAM: return 1;
    case tflite_BuiltinOperator_CALL: return 1;
    case tflite_BuiltinOperator_CUSTOM: return 1;
    case tflite_BuiltinOperator_EMBEDDING_LOOKUP_SPARSE: return 1;
    case tflite_BuiltinOperator_PAD: return 1;
    case tflite_BuiltinOperator_UNIDIRECTIONAL_SEQUENCE_RNN: return 1;
    case tflite_BuiltinOperator_GATHER: return 1;
    case tflite_BuiltinOperator_BATCH_TO_SPACE_ND: return 1;
    case tflite_BuiltinOperator_SPACE_TO_BATCH_ND: return 1;
    case tflite_BuiltinOperator_TRANSPOSE: return 1;
    case tflite_BuiltinOperator_MEAN: return 1;
    case tflite_BuiltinOperator_SUB: return 1;
    case tflite_BuiltinOperator_DIV: return 1;
    case tflite_BuiltinOperator_SQUEEZE: return 1;
    case tflite_BuiltinOperator_UNIDIRECTIONAL_SEQUENCE_LSTM: return 1;
    case tflite_BuiltinOperator_STRIDED_SLICE: return 1;
    case tflite_BuiltinOperator_BIDIRECTIONAL_SEQUENCE_RNN: return 1;
    case tflite_BuiltinOperator_EXP: return 1;
    case tflite_BuiltinOperator_TOPK_V2: return 1;
    case tflite_BuiltinOperator_SPLIT: return 1;
    case tflite_BuiltinOperator_LOG_SOFTMAX: return 1;
    case tflite_BuiltinOperator_DELEGATE: return 1;
    case tflite_BuiltinOperator_BIDIRECTIONAL_SEQUENCE_LSTM: return 1;
    case tflite_BuiltinOperator_CAST: return 1;
    case tflite_BuiltinOperator_PRELU: return 1;
    case tflite_BuiltinOperator_MAXIMUM: return 1;
    case tflite_BuiltinOperator_ARG_MAX: return 1;
    case tflite_BuiltinOperator_MINIMUM: return 1;
    case tflite_BuiltinOperator_LESS: return 1;
    case tflite_BuiltinOperator_NEG: return 1;
    case tflite_BuiltinOperator_PADV2: return 1;
    case tflite_BuiltinOperator_GREATER: return 1;
    case tflite_BuiltinOperator_GREATER_EQUAL: return 1;
    case tflite_BuiltinOperator_LESS_EQUAL: return 1;
    case tflite_BuiltinOperator_SELECT: return 1;
    case tflite_BuiltinOperator_SLICE: return 1;
    case tflite_BuiltinOperator_SIN: return 1;
    case tflite_BuiltinOperator_TRANSPOSE_CONV: return 1;
    case tflite_BuiltinOperator_SPARSE_TO_DENSE: return 1;
    case tflite_BuiltinOperator_TILE: return 1;
    case tflite_BuiltinOperator_EXPAND_DIMS: return 1;
    case tflite_BuiltinOperator_EQUAL: return 1;
    case tflite_BuiltinOperator_NOT_EQUAL: return 1;
    case tflite_BuiltinOperator_LOG: return 1;
    case tflite_BuiltinOperator_SUM: return 1;
    case tflite_BuiltinOperator_SQRT: return 1;
    case tflite_BuiltinOperator_RSQRT: return 1;
    case tflite_BuiltinOperator_SHAPE: return 1;
    case tflite_BuiltinOperator_POW: return 1;
    case tflite_BuiltinOperator_ARG_MIN: return 1;
    case tflite_BuiltinOperator_FAKE_QUANT: return 1;
    case tflite_BuiltinOperator_REDUCE_PROD: return 1;
    case tflite_BuiltinOperator_REDUCE_MAX: return 1;
    case tflite_BuiltinOperator_PACK: return 1;
    case tflite_BuiltinOperator_LOGICAL_OR: return 1;
    case tflite_BuiltinOperator_ONE_HOT: return 1;
    case tflite_BuiltinOperator_LOGICAL_AND: return 1;
    case tflite_BuiltinOperator_LOGICAL_NOT: return 1;
    case tflite_BuiltinOperator_UNPACK: return 1;
    case tflite_BuiltinOperator_REDUCE_MIN: return 1;
    case tflite_BuiltinOperator_FLOOR_DIV: return 1;
    case tflite_BuiltinOperator_REDUCE_ANY: return 1;
    case tflite_BuiltinOperator_SQUARE: return 1;
    case tflite_BuiltinOperator_ZEROS_LIKE: return 1;
    case tflite_BuiltinOperator_FILL: return 1;
    case tflite_BuiltinOperator_FLOOR_MOD: return 1;
    case tflite_BuiltinOperator_RANGE: return 1;
    case tflite_BuiltinOperator_RESIZE_NEAREST_NEIGHBOR: return 1;
    case tflite_BuiltinOperator_LEAKY_RELU: return 1;
    case tflite_BuiltinOperator_SQUARED_DIFFERENCE: return 1;
    case tflite_BuiltinOperator_MIRROR_PAD: return 1;
    case tflite_BuiltinOperator_ABS: return 1;
    case tflite_BuiltinOperator_SPLIT_V: return 1;
    case tflite_BuiltinOperator_UNIQUE: return 1;
    case tflite_BuiltinOperator_CEIL: return 1;
    case tflite_BuiltinOperator_REVERSE_V2: return 1;
    case tflite_BuiltinOperator_ADD_N: return 1;
    case tflite_BuiltinOperator_GATHER_ND: return 1;
    case tflite_BuiltinOperator_COS: return 1;
    case tflite_BuiltinOperator_WHERE: return 1;
    case tflite_BuiltinOperator_RANK: return 1;
    case tflite_BuiltinOperator_ELU: return 1;
    case tflite_BuiltinOperator_REVERSE_SEQUENCE: return 1;
    case tflite_BuiltinOperator_MATRIX_DIAG: return 1;
    case tflite_BuiltinOperator_QUANTIZE: return 1;
    case tflite_BuiltinOperator_MATRIX_SET_DIAG: return 1;
    case tflite_BuiltinOperator_ROUND: return 1;
    case tflite_BuiltinOperator_HARD_SWISH: return 1;
    case tflite_BuiltinOperator_IF: return 1;
    case tflite_BuiltinOperator_WHILE: return 1;
    case tflite_BuiltinOperator_NON_MAX_SUPPRESSION_V4: return 1;
    case tflite_BuiltinOperator_NON_MAX_SUPPRESSION_V5: return 1;
    case tflite_BuiltinOperator_SCATTER_ND: return 1;
    case tflite_BuiltinOperator_SELECT_V2: return 1;
    case tflite_BuiltinOperator_DENSIFY: return 1;
    case tflite_BuiltinOperator_SEGMENT_SUM: return 1;
    default: return 0;
    }
}

typedef int8_t tflite_Padding_enum_t;
__flatbuffers_define_integer_type(tflite_Padding, tflite_Padding_enum_t, 8)
#define tflite_Padding_SAME ((tflite_Padding_enum_t)INT8_C(0))
#define tflite_Padding_VALID ((tflite_Padding_enum_t)INT8_C(1))

static inline const char *tflite_Padding_name(tflite_Padding_enum_t value)
{
    switch (value) {
    case tflite_Padding_SAME: return "SAME";
    case tflite_Padding_VALID: return "VALID";
    default: return "";
    }
}

static inline int tflite_Padding_is_known_value(tflite_Padding_enum_t value)
{
    switch (value) {
    case tflite_Padding_SAME: return 1;
    case tflite_Padding_VALID: return 1;
    default: return 0;
    }
}

typedef int8_t tflite_ActivationFunctionType_enum_t;
__flatbuffers_define_integer_type(tflite_ActivationFunctionType, tflite_ActivationFunctionType_enum_t, 8)
#define tflite_ActivationFunctionType_NONE ((tflite_ActivationFunctionType_enum_t)INT8_C(0))
#define tflite_ActivationFunctionType_RELU ((tflite_ActivationFunctionType_enum_t)INT8_C(1))
#define tflite_ActivationFunctionType_RELU_N1_TO_1 ((tflite_ActivationFunctionType_enum_t)INT8_C(2))
#define tflite_ActivationFunctionType_RELU6 ((tflite_ActivationFunctionType_enum_t)INT8_C(3))
#define tflite_ActivationFunctionType_TANH ((tflite_ActivationFunctionType_enum_t)INT8_C(4))
#define tflite_ActivationFunctionType_SIGN_BIT ((tflite_ActivationFunctionType_enum_t)INT8_C(5))

static inline const char *tflite_ActivationFunctionType_name(tflite_ActivationFunctionType_enum_t value)
{
    switch (value) {
    case tflite_ActivationFunctionType_NONE: return "NONE";
    case tflite_ActivationFunctionType_RELU: return "RELU";
    case tflite_ActivationFunctionType_RELU_N1_TO_1: return "RELU_N1_TO_1";
    case tflite_ActivationFunctionType_RELU6: return "RELU6";
    case tflite_ActivationFunctionType_TANH: return "TANH";
    case tflite_ActivationFunctionType_SIGN_BIT: return "SIGN_BIT";
    default: return "";
    }
}

static inline int tflite_ActivationFunctionType_is_known_value(tflite_ActivationFunctionType_enum_t value)
{
    switch (value) {
    case tflite_ActivationFunctionType_NONE: return 1;
    case tflite_ActivationFunctionType_RELU: return 1;
    case tflite_ActivationFunctionType_RELU_N1_TO_1: return 1;
    case tflite_ActivationFunctionType_RELU6: return 1;
    case tflite_ActivationFunctionType_TANH: return 1;
    case tflite_ActivationFunctionType_SIGN_BIT: return 1;
    default: return 0;
    }
}

typedef int8_t tflite_LSHProjectionType_enum_t;
__flatbuffers_define_integer_type(tflite_LSHProjectionType, tflite_LSHProjectionType_enum_t, 8)
#define tflite_LSHProjectionType_UNKNOWN ((tflite_LSHProjectionType_enum_t)INT8_C(0))
#define tflite_LSHProjectionType_SPARSE ((tflite_LSHProjectionType_enum_t)INT8_C(1))
#define tflite_LSHProjectionType_DENSE ((tflite_LSHProjectionType_enum_t)INT8_C(2))

static inline const char *tflite_LSHProjectionType_name(tflite_LSHProjectionType_enum_t value)
{
    switch (value) {
    case tflite_LSHProjectionType_UNKNOWN: return "UNKNOWN";
    case tflite_LSHProjectionType_SPARSE: return "SPARSE";
    case tflite_LSHProjectionType_DENSE: return "DENSE";
    default: return "";
    }
}

static inline int tflite_LSHProjectionType_is_known_value(tflite_LSHProjectionType_enum_t value)
{
    switch (value) {
    case tflite_LSHProjectionType_UNKNOWN: return 1;
    case tflite_LSHProjectionType_SPARSE: return 1;
    case tflite_LSHProjectionType_DENSE: return 1;
    default: return 0;
    }
}

typedef int8_t tflite_FullyConnectedOptionsWeightsFormat_enum_t;
__flatbuffers_define_integer_type(tflite_FullyConnectedOptionsWeightsFormat, tflite_FullyConnectedOptionsWeightsFormat_enum_t, 8)
#define tflite_FullyConnectedOptionsWeightsFormat_DEFAULT ((tflite_FullyConnectedOptionsWeightsFormat_enum_t)INT8_C(0))
#define tflite_FullyConnectedOptionsWeightsFormat_SHUFFLED4x16INT8 ((tflite_FullyConnectedOptionsWeightsFormat_enum_t)INT8_C(1))

static inline const char *tflite_FullyConnectedOptionsWeightsFormat_name(tflite_FullyConnectedOptionsWeightsFormat_enum_t value)
{
    switch (value) {
    case tflite_FullyConnectedOptionsWeightsFormat_DEFAULT: return "DEFAULT";
    case tflite_FullyConnectedOptionsWeightsFormat_SHUFFLED4x16INT8: return "SHUFFLED4x16INT8";
    default: return "";
    }
}

static inline int tflite_FullyConnectedOptionsWeightsFormat_is_known_value(tflite_FullyConnectedOptionsWeightsFormat_enum_t value)
{
    switch (value) {
    case tflite_FullyConnectedOptionsWeightsFormat_DEFAULT: return 1;
    case tflite_FullyConnectedOptionsWeightsFormat_SHUFFLED4x16INT8: return 1;
    default: return 0;
    }
}

typedef int8_t tflite_LSTMKernelType_enum_t;
__flatbuffers_define_integer_type(tflite_LSTMKernelType, tflite_LSTMKernelType_enum_t, 8)
#define tflite_LSTMKernelType_FULL ((tflite_LSTMKernelType_enum_t)INT8_C(0))
#define tflite_LSTMKernelType_BASIC ((tflite_LSTMKernelType_enum_t)INT8_C(1))

static inline const char *tflite_LSTMKernelType_name(tflite_LSTMKernelType_enum_t value)
{
    switch (value) {
    case tflite_LSTMKernelType_FULL: return "FULL";
    case tflite_LSTMKernelType_BASIC: return "BASIC";
    default: return "";
    }
}

static inline int tflite_LSTMKernelType_is_known_value(tflite_LSTMKernelType_enum_t value)
{
    switch (value) {
    case tflite_LSTMKernelType_FULL: return 1;
    case tflite_LSTMKernelType_BASIC: return 1;
    default: return 0;
    }
}

typedef int8_t tflite_CombinerType_enum_t;
__flatbuffers_define_integer_type(tflite_CombinerType, tflite_CombinerType_enum_t, 8)
#define tflite_CombinerType_SUM ((tflite_CombinerType_enum_t)INT8_C(0))
#define tflite_CombinerType_MEAN ((tflite_CombinerType_enum_t)INT8_C(1))
#define tflite_CombinerType_SQRTN ((tflite_CombinerType_enum_t)INT8_C(2))

static inline const char *tflite_CombinerType_name(tflite_CombinerType_enum_t value)
{
    switch (value) {
    case tflite_CombinerType_SUM: return "SUM";
    case tflite_CombinerType_MEAN: return "MEAN";
    case tflite_CombinerType_SQRTN: return "SQRTN";
    default: return "";
    }
}

static inline int tflite_CombinerType_is_known_value(tflite_CombinerType_enum_t value)
{
    switch (value) {
    case tflite_CombinerType_SUM: return 1;
    case tflite_CombinerType_MEAN: return 1;
    case tflite_CombinerType_SQRTN: return 1;
    default: return 0;
    }
}

typedef int8_t tflite_MirrorPadMode_enum_t;
__flatbuffers_define_integer_type(tflite_MirrorPadMode, tflite_MirrorPadMode_enum_t, 8)
#define tflite_MirrorPadMode_REFLECT ((tflite_MirrorPadMode_enum_t)INT8_C(0))
#define tflite_MirrorPadMode_SYMMETRIC ((tflite_MirrorPadMode_enum_t)INT8_C(1))

static inline const char *tflite_MirrorPadMode_name(tflite_MirrorPadMode_enum_t value)
{
    switch (value) {
    case tflite_MirrorPadMode_REFLECT: return "REFLECT";
    case tflite_MirrorPadMode_SYMMETRIC: return "SYMMETRIC";
    default: return "";
    }
}

static inline int tflite_MirrorPadMode_is_known_value(tflite_MirrorPadMode_enum_t value)
{
    switch (value) {
    case tflite_MirrorPadMode_REFLECT: return 1;
    case tflite_MirrorPadMode_SYMMETRIC: return 1;
    default: return 0;
    }
}

typedef int8_t tflite_CustomOptionsFormat_enum_t;
__flatbuffers_define_integer_type(tflite_CustomOptionsFormat, tflite_CustomOptionsFormat_enum_t, 8)
#define tflite_CustomOptionsFormat_FLEXBUFFERS ((tflite_CustomOptionsFormat_enum_t)INT8_C(0))

static inline const char *tflite_CustomOptionsFormat_name(tflite_CustomOptionsFormat_enum_t value)
{
    switch (value) {
    case tflite_CustomOptionsFormat_FLEXBUFFERS: return "FLEXBUFFERS";
    default: return "";
    }
}

static inline int tflite_CustomOptionsFormat_is_known_value(tflite_CustomOptionsFormat_enum_t value)
{
    switch (value) {
    case tflite_CustomOptionsFormat_FLEXBUFFERS: return 1;
    default: return 0;
    }
}



struct tflite_CustomQuantization_table { uint8_t unused__; };

static inline size_t tflite_CustomQuantization_vec_len(tflite_CustomQuantization_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_CustomQuantization_table_t tflite_CustomQuantization_vec_at(tflite_CustomQuantization_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_CustomQuantization_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_CustomQuantization)

__flatbuffers_define_vector_field(0, tflite_CustomQuantization, custom, flatbuffers_uint8_vec_t, 0)
typedef uint8_t tflite_QuantizationDetails_union_type_t;
__flatbuffers_define_integer_type(tflite_QuantizationDetails, tflite_QuantizationDetails_union_type_t, 8)
__flatbuffers_define_union(flatbuffers_, tflite_QuantizationDetails)
#define tflite_QuantizationDetails_NONE ((tflite_QuantizationDetails_union_type_t)UINT8_C(0))
#define tflite_QuantizationDetails_CustomQuantization ((tflite_QuantizationDetails_union_type_t)UINT8_C(1))

static inline const char *tflite_QuantizationDetails_type_name(tflite_QuantizationDetails_union_type_t type)
{
    switch (type) {
    case tflite_QuantizationDetails_NONE: return "NONE";
    case tflite_QuantizationDetails_CustomQuantization: return "CustomQuantization";
    default: return "";
    }
}

static inline int tflite_QuantizationDetails_is_known_type(tflite_QuantizationDetails_union_type_t type)
{
    switch (type) {
    case tflite_QuantizationDetails_NONE: return 1;
    case tflite_QuantizationDetails_CustomQuantization: return 1;
    default: return 0;
    }
}


struct tflite_QuantizationParameters_table { uint8_t unused__; };

static inline size_t tflite_QuantizationParameters_vec_len(tflite_QuantizationParameters_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_QuantizationParameters_table_t tflite_QuantizationParameters_vec_at(tflite_QuantizationParameters_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_QuantizationParameters_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_QuantizationParameters)

__flatbuffers_define_vector_field(0, tflite_QuantizationParameters, min, flatbuffers_float_vec_t, 0)
__flatbuffers_define_vector_field(1, tflite_QuantizationParameters, max, flatbuffers_float_vec_t, 0)
__flatbuffers_define_vector_field(2, tflite_QuantizationParameters, scale, flatbuffers_float_vec_t, 0)
__flatbuffers_define_vector_field(3, tflite_QuantizationParameters, zero_point, flatbuffers_int64_vec_t, 0)
__flatbuffers_define_union_field(flatbuffers_, 5, tflite_QuantizationParameters, details, tflite_QuantizationDetails, 0)
__flatbuffers_define_scalar_field(6, tflite_QuantizationParameters, quantized_dimension, flatbuffers_int32, int32_t, INT32_C(0))

struct tflite_Int32Vector_table { uint8_t unused__; };

static inline size_t tflite_Int32Vector_vec_len(tflite_Int32Vector_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_Int32Vector_table_t tflite_Int32Vector_vec_at(tflite_Int32Vector_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_Int32Vector_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_Int32Vector)

__flatbuffers_define_vector_field(0, tflite_Int32Vector, values, flatbuffers_int32_vec_t, 0)

struct tflite_Uint16Vector_table { uint8_t unused__; };

static inline size_t tflite_Uint16Vector_vec_len(tflite_Uint16Vector_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_Uint16Vector_table_t tflite_Uint16Vector_vec_at(tflite_Uint16Vector_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_Uint16Vector_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_Uint16Vector)

__flatbuffers_define_vector_field(0, tflite_Uint16Vector, values, flatbuffers_uint16_vec_t, 0)

struct tflite_Uint8Vector_table { uint8_t unused__; };

static inline size_t tflite_Uint8Vector_vec_len(tflite_Uint8Vector_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_Uint8Vector_table_t tflite_Uint8Vector_vec_at(tflite_Uint8Vector_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_Uint8Vector_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_Uint8Vector)

__flatbuffers_define_vector_field(0, tflite_Uint8Vector, values, flatbuffers_uint8_vec_t, 0)
typedef uint8_t tflite_SparseIndexVector_union_type_t;
__flatbuffers_define_integer_type(tflite_SparseIndexVector, tflite_SparseIndexVector_union_type_t, 8)
__flatbuffers_define_union(flatbuffers_, tflite_SparseIndexVector)
#define tflite_SparseIndexVector_NONE ((tflite_SparseIndexVector_union_type_t)UINT8_C(0))
#define tflite_SparseIndexVector_Int32Vector ((tflite_SparseIndexVector_union_type_t)UINT8_C(1))
#define tflite_SparseIndexVector_Uint16Vector ((tflite_SparseIndexVector_union_type_t)UINT8_C(2))
#define tflite_SparseIndexVector_Uint8Vector ((tflite_SparseIndexVector_union_type_t)UINT8_C(3))

static inline const char *tflite_SparseIndexVector_type_name(tflite_SparseIndexVector_union_type_t type)
{
    switch (type) {
    case tflite_SparseIndexVector_NONE: return "NONE";
    case tflite_SparseIndexVector_Int32Vector: return "Int32Vector";
    case tflite_SparseIndexVector_Uint16Vector: return "Uint16Vector";
    case tflite_SparseIndexVector_Uint8Vector: return "Uint8Vector";
    default: return "";
    }
}

static inline int tflite_SparseIndexVector_is_known_type(tflite_SparseIndexVector_union_type_t type)
{
    switch (type) {
    case tflite_SparseIndexVector_NONE: return 1;
    case tflite_SparseIndexVector_Int32Vector: return 1;
    case tflite_SparseIndexVector_Uint16Vector: return 1;
    case tflite_SparseIndexVector_Uint8Vector: return 1;
    default: return 0;
    }
}


struct tflite_DimensionMetadata_table { uint8_t unused__; };

static inline size_t tflite_DimensionMetadata_vec_len(tflite_DimensionMetadata_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_DimensionMetadata_table_t tflite_DimensionMetadata_vec_at(tflite_DimensionMetadata_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_DimensionMetadata_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_DimensionMetadata)

__flatbuffers_define_scalar_field(0, tflite_DimensionMetadata, format, tflite_DimensionType, tflite_DimensionType_enum_t, INT8_C(0))
__flatbuffers_define_scalar_field(1, tflite_DimensionMetadata, dense_size, flatbuffers_int32, int32_t, INT32_C(0))
__flatbuffers_define_union_field(flatbuffers_, 3, tflite_DimensionMetadata, array_segments, tflite_SparseIndexVector, 0)
__flatbuffers_define_union_field(flatbuffers_, 5, tflite_DimensionMetadata, array_indices, tflite_SparseIndexVector, 0)

struct tflite_SparsityParameters_table { uint8_t unused__; };

static inline size_t tflite_SparsityParameters_vec_len(tflite_SparsityParameters_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_SparsityParameters_table_t tflite_SparsityParameters_vec_at(tflite_SparsityParameters_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_SparsityParameters_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_SparsityParameters)

__flatbuffers_define_vector_field(0, tflite_SparsityParameters, traversal_order, flatbuffers_int32_vec_t, 0)
__flatbuffers_define_vector_field(1, tflite_SparsityParameters, block_map, flatbuffers_int32_vec_t, 0)
__flatbuffers_define_vector_field(2, tflite_SparsityParameters, dim_metadata, tflite_DimensionMetadata_vec_t, 0)

struct tflite_Tensor_table { uint8_t unused__; };

static inline size_t tflite_Tensor_vec_len(tflite_Tensor_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_Tensor_table_t tflite_Tensor_vec_at(tflite_Tensor_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_Tensor_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_Tensor)

__flatbuffers_define_vector_field(0, tflite_Tensor, shape, flatbuffers_int32_vec_t, 0)
__flatbuffers_define_scalar_field(1, tflite_Tensor, type, tflite_TensorType, tflite_TensorType_enum_t, INT8_C(0))
__flatbuffers_define_scalar_field(2, tflite_Tensor, buffer, flatbuffers_uint32, uint32_t, UINT32_C(0))
__flatbuffers_define_string_field(3, tflite_Tensor, name, 0)
__flatbuffers_define_table_field(4, tflite_Tensor, quantization, tflite_QuantizationParameters_table_t, 0)
__flatbuffers_define_scalar_field(5, tflite_Tensor, is_variable, flatbuffers_bool, flatbuffers_bool_t, UINT8_C(0))
__flatbuffers_define_table_field(6, tflite_Tensor, sparsity, tflite_SparsityParameters_table_t, 0)
__flatbuffers_define_vector_field(7, tflite_Tensor, shape_signature, flatbuffers_int32_vec_t, 0)
typedef uint8_t tflite_BuiltinOptions_union_type_t;
__flatbuffers_define_integer_type(tflite_BuiltinOptions, tflite_BuiltinOptions_union_type_t, 8)
__flatbuffers_define_union(flatbuffers_, tflite_BuiltinOptions)
#define tflite_BuiltinOptions_NONE ((tflite_BuiltinOptions_union_type_t)UINT8_C(0))
#define tflite_BuiltinOptions_Conv2DOptions ((tflite_BuiltinOptions_union_type_t)UINT8_C(1))
#define tflite_BuiltinOptions_DepthwiseConv2DOptions ((tflite_BuiltinOptions_union_type_t)UINT8_C(2))
#define tflite_BuiltinOptions_ConcatEmbeddingsOptions ((tflite_BuiltinOptions_union_type_t)UINT8_C(3))
#define tflite_BuiltinOptions_LSHProjectionOptions ((tflite_BuiltinOptions_union_type_t)UINT8_C(4))
#define tflite_BuiltinOptions_Pool2DOptions ((tflite_BuiltinOptions_union_type_t)UINT8_C(5))
#define tflite_BuiltinOptions_SVDFOptions ((tflite_BuiltinOptions_union_type_t)UINT8_C(6))
#define tflite_BuiltinOptions_RNNOptions ((tflite_BuiltinOptions_union_type_t)UINT8_C(7))
#define tflite_BuiltinOptions_FullyConnectedOptions ((tflite_BuiltinOptions_union_type_t)UINT8_C(8))
#define tflite_BuiltinOptions_SoftmaxOptions ((tflite_BuiltinOptions_union_type_t)UINT8_C(9))
#define tflite_BuiltinOptions_ConcatenationOptions ((tflite_BuiltinOptions_union_type_t)UINT8_C(10))
#define tflite_BuiltinOptions_AddOptions ((tflite_BuiltinOptions_union_type_t)UINT8_C(11))
#define tflite_BuiltinOptions_L2NormOptions ((tflite_BuiltinOptions_union_type_t)UINT8_C(12))
#define tflite_BuiltinOptions_LocalResponseNormalizationOptions ((tflite_BuiltinOptions_union_type_t)UINT8_C(13))
#define tflite_BuiltinOptions_LSTMOptions ((tflite_BuiltinOptions_union_type_t)UINT8_C(14))
#define tflite_BuiltinOptions_ResizeBilinearOptions ((tflite_BuiltinOptions_union_type_t)UINT8_C(15))
#define tflite_BuiltinOptions_CallOptions ((tflite_BuiltinOptions_union_type_t)UINT8_C(16))
#define tflite_BuiltinOptions_ReshapeOptions ((tflite_BuiltinOptions_union_type_t)UINT8_C(17))
#define tflite_BuiltinOptions_SkipGramOptions ((tflite_BuiltinOptions_union_type_t)UINT8_C(18))
#define tflite_BuiltinOptions_SpaceToDepthOptions ((tflite_BuiltinOptions_union_type_t)UINT8_C(19))
#define tflite_BuiltinOptions_EmbeddingLookupSparseOptions ((tflite_BuiltinOptions_union_type_t)UINT8_C(20))
#define tflite_BuiltinOptions_MulOptions ((tflite_BuiltinOptions_union_type_t)UINT8_C(21))
#define tflite_BuiltinOptions_PadOptions ((tflite_BuiltinOptions_union_type_t)UINT8_C(22))
#define tflite_BuiltinOptions_GatherOptions ((tflite_BuiltinOptions_union_type_t)UINT8_C(23))
#define tflite_BuiltinOptions_BatchToSpaceNDOptions ((tflite_BuiltinOptions_union_type_t)UINT8_C(24))
#define tflite_BuiltinOptions_SpaceToBatchNDOptions ((tflite_BuiltinOptions_union_type_t)UINT8_C(25))
#define tflite_BuiltinOptions_TransposeOptions ((tflite_BuiltinOptions_union_type_t)UINT8_C(26))
#define tflite_BuiltinOptions_ReducerOptions ((tflite_BuiltinOptions_union_type_t)UINT8_C(27))
#define tflite_BuiltinOptions_SubOptions ((tflite_BuiltinOptions_union_type_t)UINT8_C(28))
#define tflite_BuiltinOptions_DivOptions ((tflite_BuiltinOptions_union_type_t)UINT8_C(29))
#define tflite_BuiltinOptions_SqueezeOptions ((tflite_BuiltinOptions_union_type_t)UINT8_C(30))
#define tflite_BuiltinOptions_SequenceRNNOptions ((tflite_BuiltinOptions_union_type_t)UINT8_C(31))
#define tflite_BuiltinOptions_StridedSliceOptions ((tflite_BuiltinOptions_union_type_t)UINT8_C(32))
#define tflite_BuiltinOptions_ExpOptions ((tflite_BuiltinOptions_union_type_t)UINT8_C(33))
#define tflite_BuiltinOptions_TopKV2Options ((tflite_BuiltinOptions_union_type_t)UINT8_C(34))
#define tflite_BuiltinOptions_SplitOptions ((tflite_BuiltinOptions_union_type_t)UINT8_C(35))
#define tflite_BuiltinOptions_LogSoftmaxOptions ((tflite_BuiltinOptions_union_type_t)UINT8_C(36))
#define tflite_BuiltinOptions_CastOptions ((tflite_BuiltinOptions_union_type_t)UINT8_C(37))
#define tflite_BuiltinOptions_DequantizeOptions ((tflite_BuiltinOptions_union_type_t)UINT8_C(38))
#define tflite_BuiltinOptions_MaximumMinimumOptions ((tflite_BuiltinOptions_union_type_t)UINT8_C(39))
#define tflite_BuiltinOptions_ArgMaxOptions ((tflite_BuiltinOptions_union_type_t)UINT8_C(40))
#define tflite_BuiltinOptions_LessOptions ((tflite_BuiltinOptions_union_type_t)UINT8_C(41))
#define tflite_BuiltinOptions_NegOptions ((tflite_BuiltinOptions_union_type_t)UINT8_C(42))
#define tflite_BuiltinOptions_PadV2Options ((tflite_BuiltinOptions_union_type_t)UINT8_C(43))
#define tflite_BuiltinOptions_GreaterOptions ((tflite_BuiltinOptions_union_type_t)UINT8_C(44))
#define tflite_BuiltinOptions_GreaterEqualOptions ((tflite_BuiltinOptions_union_type_t)UINT8_C(45))
#define tflite_BuiltinOptions_LessEqualOptions ((tflite_BuiltinOptions_union_type_t)UINT8_C(46))
#define tflite_BuiltinOptions_SelectOptions ((tflite_BuiltinOptions_union_type_t)UINT8_C(47))
#define tflite_BuiltinOptions_SliceOptions ((tflite_BuiltinOptions_union_type_t)UINT8_C(48))
#define tflite_BuiltinOptions_TransposeConvOptions ((tflite_BuiltinOptions_union_type_t)UINT8_C(49))
#define tflite_BuiltinOptions_SparseToDenseOptions ((tflite_BuiltinOptions_union_type_t)UINT8_C(50))
#define tflite_BuiltinOptions_TileOptions ((tflite_BuiltinOptions_union_type_t)UINT8_C(51))
#define tflite_BuiltinOptions_ExpandDimsOptions ((tflite_BuiltinOptions_union_type_t)UINT8_C(52))
#define tflite_BuiltinOptions_EqualOptions ((tflite_BuiltinOptions_union_type_t)UINT8_C(53))
#define tflite_BuiltinOptions_NotEqualOptions ((tflite_BuiltinOptions_union_type_t)UINT8_C(54))
#define tflite_BuiltinOptions_ShapeOptions ((tflite_BuiltinOptions_union_type_t)UINT8_C(55))
#define tflite_BuiltinOptions_PowOptions ((tflite_BuiltinOptions_union_type_t)UINT8_C(56))
#define tflite_BuiltinOptions_ArgMinOptions ((tflite_BuiltinOptions_union_type_t)UINT8_C(57))
#define tflite_BuiltinOptions_FakeQuantOptions ((tflite_BuiltinOptions_union_type_t)UINT8_C(58))
#define tflite_BuiltinOptions_PackOptions ((tflite_BuiltinOptions_union_type_t)UINT8_C(59))
#define tflite_BuiltinOptions_LogicalOrOptions ((tflite_BuiltinOptions_union_type_t)UINT8_C(60))
#define tflite_BuiltinOptions_OneHotOptions ((tflite_BuiltinOptions_union_type_t)UINT8_C(61))
#define tflite_BuiltinOptions_LogicalAndOptions ((tflite_BuiltinOptions_union_type_t)UINT8_C(62))
#define tflite_BuiltinOptions_LogicalNotOptions ((tflite_BuiltinOptions_union_type_t)UINT8_C(63))
#define tflite_BuiltinOptions_UnpackOptions ((tflite_BuiltinOptions_union_type_t)UINT8_C(64))
#define tflite_BuiltinOptions_FloorDivOptions ((tflite_BuiltinOptions_union_type_t)UINT8_C(65))
#define tflite_BuiltinOptions_SquareOptions ((tflite_BuiltinOptions_union_type_t)UINT8_C(66))
#define tflite_BuiltinOptions_ZerosLikeOptions ((tflite_BuiltinOptions_union_type_t)UINT8_C(67))
#define tflite_BuiltinOptions_FillOptions ((tflite_BuiltinOptions_union_type_t)UINT8_C(68))
#define tflite_BuiltinOptions_BidirectionalSequenceLSTMOptions ((tflite_BuiltinOptions_union_type_t)UINT8_C(69))
#define tflite_BuiltinOptions_BidirectionalSequenceRNNOptions ((tflite_BuiltinOptions_union_type_t)UINT8_C(70))
#define tflite_BuiltinOptions_UnidirectionalSequenceLSTMOptions ((tflite_BuiltinOptions_union_type_t)UINT8_C(71))
#define tflite_BuiltinOptions_FloorModOptions ((tflite_BuiltinOptions_union_type_t)UINT8_C(72))
#define tflite_BuiltinOptions_RangeOptions ((tflite_BuiltinOptions_union_type_t)UINT8_C(73))
#define tflite_BuiltinOptions_ResizeNearestNeighborOptions ((tflite_BuiltinOptions_union_type_t)UINT8_C(74))
#define tflite_BuiltinOptions_LeakyReluOptions ((tflite_BuiltinOptions_union_type_t)UINT8_C(75))
#define tflite_BuiltinOptions_SquaredDifferenceOptions ((tflite_BuiltinOptions_union_type_t)UINT8_C(76))
#define tflite_BuiltinOptions_MirrorPadOptions ((tflite_BuiltinOptions_union_type_t)UINT8_C(77))
#define tflite_BuiltinOptions_AbsOptions ((tflite_BuiltinOptions_union_type_t)UINT8_C(78))
#define tflite_BuiltinOptions_SplitVOptions ((tflite_BuiltinOptions_union_type_t)UINT8_C(79))
#define tflite_BuiltinOptions_UniqueOptions ((tflite_BuiltinOptions_union_type_t)UINT8_C(80))
#define tflite_BuiltinOptions_ReverseV2Options ((tflite_BuiltinOptions_union_type_t)UINT8_C(81))
#define tflite_BuiltinOptions_AddNOptions ((tflite_BuiltinOptions_union_type_t)UINT8_C(82))
#define tflite_BuiltinOptions_GatherNdOptions ((tflite_BuiltinOptions_union_type_t)UINT8_C(83))
#define tflite_BuiltinOptions_CosOptions ((tflite_BuiltinOptions_union_type_t)UINT8_C(84))
#define tflite_BuiltinOptions_WhereOptions ((tflite_BuiltinOptions_union_type_t)UINT8_C(85))
#define tflite_BuiltinOptions_RankOptions ((tflite_BuiltinOptions_union_type_t)UINT8_C(86))
#define tflite_BuiltinOptions_ReverseSequenceOptions ((tflite_BuiltinOptions_union_type_t)UINT8_C(87))
#define tflite_BuiltinOptions_MatrixDiagOptions ((tflite_BuiltinOptions_union_type_t)UINT8_C(88))
#define tflite_BuiltinOptions_QuantizeOptions ((tflite_BuiltinOptions_union_type_t)UINT8_C(89))
#define tflite_BuiltinOptions_MatrixSetDiagOptions ((tflite_BuiltinOptions_union_type_t)UINT8_C(90))
#define tflite_BuiltinOptions_HardSwishOptions ((tflite_BuiltinOptions_union_type_t)UINT8_C(91))
#define tflite_BuiltinOptions_IfOptions ((tflite_BuiltinOptions_union_type_t)UINT8_C(92))
#define tflite_BuiltinOptions_WhileOptions ((tflite_BuiltinOptions_union_type_t)UINT8_C(93))
#define tflite_BuiltinOptions_DepthToSpaceOptions ((tflite_BuiltinOptions_union_type_t)UINT8_C(94))
#define tflite_BuiltinOptions_NonMaxSuppressionV4Options ((tflite_BuiltinOptions_union_type_t)UINT8_C(95))
#define tflite_BuiltinOptions_NonMaxSuppressionV5Options ((tflite_BuiltinOptions_union_type_t)UINT8_C(96))
#define tflite_BuiltinOptions_ScatterNdOptions ((tflite_BuiltinOptions_union_type_t)UINT8_C(97))
#define tflite_BuiltinOptions_SelectV2Options ((tflite_BuiltinOptions_union_type_t)UINT8_C(98))
#define tflite_BuiltinOptions_DensifyOptions ((tflite_BuiltinOptions_union_type_t)UINT8_C(99))
#define tflite_BuiltinOptions_SegmentSumOptions ((tflite_BuiltinOptions_union_type_t)UINT8_C(100))

static inline const char *tflite_BuiltinOptions_type_name(tflite_BuiltinOptions_union_type_t type)
{
    switch (type) {
    case tflite_BuiltinOptions_NONE: return "NONE";
    case tflite_BuiltinOptions_Conv2DOptions: return "Conv2DOptions";
    case tflite_BuiltinOptions_DepthwiseConv2DOptions: return "DepthwiseConv2DOptions";
    case tflite_BuiltinOptions_ConcatEmbeddingsOptions: return "ConcatEmbeddingsOptions";
    case tflite_BuiltinOptions_LSHProjectionOptions: return "LSHProjectionOptions";
    case tflite_BuiltinOptions_Pool2DOptions: return "Pool2DOptions";
    case tflite_BuiltinOptions_SVDFOptions: return "SVDFOptions";
    case tflite_BuiltinOptions_RNNOptions: return "RNNOptions";
    case tflite_BuiltinOptions_FullyConnectedOptions: return "FullyConnectedOptions";
    case tflite_BuiltinOptions_SoftmaxOptions: return "SoftmaxOptions";
    case tflite_BuiltinOptions_ConcatenationOptions: return "ConcatenationOptions";
    case tflite_BuiltinOptions_AddOptions: return "AddOptions";
    case tflite_BuiltinOptions_L2NormOptions: return "L2NormOptions";
    case tflite_BuiltinOptions_LocalResponseNormalizationOptions: return "LocalResponseNormalizationOptions";
    case tflite_BuiltinOptions_LSTMOptions: return "LSTMOptions";
    case tflite_BuiltinOptions_ResizeBilinearOptions: return "ResizeBilinearOptions";
    case tflite_BuiltinOptions_CallOptions: return "CallOptions";
    case tflite_BuiltinOptions_ReshapeOptions: return "ReshapeOptions";
    case tflite_BuiltinOptions_SkipGramOptions: return "SkipGramOptions";
    case tflite_BuiltinOptions_SpaceToDepthOptions: return "SpaceToDepthOptions";
    case tflite_BuiltinOptions_EmbeddingLookupSparseOptions: return "EmbeddingLookupSparseOptions";
    case tflite_BuiltinOptions_MulOptions: return "MulOptions";
    case tflite_BuiltinOptions_PadOptions: return "PadOptions";
    case tflite_BuiltinOptions_GatherOptions: return "GatherOptions";
    case tflite_BuiltinOptions_BatchToSpaceNDOptions: return "BatchToSpaceNDOptions";
    case tflite_BuiltinOptions_SpaceToBatchNDOptions: return "SpaceToBatchNDOptions";
    case tflite_BuiltinOptions_TransposeOptions: return "TransposeOptions";
    case tflite_BuiltinOptions_ReducerOptions: return "ReducerOptions";
    case tflite_BuiltinOptions_SubOptions: return "SubOptions";
    case tflite_BuiltinOptions_DivOptions: return "DivOptions";
    case tflite_BuiltinOptions_SqueezeOptions: return "SqueezeOptions";
    case tflite_BuiltinOptions_SequenceRNNOptions: return "SequenceRNNOptions";
    case tflite_BuiltinOptions_StridedSliceOptions: return "StridedSliceOptions";
    case tflite_BuiltinOptions_ExpOptions: return "ExpOptions";
    case tflite_BuiltinOptions_TopKV2Options: return "TopKV2Options";
    case tflite_BuiltinOptions_SplitOptions: return "SplitOptions";
    case tflite_BuiltinOptions_LogSoftmaxOptions: return "LogSoftmaxOptions";
    case tflite_BuiltinOptions_CastOptions: return "CastOptions";
    case tflite_BuiltinOptions_DequantizeOptions: return "DequantizeOptions";
    case tflite_BuiltinOptions_MaximumMinimumOptions: return "MaximumMinimumOptions";
    case tflite_BuiltinOptions_ArgMaxOptions: return "ArgMaxOptions";
    case tflite_BuiltinOptions_LessOptions: return "LessOptions";
    case tflite_BuiltinOptions_NegOptions: return "NegOptions";
    case tflite_BuiltinOptions_PadV2Options: return "PadV2Options";
    case tflite_BuiltinOptions_GreaterOptions: return "GreaterOptions";
    case tflite_BuiltinOptions_GreaterEqualOptions: return "GreaterEqualOptions";
    case tflite_BuiltinOptions_LessEqualOptions: return "LessEqualOptions";
    case tflite_BuiltinOptions_SelectOptions: return "SelectOptions";
    case tflite_BuiltinOptions_SliceOptions: return "SliceOptions";
    case tflite_BuiltinOptions_TransposeConvOptions: return "TransposeConvOptions";
    case tflite_BuiltinOptions_SparseToDenseOptions: return "SparseToDenseOptions";
    case tflite_BuiltinOptions_TileOptions: return "TileOptions";
    case tflite_BuiltinOptions_ExpandDimsOptions: return "ExpandDimsOptions";
    case tflite_BuiltinOptions_EqualOptions: return "EqualOptions";
    case tflite_BuiltinOptions_NotEqualOptions: return "NotEqualOptions";
    case tflite_BuiltinOptions_ShapeOptions: return "ShapeOptions";
    case tflite_BuiltinOptions_PowOptions: return "PowOptions";
    case tflite_BuiltinOptions_ArgMinOptions: return "ArgMinOptions";
    case tflite_BuiltinOptions_FakeQuantOptions: return "FakeQuantOptions";
    case tflite_BuiltinOptions_PackOptions: return "PackOptions";
    case tflite_BuiltinOptions_LogicalOrOptions: return "LogicalOrOptions";
    case tflite_BuiltinOptions_OneHotOptions: return "OneHotOptions";
    case tflite_BuiltinOptions_LogicalAndOptions: return "LogicalAndOptions";
    case tflite_BuiltinOptions_LogicalNotOptions: return "LogicalNotOptions";
    case tflite_BuiltinOptions_UnpackOptions: return "UnpackOptions";
    case tflite_BuiltinOptions_FloorDivOptions: return "FloorDivOptions";
    case tflite_BuiltinOptions_SquareOptions: return "SquareOptions";
    case tflite_BuiltinOptions_ZerosLikeOptions: return "ZerosLikeOptions";
    case tflite_BuiltinOptions_FillOptions: return "FillOptions";
    case tflite_BuiltinOptions_BidirectionalSequenceLSTMOptions: return "BidirectionalSequenceLSTMOptions";
    case tflite_BuiltinOptions_BidirectionalSequenceRNNOptions: return "BidirectionalSequenceRNNOptions";
    case tflite_BuiltinOptions_UnidirectionalSequenceLSTMOptions: return "UnidirectionalSequenceLSTMOptions";
    case tflite_BuiltinOptions_FloorModOptions: return "FloorModOptions";
    case tflite_BuiltinOptions_RangeOptions: return "RangeOptions";
    case tflite_BuiltinOptions_ResizeNearestNeighborOptions: return "ResizeNearestNeighborOptions";
    case tflite_BuiltinOptions_LeakyReluOptions: return "LeakyReluOptions";
    case tflite_BuiltinOptions_SquaredDifferenceOptions: return "SquaredDifferenceOptions";
    case tflite_BuiltinOptions_MirrorPadOptions: return "MirrorPadOptions";
    case tflite_BuiltinOptions_AbsOptions: return "AbsOptions";
    case tflite_BuiltinOptions_SplitVOptions: return "SplitVOptions";
    case tflite_BuiltinOptions_UniqueOptions: return "UniqueOptions";
    case tflite_BuiltinOptions_ReverseV2Options: return "ReverseV2Options";
    case tflite_BuiltinOptions_AddNOptions: return "AddNOptions";
    case tflite_BuiltinOptions_GatherNdOptions: return "GatherNdOptions";
    case tflite_BuiltinOptions_CosOptions: return "CosOptions";
    case tflite_BuiltinOptions_WhereOptions: return "WhereOptions";
    case tflite_BuiltinOptions_RankOptions: return "RankOptions";
    case tflite_BuiltinOptions_ReverseSequenceOptions: return "ReverseSequenceOptions";
    case tflite_BuiltinOptions_MatrixDiagOptions: return "MatrixDiagOptions";
    case tflite_BuiltinOptions_QuantizeOptions: return "QuantizeOptions";
    case tflite_BuiltinOptions_MatrixSetDiagOptions: return "MatrixSetDiagOptions";
    case tflite_BuiltinOptions_HardSwishOptions: return "HardSwishOptions";
    case tflite_BuiltinOptions_IfOptions: return "IfOptions";
    case tflite_BuiltinOptions_WhileOptions: return "WhileOptions";
    case tflite_BuiltinOptions_DepthToSpaceOptions: return "DepthToSpaceOptions";
    case tflite_BuiltinOptions_NonMaxSuppressionV4Options: return "NonMaxSuppressionV4Options";
    case tflite_BuiltinOptions_NonMaxSuppressionV5Options: return "NonMaxSuppressionV5Options";
    case tflite_BuiltinOptions_ScatterNdOptions: return "ScatterNdOptions";
    case tflite_BuiltinOptions_SelectV2Options: return "SelectV2Options";
    case tflite_BuiltinOptions_DensifyOptions: return "DensifyOptions";
    case tflite_BuiltinOptions_SegmentSumOptions: return "SegmentSumOptions";
    default: return "";
    }
}

static inline int tflite_BuiltinOptions_is_known_type(tflite_BuiltinOptions_union_type_t type)
{
    switch (type) {
    case tflite_BuiltinOptions_NONE: return 1;
    case tflite_BuiltinOptions_Conv2DOptions: return 1;
    case tflite_BuiltinOptions_DepthwiseConv2DOptions: return 1;
    case tflite_BuiltinOptions_ConcatEmbeddingsOptions: return 1;
    case tflite_BuiltinOptions_LSHProjectionOptions: return 1;
    case tflite_BuiltinOptions_Pool2DOptions: return 1;
    case tflite_BuiltinOptions_SVDFOptions: return 1;
    case tflite_BuiltinOptions_RNNOptions: return 1;
    case tflite_BuiltinOptions_FullyConnectedOptions: return 1;
    case tflite_BuiltinOptions_SoftmaxOptions: return 1;
    case tflite_BuiltinOptions_ConcatenationOptions: return 1;
    case tflite_BuiltinOptions_AddOptions: return 1;
    case tflite_BuiltinOptions_L2NormOptions: return 1;
    case tflite_BuiltinOptions_LocalResponseNormalizationOptions: return 1;
    case tflite_BuiltinOptions_LSTMOptions: return 1;
    case tflite_BuiltinOptions_ResizeBilinearOptions: return 1;
    case tflite_BuiltinOptions_CallOptions: return 1;
    case tflite_BuiltinOptions_ReshapeOptions: return 1;
    case tflite_BuiltinOptions_SkipGramOptions: return 1;
    case tflite_BuiltinOptions_SpaceToDepthOptions: return 1;
    case tflite_BuiltinOptions_EmbeddingLookupSparseOptions: return 1;
    case tflite_BuiltinOptions_MulOptions: return 1;
    case tflite_BuiltinOptions_PadOptions: return 1;
    case tflite_BuiltinOptions_GatherOptions: return 1;
    case tflite_BuiltinOptions_BatchToSpaceNDOptions: return 1;
    case tflite_BuiltinOptions_SpaceToBatchNDOptions: return 1;
    case tflite_BuiltinOptions_TransposeOptions: return 1;
    case tflite_BuiltinOptions_ReducerOptions: return 1;
    case tflite_BuiltinOptions_SubOptions: return 1;
    case tflite_BuiltinOptions_DivOptions: return 1;
    case tflite_BuiltinOptions_SqueezeOptions: return 1;
    case tflite_BuiltinOptions_SequenceRNNOptions: return 1;
    case tflite_BuiltinOptions_StridedSliceOptions: return 1;
    case tflite_BuiltinOptions_ExpOptions: return 1;
    case tflite_BuiltinOptions_TopKV2Options: return 1;
    case tflite_BuiltinOptions_SplitOptions: return 1;
    case tflite_BuiltinOptions_LogSoftmaxOptions: return 1;
    case tflite_BuiltinOptions_CastOptions: return 1;
    case tflite_BuiltinOptions_DequantizeOptions: return 1;
    case tflite_BuiltinOptions_MaximumMinimumOptions: return 1;
    case tflite_BuiltinOptions_ArgMaxOptions: return 1;
    case tflite_BuiltinOptions_LessOptions: return 1;
    case tflite_BuiltinOptions_NegOptions: return 1;
    case tflite_BuiltinOptions_PadV2Options: return 1;
    case tflite_BuiltinOptions_GreaterOptions: return 1;
    case tflite_BuiltinOptions_GreaterEqualOptions: return 1;
    case tflite_BuiltinOptions_LessEqualOptions: return 1;
    case tflite_BuiltinOptions_SelectOptions: return 1;
    case tflite_BuiltinOptions_SliceOptions: return 1;
    case tflite_BuiltinOptions_TransposeConvOptions: return 1;
    case tflite_BuiltinOptions_SparseToDenseOptions: return 1;
    case tflite_BuiltinOptions_TileOptions: return 1;
    case tflite_BuiltinOptions_ExpandDimsOptions: return 1;
    case tflite_BuiltinOptions_EqualOptions: return 1;
    case tflite_BuiltinOptions_NotEqualOptions: return 1;
    case tflite_BuiltinOptions_ShapeOptions: return 1;
    case tflite_BuiltinOptions_PowOptions: return 1;
    case tflite_BuiltinOptions_ArgMinOptions: return 1;
    case tflite_BuiltinOptions_FakeQuantOptions: return 1;
    case tflite_BuiltinOptions_PackOptions: return 1;
    case tflite_BuiltinOptions_LogicalOrOptions: return 1;
    case tflite_BuiltinOptions_OneHotOptions: return 1;
    case tflite_BuiltinOptions_LogicalAndOptions: return 1;
    case tflite_BuiltinOptions_LogicalNotOptions: return 1;
    case tflite_BuiltinOptions_UnpackOptions: return 1;
    case tflite_BuiltinOptions_FloorDivOptions: return 1;
    case tflite_BuiltinOptions_SquareOptions: return 1;
    case tflite_BuiltinOptions_ZerosLikeOptions: return 1;
    case tflite_BuiltinOptions_FillOptions: return 1;
    case tflite_BuiltinOptions_BidirectionalSequenceLSTMOptions: return 1;
    case tflite_BuiltinOptions_BidirectionalSequenceRNNOptions: return 1;
    case tflite_BuiltinOptions_UnidirectionalSequenceLSTMOptions: return 1;
    case tflite_BuiltinOptions_FloorModOptions: return 1;
    case tflite_BuiltinOptions_RangeOptions: return 1;
    case tflite_BuiltinOptions_ResizeNearestNeighborOptions: return 1;
    case tflite_BuiltinOptions_LeakyReluOptions: return 1;
    case tflite_BuiltinOptions_SquaredDifferenceOptions: return 1;
    case tflite_BuiltinOptions_MirrorPadOptions: return 1;
    case tflite_BuiltinOptions_AbsOptions: return 1;
    case tflite_BuiltinOptions_SplitVOptions: return 1;
    case tflite_BuiltinOptions_UniqueOptions: return 1;
    case tflite_BuiltinOptions_ReverseV2Options: return 1;
    case tflite_BuiltinOptions_AddNOptions: return 1;
    case tflite_BuiltinOptions_GatherNdOptions: return 1;
    case tflite_BuiltinOptions_CosOptions: return 1;
    case tflite_BuiltinOptions_WhereOptions: return 1;
    case tflite_BuiltinOptions_RankOptions: return 1;
    case tflite_BuiltinOptions_ReverseSequenceOptions: return 1;
    case tflite_BuiltinOptions_MatrixDiagOptions: return 1;
    case tflite_BuiltinOptions_QuantizeOptions: return 1;
    case tflite_BuiltinOptions_MatrixSetDiagOptions: return 1;
    case tflite_BuiltinOptions_HardSwishOptions: return 1;
    case tflite_BuiltinOptions_IfOptions: return 1;
    case tflite_BuiltinOptions_WhileOptions: return 1;
    case tflite_BuiltinOptions_DepthToSpaceOptions: return 1;
    case tflite_BuiltinOptions_NonMaxSuppressionV4Options: return 1;
    case tflite_BuiltinOptions_NonMaxSuppressionV5Options: return 1;
    case tflite_BuiltinOptions_ScatterNdOptions: return 1;
    case tflite_BuiltinOptions_SelectV2Options: return 1;
    case tflite_BuiltinOptions_DensifyOptions: return 1;
    case tflite_BuiltinOptions_SegmentSumOptions: return 1;
    default: return 0;
    }
}


struct tflite_Conv2DOptions_table { uint8_t unused__; };

static inline size_t tflite_Conv2DOptions_vec_len(tflite_Conv2DOptions_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_Conv2DOptions_table_t tflite_Conv2DOptions_vec_at(tflite_Conv2DOptions_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_Conv2DOptions_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_Conv2DOptions)

__flatbuffers_define_scalar_field(0, tflite_Conv2DOptions, padding, tflite_Padding, tflite_Padding_enum_t, INT8_C(0))
__flatbuffers_define_scalar_field(1, tflite_Conv2DOptions, stride_w, flatbuffers_int32, int32_t, INT32_C(0))
__flatbuffers_define_scalar_field(2, tflite_Conv2DOptions, stride_h, flatbuffers_int32, int32_t, INT32_C(0))
__flatbuffers_define_scalar_field(3, tflite_Conv2DOptions, fused_activation_function, tflite_ActivationFunctionType, tflite_ActivationFunctionType_enum_t, INT8_C(0))
__flatbuffers_define_scalar_field(4, tflite_Conv2DOptions, dilation_w_factor, flatbuffers_int32, int32_t, INT32_C(1))
__flatbuffers_define_scalar_field(5, tflite_Conv2DOptions, dilation_h_factor, flatbuffers_int32, int32_t, INT32_C(1))

struct tflite_Pool2DOptions_table { uint8_t unused__; };

static inline size_t tflite_Pool2DOptions_vec_len(tflite_Pool2DOptions_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_Pool2DOptions_table_t tflite_Pool2DOptions_vec_at(tflite_Pool2DOptions_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_Pool2DOptions_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_Pool2DOptions)

__flatbuffers_define_scalar_field(0, tflite_Pool2DOptions, padding, tflite_Padding, tflite_Padding_enum_t, INT8_C(0))
__flatbuffers_define_scalar_field(1, tflite_Pool2DOptions, stride_w, flatbuffers_int32, int32_t, INT32_C(0))
__flatbuffers_define_scalar_field(2, tflite_Pool2DOptions, stride_h, flatbuffers_int32, int32_t, INT32_C(0))
__flatbuffers_define_scalar_field(3, tflite_Pool2DOptions, filter_width, flatbuffers_int32, int32_t, INT32_C(0))
__flatbuffers_define_scalar_field(4, tflite_Pool2DOptions, filter_height, flatbuffers_int32, int32_t, INT32_C(0))
__flatbuffers_define_scalar_field(5, tflite_Pool2DOptions, fused_activation_function, tflite_ActivationFunctionType, tflite_ActivationFunctionType_enum_t, INT8_C(0))

struct tflite_DepthwiseConv2DOptions_table { uint8_t unused__; };

static inline size_t tflite_DepthwiseConv2DOptions_vec_len(tflite_DepthwiseConv2DOptions_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_DepthwiseConv2DOptions_table_t tflite_DepthwiseConv2DOptions_vec_at(tflite_DepthwiseConv2DOptions_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_DepthwiseConv2DOptions_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_DepthwiseConv2DOptions)

__flatbuffers_define_scalar_field(0, tflite_DepthwiseConv2DOptions, padding, tflite_Padding, tflite_Padding_enum_t, INT8_C(0))
__flatbuffers_define_scalar_field(1, tflite_DepthwiseConv2DOptions, stride_w, flatbuffers_int32, int32_t, INT32_C(0))
__flatbuffers_define_scalar_field(2, tflite_DepthwiseConv2DOptions, stride_h, flatbuffers_int32, int32_t, INT32_C(0))
__flatbuffers_define_scalar_field(3, tflite_DepthwiseConv2DOptions, depth_multiplier, flatbuffers_int32, int32_t, INT32_C(0))
__flatbuffers_define_scalar_field(4, tflite_DepthwiseConv2DOptions, fused_activation_function, tflite_ActivationFunctionType, tflite_ActivationFunctionType_enum_t, INT8_C(0))
__flatbuffers_define_scalar_field(5, tflite_DepthwiseConv2DOptions, dilation_w_factor, flatbuffers_int32, int32_t, INT32_C(1))
__flatbuffers_define_scalar_field(6, tflite_DepthwiseConv2DOptions, dilation_h_factor, flatbuffers_int32, int32_t, INT32_C(1))

struct tflite_ConcatEmbeddingsOptions_table { uint8_t unused__; };

static inline size_t tflite_ConcatEmbeddingsOptions_vec_len(tflite_ConcatEmbeddingsOptions_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_ConcatEmbeddingsOptions_table_t tflite_ConcatEmbeddingsOptions_vec_at(tflite_ConcatEmbeddingsOptions_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_ConcatEmbeddingsOptions_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_ConcatEmbeddingsOptions)

__flatbuffers_define_scalar_field(0, tflite_ConcatEmbeddingsOptions, num_channels, flatbuffers_int32, int32_t, INT32_C(0))
__flatbuffers_define_vector_field(1, tflite_ConcatEmbeddingsOptions, num_columns_per_channel, flatbuffers_int32_vec_t, 0)
__flatbuffers_define_vector_field(2, tflite_ConcatEmbeddingsOptions, embedding_dim_per_channel, flatbuffers_int32_vec_t, 0)

struct tflite_LSHProjectionOptions_table { uint8_t unused__; };

static inline size_t tflite_LSHProjectionOptions_vec_len(tflite_LSHProjectionOptions_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_LSHProjectionOptions_table_t tflite_LSHProjectionOptions_vec_at(tflite_LSHProjectionOptions_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_LSHProjectionOptions_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_LSHProjectionOptions)

__flatbuffers_define_scalar_field(0, tflite_LSHProjectionOptions, type, tflite_LSHProjectionType, tflite_LSHProjectionType_enum_t, INT8_C(0))

struct tflite_SVDFOptions_table { uint8_t unused__; };

static inline size_t tflite_SVDFOptions_vec_len(tflite_SVDFOptions_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_SVDFOptions_table_t tflite_SVDFOptions_vec_at(tflite_SVDFOptions_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_SVDFOptions_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_SVDFOptions)

__flatbuffers_define_scalar_field(0, tflite_SVDFOptions, rank, flatbuffers_int32, int32_t, INT32_C(0))
__flatbuffers_define_scalar_field(1, tflite_SVDFOptions, fused_activation_function, tflite_ActivationFunctionType, tflite_ActivationFunctionType_enum_t, INT8_C(0))

struct tflite_RNNOptions_table { uint8_t unused__; };

static inline size_t tflite_RNNOptions_vec_len(tflite_RNNOptions_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_RNNOptions_table_t tflite_RNNOptions_vec_at(tflite_RNNOptions_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_RNNOptions_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_RNNOptions)

__flatbuffers_define_scalar_field(0, tflite_RNNOptions, fused_activation_function, tflite_ActivationFunctionType, tflite_ActivationFunctionType_enum_t, INT8_C(0))

struct tflite_SequenceRNNOptions_table { uint8_t unused__; };

static inline size_t tflite_SequenceRNNOptions_vec_len(tflite_SequenceRNNOptions_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_SequenceRNNOptions_table_t tflite_SequenceRNNOptions_vec_at(tflite_SequenceRNNOptions_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_SequenceRNNOptions_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_SequenceRNNOptions)

__flatbuffers_define_scalar_field(0, tflite_SequenceRNNOptions, time_major, flatbuffers_bool, flatbuffers_bool_t, UINT8_C(0))
__flatbuffers_define_scalar_field(1, tflite_SequenceRNNOptions, fused_activation_function, tflite_ActivationFunctionType, tflite_ActivationFunctionType_enum_t, INT8_C(0))

struct tflite_BidirectionalSequenceRNNOptions_table { uint8_t unused__; };

static inline size_t tflite_BidirectionalSequenceRNNOptions_vec_len(tflite_BidirectionalSequenceRNNOptions_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_BidirectionalSequenceRNNOptions_table_t tflite_BidirectionalSequenceRNNOptions_vec_at(tflite_BidirectionalSequenceRNNOptions_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_BidirectionalSequenceRNNOptions_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_BidirectionalSequenceRNNOptions)

__flatbuffers_define_scalar_field(0, tflite_BidirectionalSequenceRNNOptions, time_major, flatbuffers_bool, flatbuffers_bool_t, UINT8_C(0))
__flatbuffers_define_scalar_field(1, tflite_BidirectionalSequenceRNNOptions, fused_activation_function, tflite_ActivationFunctionType, tflite_ActivationFunctionType_enum_t, INT8_C(0))
__flatbuffers_define_scalar_field(2, tflite_BidirectionalSequenceRNNOptions, merge_outputs, flatbuffers_bool, flatbuffers_bool_t, UINT8_C(0))

struct tflite_FullyConnectedOptions_table { uint8_t unused__; };

static inline size_t tflite_FullyConnectedOptions_vec_len(tflite_FullyConnectedOptions_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_FullyConnectedOptions_table_t tflite_FullyConnectedOptions_vec_at(tflite_FullyConnectedOptions_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_FullyConnectedOptions_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_FullyConnectedOptions)

__flatbuffers_define_scalar_field(0, tflite_FullyConnectedOptions, fused_activation_function, tflite_ActivationFunctionType, tflite_ActivationFunctionType_enum_t, INT8_C(0))
__flatbuffers_define_scalar_field(1, tflite_FullyConnectedOptions, weights_format, tflite_FullyConnectedOptionsWeightsFormat, tflite_FullyConnectedOptionsWeightsFormat_enum_t, INT8_C(0))
__flatbuffers_define_scalar_field(2, tflite_FullyConnectedOptions, keep_num_dims, flatbuffers_bool, flatbuffers_bool_t, UINT8_C(0))

struct tflite_SoftmaxOptions_table { uint8_t unused__; };

static inline size_t tflite_SoftmaxOptions_vec_len(tflite_SoftmaxOptions_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_SoftmaxOptions_table_t tflite_SoftmaxOptions_vec_at(tflite_SoftmaxOptions_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_SoftmaxOptions_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_SoftmaxOptions)

__flatbuffers_define_scalar_field(0, tflite_SoftmaxOptions, beta, flatbuffers_float, float, 0.00000000f)

struct tflite_ConcatenationOptions_table { uint8_t unused__; };

static inline size_t tflite_ConcatenationOptions_vec_len(tflite_ConcatenationOptions_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_ConcatenationOptions_table_t tflite_ConcatenationOptions_vec_at(tflite_ConcatenationOptions_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_ConcatenationOptions_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_ConcatenationOptions)

__flatbuffers_define_scalar_field(0, tflite_ConcatenationOptions, axis, flatbuffers_int32, int32_t, INT32_C(0))
__flatbuffers_define_scalar_field(1, tflite_ConcatenationOptions, fused_activation_function, tflite_ActivationFunctionType, tflite_ActivationFunctionType_enum_t, INT8_C(0))

struct tflite_AddOptions_table { uint8_t unused__; };

static inline size_t tflite_AddOptions_vec_len(tflite_AddOptions_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_AddOptions_table_t tflite_AddOptions_vec_at(tflite_AddOptions_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_AddOptions_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_AddOptions)

__flatbuffers_define_scalar_field(0, tflite_AddOptions, fused_activation_function, tflite_ActivationFunctionType, tflite_ActivationFunctionType_enum_t, INT8_C(0))

struct tflite_MulOptions_table { uint8_t unused__; };

static inline size_t tflite_MulOptions_vec_len(tflite_MulOptions_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_MulOptions_table_t tflite_MulOptions_vec_at(tflite_MulOptions_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_MulOptions_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_MulOptions)

__flatbuffers_define_scalar_field(0, tflite_MulOptions, fused_activation_function, tflite_ActivationFunctionType, tflite_ActivationFunctionType_enum_t, INT8_C(0))

struct tflite_L2NormOptions_table { uint8_t unused__; };

static inline size_t tflite_L2NormOptions_vec_len(tflite_L2NormOptions_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_L2NormOptions_table_t tflite_L2NormOptions_vec_at(tflite_L2NormOptions_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_L2NormOptions_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_L2NormOptions)

__flatbuffers_define_scalar_field(0, tflite_L2NormOptions, fused_activation_function, tflite_ActivationFunctionType, tflite_ActivationFunctionType_enum_t, INT8_C(0))

struct tflite_LocalResponseNormalizationOptions_table { uint8_t unused__; };

static inline size_t tflite_LocalResponseNormalizationOptions_vec_len(tflite_LocalResponseNormalizationOptions_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_LocalResponseNormalizationOptions_table_t tflite_LocalResponseNormalizationOptions_vec_at(tflite_LocalResponseNormalizationOptions_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_LocalResponseNormalizationOptions_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_LocalResponseNormalizationOptions)

__flatbuffers_define_scalar_field(0, tflite_LocalResponseNormalizationOptions, radius, flatbuffers_int32, int32_t, INT32_C(0))
__flatbuffers_define_scalar_field(1, tflite_LocalResponseNormalizationOptions, bias, flatbuffers_float, float, 0.00000000f)
__flatbuffers_define_scalar_field(2, tflite_LocalResponseNormalizationOptions, alpha, flatbuffers_float, float, 0.00000000f)
__flatbuffers_define_scalar_field(3, tflite_LocalResponseNormalizationOptions, beta, flatbuffers_float, float, 0.00000000f)

struct tflite_LSTMOptions_table { uint8_t unused__; };

static inline size_t tflite_LSTMOptions_vec_len(tflite_LSTMOptions_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_LSTMOptions_table_t tflite_LSTMOptions_vec_at(tflite_LSTMOptions_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_LSTMOptions_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_LSTMOptions)

__flatbuffers_define_scalar_field(0, tflite_LSTMOptions, fused_activation_function, tflite_ActivationFunctionType, tflite_ActivationFunctionType_enum_t, INT8_C(0))
__flatbuffers_define_scalar_field(1, tflite_LSTMOptions, cell_clip, flatbuffers_float, float, 0.00000000f)
__flatbuffers_define_scalar_field(2, tflite_LSTMOptions, proj_clip, flatbuffers_float, float, 0.00000000f)
__flatbuffers_define_scalar_field(3, tflite_LSTMOptions, kernel_type, tflite_LSTMKernelType, tflite_LSTMKernelType_enum_t, INT8_C(0))

struct tflite_UnidirectionalSequenceLSTMOptions_table { uint8_t unused__; };

static inline size_t tflite_UnidirectionalSequenceLSTMOptions_vec_len(tflite_UnidirectionalSequenceLSTMOptions_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_UnidirectionalSequenceLSTMOptions_table_t tflite_UnidirectionalSequenceLSTMOptions_vec_at(tflite_UnidirectionalSequenceLSTMOptions_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_UnidirectionalSequenceLSTMOptions_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_UnidirectionalSequenceLSTMOptions)

__flatbuffers_define_scalar_field(0, tflite_UnidirectionalSequenceLSTMOptions, fused_activation_function, tflite_ActivationFunctionType, tflite_ActivationFunctionType_enum_t, INT8_C(0))
__flatbuffers_define_scalar_field(1, tflite_UnidirectionalSequenceLSTMOptions, cell_clip, flatbuffers_float, float, 0.00000000f)
__flatbuffers_define_scalar_field(2, tflite_UnidirectionalSequenceLSTMOptions, proj_clip, flatbuffers_float, float, 0.00000000f)
__flatbuffers_define_scalar_field(3, tflite_UnidirectionalSequenceLSTMOptions, time_major, flatbuffers_bool, flatbuffers_bool_t, UINT8_C(0))

struct tflite_BidirectionalSequenceLSTMOptions_table { uint8_t unused__; };

static inline size_t tflite_BidirectionalSequenceLSTMOptions_vec_len(tflite_BidirectionalSequenceLSTMOptions_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_BidirectionalSequenceLSTMOptions_table_t tflite_BidirectionalSequenceLSTMOptions_vec_at(tflite_BidirectionalSequenceLSTMOptions_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_BidirectionalSequenceLSTMOptions_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_BidirectionalSequenceLSTMOptions)

__flatbuffers_define_scalar_field(0, tflite_BidirectionalSequenceLSTMOptions, fused_activation_function, tflite_ActivationFunctionType, tflite_ActivationFunctionType_enum_t, INT8_C(0))
__flatbuffers_define_scalar_field(1, tflite_BidirectionalSequenceLSTMOptions, cell_clip, flatbuffers_float, float, 0.00000000f)
__flatbuffers_define_scalar_field(2, tflite_BidirectionalSequenceLSTMOptions, proj_clip, flatbuffers_float, float, 0.00000000f)
__flatbuffers_define_scalar_field(3, tflite_BidirectionalSequenceLSTMOptions, merge_outputs, flatbuffers_bool, flatbuffers_bool_t, UINT8_C(0))
__flatbuffers_define_scalar_field(4, tflite_BidirectionalSequenceLSTMOptions, time_major, flatbuffers_bool, flatbuffers_bool_t, UINT8_C(1))

struct tflite_ResizeBilinearOptions_table { uint8_t unused__; };

static inline size_t tflite_ResizeBilinearOptions_vec_len(tflite_ResizeBilinearOptions_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_ResizeBilinearOptions_table_t tflite_ResizeBilinearOptions_vec_at(tflite_ResizeBilinearOptions_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_ResizeBilinearOptions_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_ResizeBilinearOptions)

/* Skipping deprecated field: 'tflite_ResizeBilinearOptions_new_height' */

/* Skipping deprecated field: 'tflite_ResizeBilinearOptions_new_width' */

__flatbuffers_define_scalar_field(2, tflite_ResizeBilinearOptions, align_corners, flatbuffers_bool, flatbuffers_bool_t, UINT8_C(0))
__flatbuffers_define_scalar_field(3, tflite_ResizeBilinearOptions, half_pixel_centers, flatbuffers_bool, flatbuffers_bool_t, UINT8_C(0))

struct tflite_ResizeNearestNeighborOptions_table { uint8_t unused__; };

static inline size_t tflite_ResizeNearestNeighborOptions_vec_len(tflite_ResizeNearestNeighborOptions_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_ResizeNearestNeighborOptions_table_t tflite_ResizeNearestNeighborOptions_vec_at(tflite_ResizeNearestNeighborOptions_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_ResizeNearestNeighborOptions_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_ResizeNearestNeighborOptions)

__flatbuffers_define_scalar_field(0, tflite_ResizeNearestNeighborOptions, align_corners, flatbuffers_bool, flatbuffers_bool_t, UINT8_C(0))

struct tflite_CallOptions_table { uint8_t unused__; };

static inline size_t tflite_CallOptions_vec_len(tflite_CallOptions_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_CallOptions_table_t tflite_CallOptions_vec_at(tflite_CallOptions_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_CallOptions_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_CallOptions)

__flatbuffers_define_scalar_field(0, tflite_CallOptions, subgraph, flatbuffers_uint32, uint32_t, UINT32_C(0))

struct tflite_PadOptions_table { uint8_t unused__; };

static inline size_t tflite_PadOptions_vec_len(tflite_PadOptions_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_PadOptions_table_t tflite_PadOptions_vec_at(tflite_PadOptions_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_PadOptions_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_PadOptions)


struct tflite_PadV2Options_table { uint8_t unused__; };

static inline size_t tflite_PadV2Options_vec_len(tflite_PadV2Options_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_PadV2Options_table_t tflite_PadV2Options_vec_at(tflite_PadV2Options_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_PadV2Options_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_PadV2Options)


struct tflite_ReshapeOptions_table { uint8_t unused__; };

static inline size_t tflite_ReshapeOptions_vec_len(tflite_ReshapeOptions_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_ReshapeOptions_table_t tflite_ReshapeOptions_vec_at(tflite_ReshapeOptions_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_ReshapeOptions_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_ReshapeOptions)

__flatbuffers_define_vector_field(0, tflite_ReshapeOptions, new_shape, flatbuffers_int32_vec_t, 0)

struct tflite_SpaceToBatchNDOptions_table { uint8_t unused__; };

static inline size_t tflite_SpaceToBatchNDOptions_vec_len(tflite_SpaceToBatchNDOptions_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_SpaceToBatchNDOptions_table_t tflite_SpaceToBatchNDOptions_vec_at(tflite_SpaceToBatchNDOptions_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_SpaceToBatchNDOptions_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_SpaceToBatchNDOptions)


struct tflite_BatchToSpaceNDOptions_table { uint8_t unused__; };

static inline size_t tflite_BatchToSpaceNDOptions_vec_len(tflite_BatchToSpaceNDOptions_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_BatchToSpaceNDOptions_table_t tflite_BatchToSpaceNDOptions_vec_at(tflite_BatchToSpaceNDOptions_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_BatchToSpaceNDOptions_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_BatchToSpaceNDOptions)


struct tflite_SkipGramOptions_table { uint8_t unused__; };

static inline size_t tflite_SkipGramOptions_vec_len(tflite_SkipGramOptions_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_SkipGramOptions_table_t tflite_SkipGramOptions_vec_at(tflite_SkipGramOptions_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_SkipGramOptions_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_SkipGramOptions)

__flatbuffers_define_scalar_field(0, tflite_SkipGramOptions, ngram_size, flatbuffers_int32, int32_t, INT32_C(0))
__flatbuffers_define_scalar_field(1, tflite_SkipGramOptions, max_skip_size, flatbuffers_int32, int32_t, INT32_C(0))
__flatbuffers_define_scalar_field(2, tflite_SkipGramOptions, include_all_ngrams, flatbuffers_bool, flatbuffers_bool_t, UINT8_C(0))

struct tflite_SpaceToDepthOptions_table { uint8_t unused__; };

static inline size_t tflite_SpaceToDepthOptions_vec_len(tflite_SpaceToDepthOptions_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_SpaceToDepthOptions_table_t tflite_SpaceToDepthOptions_vec_at(tflite_SpaceToDepthOptions_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_SpaceToDepthOptions_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_SpaceToDepthOptions)

__flatbuffers_define_scalar_field(0, tflite_SpaceToDepthOptions, block_size, flatbuffers_int32, int32_t, INT32_C(0))

struct tflite_DepthToSpaceOptions_table { uint8_t unused__; };

static inline size_t tflite_DepthToSpaceOptions_vec_len(tflite_DepthToSpaceOptions_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_DepthToSpaceOptions_table_t tflite_DepthToSpaceOptions_vec_at(tflite_DepthToSpaceOptions_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_DepthToSpaceOptions_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_DepthToSpaceOptions)

__flatbuffers_define_scalar_field(0, tflite_DepthToSpaceOptions, block_size, flatbuffers_int32, int32_t, INT32_C(0))

struct tflite_SubOptions_table { uint8_t unused__; };

static inline size_t tflite_SubOptions_vec_len(tflite_SubOptions_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_SubOptions_table_t tflite_SubOptions_vec_at(tflite_SubOptions_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_SubOptions_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_SubOptions)

__flatbuffers_define_scalar_field(0, tflite_SubOptions, fused_activation_function, tflite_ActivationFunctionType, tflite_ActivationFunctionType_enum_t, INT8_C(0))

struct tflite_DivOptions_table { uint8_t unused__; };

static inline size_t tflite_DivOptions_vec_len(tflite_DivOptions_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_DivOptions_table_t tflite_DivOptions_vec_at(tflite_DivOptions_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_DivOptions_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_DivOptions)

__flatbuffers_define_scalar_field(0, tflite_DivOptions, fused_activation_function, tflite_ActivationFunctionType, tflite_ActivationFunctionType_enum_t, INT8_C(0))

struct tflite_TopKV2Options_table { uint8_t unused__; };

static inline size_t tflite_TopKV2Options_vec_len(tflite_TopKV2Options_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_TopKV2Options_table_t tflite_TopKV2Options_vec_at(tflite_TopKV2Options_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_TopKV2Options_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_TopKV2Options)


struct tflite_EmbeddingLookupSparseOptions_table { uint8_t unused__; };

static inline size_t tflite_EmbeddingLookupSparseOptions_vec_len(tflite_EmbeddingLookupSparseOptions_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_EmbeddingLookupSparseOptions_table_t tflite_EmbeddingLookupSparseOptions_vec_at(tflite_EmbeddingLookupSparseOptions_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_EmbeddingLookupSparseOptions_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_EmbeddingLookupSparseOptions)

__flatbuffers_define_scalar_field(0, tflite_EmbeddingLookupSparseOptions, combiner, tflite_CombinerType, tflite_CombinerType_enum_t, INT8_C(0))

struct tflite_GatherOptions_table { uint8_t unused__; };

static inline size_t tflite_GatherOptions_vec_len(tflite_GatherOptions_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_GatherOptions_table_t tflite_GatherOptions_vec_at(tflite_GatherOptions_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_GatherOptions_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_GatherOptions)

__flatbuffers_define_scalar_field(0, tflite_GatherOptions, axis, flatbuffers_int32, int32_t, INT32_C(0))

struct tflite_TransposeOptions_table { uint8_t unused__; };

static inline size_t tflite_TransposeOptions_vec_len(tflite_TransposeOptions_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_TransposeOptions_table_t tflite_TransposeOptions_vec_at(tflite_TransposeOptions_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_TransposeOptions_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_TransposeOptions)


struct tflite_ExpOptions_table { uint8_t unused__; };

static inline size_t tflite_ExpOptions_vec_len(tflite_ExpOptions_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_ExpOptions_table_t tflite_ExpOptions_vec_at(tflite_ExpOptions_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_ExpOptions_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_ExpOptions)


struct tflite_CosOptions_table { uint8_t unused__; };

static inline size_t tflite_CosOptions_vec_len(tflite_CosOptions_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_CosOptions_table_t tflite_CosOptions_vec_at(tflite_CosOptions_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_CosOptions_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_CosOptions)


struct tflite_ReducerOptions_table { uint8_t unused__; };

static inline size_t tflite_ReducerOptions_vec_len(tflite_ReducerOptions_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_ReducerOptions_table_t tflite_ReducerOptions_vec_at(tflite_ReducerOptions_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_ReducerOptions_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_ReducerOptions)

__flatbuffers_define_scalar_field(0, tflite_ReducerOptions, keep_dims, flatbuffers_bool, flatbuffers_bool_t, UINT8_C(0))

struct tflite_SqueezeOptions_table { uint8_t unused__; };

static inline size_t tflite_SqueezeOptions_vec_len(tflite_SqueezeOptions_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_SqueezeOptions_table_t tflite_SqueezeOptions_vec_at(tflite_SqueezeOptions_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_SqueezeOptions_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_SqueezeOptions)

__flatbuffers_define_vector_field(0, tflite_SqueezeOptions, squeeze_dims, flatbuffers_int32_vec_t, 0)

struct tflite_SplitOptions_table { uint8_t unused__; };

static inline size_t tflite_SplitOptions_vec_len(tflite_SplitOptions_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_SplitOptions_table_t tflite_SplitOptions_vec_at(tflite_SplitOptions_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_SplitOptions_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_SplitOptions)

__flatbuffers_define_scalar_field(0, tflite_SplitOptions, num_splits, flatbuffers_int32, int32_t, INT32_C(0))

struct tflite_SplitVOptions_table { uint8_t unused__; };

static inline size_t tflite_SplitVOptions_vec_len(tflite_SplitVOptions_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_SplitVOptions_table_t tflite_SplitVOptions_vec_at(tflite_SplitVOptions_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_SplitVOptions_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_SplitVOptions)

__flatbuffers_define_scalar_field(0, tflite_SplitVOptions, num_splits, flatbuffers_int32, int32_t, INT32_C(0))

struct tflite_StridedSliceOptions_table { uint8_t unused__; };

static inline size_t tflite_StridedSliceOptions_vec_len(tflite_StridedSliceOptions_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_StridedSliceOptions_table_t tflite_StridedSliceOptions_vec_at(tflite_StridedSliceOptions_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_StridedSliceOptions_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_StridedSliceOptions)

__flatbuffers_define_scalar_field(0, tflite_StridedSliceOptions, begin_mask, flatbuffers_int32, int32_t, INT32_C(0))
__flatbuffers_define_scalar_field(1, tflite_StridedSliceOptions, end_mask, flatbuffers_int32, int32_t, INT32_C(0))
__flatbuffers_define_scalar_field(2, tflite_StridedSliceOptions, ellipsis_mask, flatbuffers_int32, int32_t, INT32_C(0))
__flatbuffers_define_scalar_field(3, tflite_StridedSliceOptions, new_axis_mask, flatbuffers_int32, int32_t, INT32_C(0))
__flatbuffers_define_scalar_field(4, tflite_StridedSliceOptions, shrink_axis_mask, flatbuffers_int32, int32_t, INT32_C(0))

struct tflite_LogSoftmaxOptions_table { uint8_t unused__; };

static inline size_t tflite_LogSoftmaxOptions_vec_len(tflite_LogSoftmaxOptions_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_LogSoftmaxOptions_table_t tflite_LogSoftmaxOptions_vec_at(tflite_LogSoftmaxOptions_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_LogSoftmaxOptions_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_LogSoftmaxOptions)


struct tflite_CastOptions_table { uint8_t unused__; };

static inline size_t tflite_CastOptions_vec_len(tflite_CastOptions_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_CastOptions_table_t tflite_CastOptions_vec_at(tflite_CastOptions_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_CastOptions_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_CastOptions)

__flatbuffers_define_scalar_field(0, tflite_CastOptions, in_data_type, tflite_TensorType, tflite_TensorType_enum_t, INT8_C(0))
__flatbuffers_define_scalar_field(1, tflite_CastOptions, out_data_type, tflite_TensorType, tflite_TensorType_enum_t, INT8_C(0))

struct tflite_DequantizeOptions_table { uint8_t unused__; };

static inline size_t tflite_DequantizeOptions_vec_len(tflite_DequantizeOptions_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_DequantizeOptions_table_t tflite_DequantizeOptions_vec_at(tflite_DequantizeOptions_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_DequantizeOptions_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_DequantizeOptions)


struct tflite_MaximumMinimumOptions_table { uint8_t unused__; };

static inline size_t tflite_MaximumMinimumOptions_vec_len(tflite_MaximumMinimumOptions_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_MaximumMinimumOptions_table_t tflite_MaximumMinimumOptions_vec_at(tflite_MaximumMinimumOptions_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_MaximumMinimumOptions_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_MaximumMinimumOptions)


struct tflite_TileOptions_table { uint8_t unused__; };

static inline size_t tflite_TileOptions_vec_len(tflite_TileOptions_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_TileOptions_table_t tflite_TileOptions_vec_at(tflite_TileOptions_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_TileOptions_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_TileOptions)


struct tflite_ArgMaxOptions_table { uint8_t unused__; };

static inline size_t tflite_ArgMaxOptions_vec_len(tflite_ArgMaxOptions_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_ArgMaxOptions_table_t tflite_ArgMaxOptions_vec_at(tflite_ArgMaxOptions_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_ArgMaxOptions_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_ArgMaxOptions)

__flatbuffers_define_scalar_field(0, tflite_ArgMaxOptions, output_type, tflite_TensorType, tflite_TensorType_enum_t, INT8_C(0))

struct tflite_ArgMinOptions_table { uint8_t unused__; };

static inline size_t tflite_ArgMinOptions_vec_len(tflite_ArgMinOptions_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_ArgMinOptions_table_t tflite_ArgMinOptions_vec_at(tflite_ArgMinOptions_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_ArgMinOptions_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_ArgMinOptions)

__flatbuffers_define_scalar_field(0, tflite_ArgMinOptions, output_type, tflite_TensorType, tflite_TensorType_enum_t, INT8_C(0))

struct tflite_GreaterOptions_table { uint8_t unused__; };

static inline size_t tflite_GreaterOptions_vec_len(tflite_GreaterOptions_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_GreaterOptions_table_t tflite_GreaterOptions_vec_at(tflite_GreaterOptions_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_GreaterOptions_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_GreaterOptions)


struct tflite_GreaterEqualOptions_table { uint8_t unused__; };

static inline size_t tflite_GreaterEqualOptions_vec_len(tflite_GreaterEqualOptions_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_GreaterEqualOptions_table_t tflite_GreaterEqualOptions_vec_at(tflite_GreaterEqualOptions_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_GreaterEqualOptions_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_GreaterEqualOptions)


struct tflite_LessOptions_table { uint8_t unused__; };

static inline size_t tflite_LessOptions_vec_len(tflite_LessOptions_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_LessOptions_table_t tflite_LessOptions_vec_at(tflite_LessOptions_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_LessOptions_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_LessOptions)


struct tflite_LessEqualOptions_table { uint8_t unused__; };

static inline size_t tflite_LessEqualOptions_vec_len(tflite_LessEqualOptions_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_LessEqualOptions_table_t tflite_LessEqualOptions_vec_at(tflite_LessEqualOptions_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_LessEqualOptions_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_LessEqualOptions)


struct tflite_NegOptions_table { uint8_t unused__; };

static inline size_t tflite_NegOptions_vec_len(tflite_NegOptions_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_NegOptions_table_t tflite_NegOptions_vec_at(tflite_NegOptions_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_NegOptions_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_NegOptions)


struct tflite_SelectOptions_table { uint8_t unused__; };

static inline size_t tflite_SelectOptions_vec_len(tflite_SelectOptions_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_SelectOptions_table_t tflite_SelectOptions_vec_at(tflite_SelectOptions_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_SelectOptions_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_SelectOptions)


struct tflite_SliceOptions_table { uint8_t unused__; };

static inline size_t tflite_SliceOptions_vec_len(tflite_SliceOptions_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_SliceOptions_table_t tflite_SliceOptions_vec_at(tflite_SliceOptions_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_SliceOptions_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_SliceOptions)


struct tflite_TransposeConvOptions_table { uint8_t unused__; };

static inline size_t tflite_TransposeConvOptions_vec_len(tflite_TransposeConvOptions_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_TransposeConvOptions_table_t tflite_TransposeConvOptions_vec_at(tflite_TransposeConvOptions_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_TransposeConvOptions_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_TransposeConvOptions)

__flatbuffers_define_scalar_field(0, tflite_TransposeConvOptions, padding, tflite_Padding, tflite_Padding_enum_t, INT8_C(0))
__flatbuffers_define_scalar_field(1, tflite_TransposeConvOptions, stride_w, flatbuffers_int32, int32_t, INT32_C(0))
__flatbuffers_define_scalar_field(2, tflite_TransposeConvOptions, stride_h, flatbuffers_int32, int32_t, INT32_C(0))

struct tflite_ExpandDimsOptions_table { uint8_t unused__; };

static inline size_t tflite_ExpandDimsOptions_vec_len(tflite_ExpandDimsOptions_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_ExpandDimsOptions_table_t tflite_ExpandDimsOptions_vec_at(tflite_ExpandDimsOptions_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_ExpandDimsOptions_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_ExpandDimsOptions)


struct tflite_SparseToDenseOptions_table { uint8_t unused__; };

static inline size_t tflite_SparseToDenseOptions_vec_len(tflite_SparseToDenseOptions_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_SparseToDenseOptions_table_t tflite_SparseToDenseOptions_vec_at(tflite_SparseToDenseOptions_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_SparseToDenseOptions_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_SparseToDenseOptions)

__flatbuffers_define_scalar_field(0, tflite_SparseToDenseOptions, validate_indices, flatbuffers_bool, flatbuffers_bool_t, UINT8_C(0))

struct tflite_EqualOptions_table { uint8_t unused__; };

static inline size_t tflite_EqualOptions_vec_len(tflite_EqualOptions_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_EqualOptions_table_t tflite_EqualOptions_vec_at(tflite_EqualOptions_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_EqualOptions_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_EqualOptions)


struct tflite_NotEqualOptions_table { uint8_t unused__; };

static inline size_t tflite_NotEqualOptions_vec_len(tflite_NotEqualOptions_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_NotEqualOptions_table_t tflite_NotEqualOptions_vec_at(tflite_NotEqualOptions_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_NotEqualOptions_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_NotEqualOptions)


struct tflite_ShapeOptions_table { uint8_t unused__; };

static inline size_t tflite_ShapeOptions_vec_len(tflite_ShapeOptions_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_ShapeOptions_table_t tflite_ShapeOptions_vec_at(tflite_ShapeOptions_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_ShapeOptions_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_ShapeOptions)

__flatbuffers_define_scalar_field(0, tflite_ShapeOptions, out_type, tflite_TensorType, tflite_TensorType_enum_t, INT8_C(0))

struct tflite_RankOptions_table { uint8_t unused__; };

static inline size_t tflite_RankOptions_vec_len(tflite_RankOptions_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_RankOptions_table_t tflite_RankOptions_vec_at(tflite_RankOptions_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_RankOptions_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_RankOptions)


struct tflite_PowOptions_table { uint8_t unused__; };

static inline size_t tflite_PowOptions_vec_len(tflite_PowOptions_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_PowOptions_table_t tflite_PowOptions_vec_at(tflite_PowOptions_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_PowOptions_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_PowOptions)


struct tflite_FakeQuantOptions_table { uint8_t unused__; };

static inline size_t tflite_FakeQuantOptions_vec_len(tflite_FakeQuantOptions_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_FakeQuantOptions_table_t tflite_FakeQuantOptions_vec_at(tflite_FakeQuantOptions_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_FakeQuantOptions_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_FakeQuantOptions)

__flatbuffers_define_scalar_field(0, tflite_FakeQuantOptions, min, flatbuffers_float, float, 0.00000000f)
__flatbuffers_define_scalar_field(1, tflite_FakeQuantOptions, max, flatbuffers_float, float, 0.00000000f)
__flatbuffers_define_scalar_field(2, tflite_FakeQuantOptions, num_bits, flatbuffers_int32, int32_t, INT32_C(0))
__flatbuffers_define_scalar_field(3, tflite_FakeQuantOptions, narrow_range, flatbuffers_bool, flatbuffers_bool_t, UINT8_C(0))

struct tflite_PackOptions_table { uint8_t unused__; };

static inline size_t tflite_PackOptions_vec_len(tflite_PackOptions_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_PackOptions_table_t tflite_PackOptions_vec_at(tflite_PackOptions_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_PackOptions_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_PackOptions)

__flatbuffers_define_scalar_field(0, tflite_PackOptions, values_count, flatbuffers_int32, int32_t, INT32_C(0))
__flatbuffers_define_scalar_field(1, tflite_PackOptions, axis, flatbuffers_int32, int32_t, INT32_C(0))

struct tflite_LogicalOrOptions_table { uint8_t unused__; };

static inline size_t tflite_LogicalOrOptions_vec_len(tflite_LogicalOrOptions_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_LogicalOrOptions_table_t tflite_LogicalOrOptions_vec_at(tflite_LogicalOrOptions_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_LogicalOrOptions_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_LogicalOrOptions)


struct tflite_OneHotOptions_table { uint8_t unused__; };

static inline size_t tflite_OneHotOptions_vec_len(tflite_OneHotOptions_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_OneHotOptions_table_t tflite_OneHotOptions_vec_at(tflite_OneHotOptions_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_OneHotOptions_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_OneHotOptions)

__flatbuffers_define_scalar_field(0, tflite_OneHotOptions, axis, flatbuffers_int32, int32_t, INT32_C(0))

struct tflite_AbsOptions_table { uint8_t unused__; };

static inline size_t tflite_AbsOptions_vec_len(tflite_AbsOptions_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_AbsOptions_table_t tflite_AbsOptions_vec_at(tflite_AbsOptions_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_AbsOptions_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_AbsOptions)


struct tflite_HardSwishOptions_table { uint8_t unused__; };

static inline size_t tflite_HardSwishOptions_vec_len(tflite_HardSwishOptions_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_HardSwishOptions_table_t tflite_HardSwishOptions_vec_at(tflite_HardSwishOptions_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_HardSwishOptions_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_HardSwishOptions)


struct tflite_LogicalAndOptions_table { uint8_t unused__; };

static inline size_t tflite_LogicalAndOptions_vec_len(tflite_LogicalAndOptions_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_LogicalAndOptions_table_t tflite_LogicalAndOptions_vec_at(tflite_LogicalAndOptions_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_LogicalAndOptions_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_LogicalAndOptions)


struct tflite_LogicalNotOptions_table { uint8_t unused__; };

static inline size_t tflite_LogicalNotOptions_vec_len(tflite_LogicalNotOptions_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_LogicalNotOptions_table_t tflite_LogicalNotOptions_vec_at(tflite_LogicalNotOptions_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_LogicalNotOptions_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_LogicalNotOptions)


struct tflite_UnpackOptions_table { uint8_t unused__; };

static inline size_t tflite_UnpackOptions_vec_len(tflite_UnpackOptions_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_UnpackOptions_table_t tflite_UnpackOptions_vec_at(tflite_UnpackOptions_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_UnpackOptions_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_UnpackOptions)

__flatbuffers_define_scalar_field(0, tflite_UnpackOptions, num, flatbuffers_int32, int32_t, INT32_C(0))
__flatbuffers_define_scalar_field(1, tflite_UnpackOptions, axis, flatbuffers_int32, int32_t, INT32_C(0))

struct tflite_FloorDivOptions_table { uint8_t unused__; };

static inline size_t tflite_FloorDivOptions_vec_len(tflite_FloorDivOptions_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_FloorDivOptions_table_t tflite_FloorDivOptions_vec_at(tflite_FloorDivOptions_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_FloorDivOptions_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_FloorDivOptions)


struct tflite_SquareOptions_table { uint8_t unused__; };

static inline size_t tflite_SquareOptions_vec_len(tflite_SquareOptions_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_SquareOptions_table_t tflite_SquareOptions_vec_at(tflite_SquareOptions_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_SquareOptions_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_SquareOptions)


struct tflite_ZerosLikeOptions_table { uint8_t unused__; };

static inline size_t tflite_ZerosLikeOptions_vec_len(tflite_ZerosLikeOptions_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_ZerosLikeOptions_table_t tflite_ZerosLikeOptions_vec_at(tflite_ZerosLikeOptions_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_ZerosLikeOptions_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_ZerosLikeOptions)


struct tflite_FillOptions_table { uint8_t unused__; };

static inline size_t tflite_FillOptions_vec_len(tflite_FillOptions_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_FillOptions_table_t tflite_FillOptions_vec_at(tflite_FillOptions_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_FillOptions_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_FillOptions)


struct tflite_FloorModOptions_table { uint8_t unused__; };

static inline size_t tflite_FloorModOptions_vec_len(tflite_FloorModOptions_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_FloorModOptions_table_t tflite_FloorModOptions_vec_at(tflite_FloorModOptions_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_FloorModOptions_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_FloorModOptions)


struct tflite_RangeOptions_table { uint8_t unused__; };

static inline size_t tflite_RangeOptions_vec_len(tflite_RangeOptions_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_RangeOptions_table_t tflite_RangeOptions_vec_at(tflite_RangeOptions_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_RangeOptions_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_RangeOptions)


struct tflite_LeakyReluOptions_table { uint8_t unused__; };

static inline size_t tflite_LeakyReluOptions_vec_len(tflite_LeakyReluOptions_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_LeakyReluOptions_table_t tflite_LeakyReluOptions_vec_at(tflite_LeakyReluOptions_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_LeakyReluOptions_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_LeakyReluOptions)

__flatbuffers_define_scalar_field(0, tflite_LeakyReluOptions, alpha, flatbuffers_float, float, 0.00000000f)

struct tflite_SquaredDifferenceOptions_table { uint8_t unused__; };

static inline size_t tflite_SquaredDifferenceOptions_vec_len(tflite_SquaredDifferenceOptions_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_SquaredDifferenceOptions_table_t tflite_SquaredDifferenceOptions_vec_at(tflite_SquaredDifferenceOptions_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_SquaredDifferenceOptions_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_SquaredDifferenceOptions)


struct tflite_MirrorPadOptions_table { uint8_t unused__; };

static inline size_t tflite_MirrorPadOptions_vec_len(tflite_MirrorPadOptions_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_MirrorPadOptions_table_t tflite_MirrorPadOptions_vec_at(tflite_MirrorPadOptions_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_MirrorPadOptions_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_MirrorPadOptions)

__flatbuffers_define_scalar_field(0, tflite_MirrorPadOptions, mode, tflite_MirrorPadMode, tflite_MirrorPadMode_enum_t, INT8_C(0))

struct tflite_UniqueOptions_table { uint8_t unused__; };

static inline size_t tflite_UniqueOptions_vec_len(tflite_UniqueOptions_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_UniqueOptions_table_t tflite_UniqueOptions_vec_at(tflite_UniqueOptions_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_UniqueOptions_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_UniqueOptions)

__flatbuffers_define_scalar_field(0, tflite_UniqueOptions, idx_out_type, tflite_TensorType, tflite_TensorType_enum_t, INT8_C(2))

struct tflite_ReverseV2Options_table { uint8_t unused__; };

static inline size_t tflite_ReverseV2Options_vec_len(tflite_ReverseV2Options_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_ReverseV2Options_table_t tflite_ReverseV2Options_vec_at(tflite_ReverseV2Options_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_ReverseV2Options_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_ReverseV2Options)


struct tflite_AddNOptions_table { uint8_t unused__; };

static inline size_t tflite_AddNOptions_vec_len(tflite_AddNOptions_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_AddNOptions_table_t tflite_AddNOptions_vec_at(tflite_AddNOptions_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_AddNOptions_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_AddNOptions)


struct tflite_GatherNdOptions_table { uint8_t unused__; };

static inline size_t tflite_GatherNdOptions_vec_len(tflite_GatherNdOptions_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_GatherNdOptions_table_t tflite_GatherNdOptions_vec_at(tflite_GatherNdOptions_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_GatherNdOptions_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_GatherNdOptions)


struct tflite_WhereOptions_table { uint8_t unused__; };

static inline size_t tflite_WhereOptions_vec_len(tflite_WhereOptions_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_WhereOptions_table_t tflite_WhereOptions_vec_at(tflite_WhereOptions_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_WhereOptions_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_WhereOptions)


struct tflite_ReverseSequenceOptions_table { uint8_t unused__; };

static inline size_t tflite_ReverseSequenceOptions_vec_len(tflite_ReverseSequenceOptions_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_ReverseSequenceOptions_table_t tflite_ReverseSequenceOptions_vec_at(tflite_ReverseSequenceOptions_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_ReverseSequenceOptions_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_ReverseSequenceOptions)

__flatbuffers_define_scalar_field(0, tflite_ReverseSequenceOptions, seq_dim, flatbuffers_int32, int32_t, INT32_C(0))
__flatbuffers_define_scalar_field(1, tflite_ReverseSequenceOptions, batch_dim, flatbuffers_int32, int32_t, INT32_C(0))

struct tflite_MatrixDiagOptions_table { uint8_t unused__; };

static inline size_t tflite_MatrixDiagOptions_vec_len(tflite_MatrixDiagOptions_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_MatrixDiagOptions_table_t tflite_MatrixDiagOptions_vec_at(tflite_MatrixDiagOptions_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_MatrixDiagOptions_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_MatrixDiagOptions)


struct tflite_QuantizeOptions_table { uint8_t unused__; };

static inline size_t tflite_QuantizeOptions_vec_len(tflite_QuantizeOptions_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_QuantizeOptions_table_t tflite_QuantizeOptions_vec_at(tflite_QuantizeOptions_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_QuantizeOptions_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_QuantizeOptions)


struct tflite_MatrixSetDiagOptions_table { uint8_t unused__; };

static inline size_t tflite_MatrixSetDiagOptions_vec_len(tflite_MatrixSetDiagOptions_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_MatrixSetDiagOptions_table_t tflite_MatrixSetDiagOptions_vec_at(tflite_MatrixSetDiagOptions_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_MatrixSetDiagOptions_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_MatrixSetDiagOptions)


struct tflite_IfOptions_table { uint8_t unused__; };

static inline size_t tflite_IfOptions_vec_len(tflite_IfOptions_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_IfOptions_table_t tflite_IfOptions_vec_at(tflite_IfOptions_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_IfOptions_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_IfOptions)

__flatbuffers_define_scalar_field(0, tflite_IfOptions, then_subgraph_index, flatbuffers_int32, int32_t, INT32_C(0))
__flatbuffers_define_scalar_field(1, tflite_IfOptions, else_subgraph_index, flatbuffers_int32, int32_t, INT32_C(0))

struct tflite_WhileOptions_table { uint8_t unused__; };

static inline size_t tflite_WhileOptions_vec_len(tflite_WhileOptions_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_WhileOptions_table_t tflite_WhileOptions_vec_at(tflite_WhileOptions_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_WhileOptions_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_WhileOptions)

__flatbuffers_define_scalar_field(0, tflite_WhileOptions, cond_subgraph_index, flatbuffers_int32, int32_t, INT32_C(0))
__flatbuffers_define_scalar_field(1, tflite_WhileOptions, body_subgraph_index, flatbuffers_int32, int32_t, INT32_C(0))

struct tflite_NonMaxSuppressionV4Options_table { uint8_t unused__; };

static inline size_t tflite_NonMaxSuppressionV4Options_vec_len(tflite_NonMaxSuppressionV4Options_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_NonMaxSuppressionV4Options_table_t tflite_NonMaxSuppressionV4Options_vec_at(tflite_NonMaxSuppressionV4Options_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_NonMaxSuppressionV4Options_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_NonMaxSuppressionV4Options)


struct tflite_NonMaxSuppressionV5Options_table { uint8_t unused__; };

static inline size_t tflite_NonMaxSuppressionV5Options_vec_len(tflite_NonMaxSuppressionV5Options_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_NonMaxSuppressionV5Options_table_t tflite_NonMaxSuppressionV5Options_vec_at(tflite_NonMaxSuppressionV5Options_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_NonMaxSuppressionV5Options_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_NonMaxSuppressionV5Options)


struct tflite_ScatterNdOptions_table { uint8_t unused__; };

static inline size_t tflite_ScatterNdOptions_vec_len(tflite_ScatterNdOptions_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_ScatterNdOptions_table_t tflite_ScatterNdOptions_vec_at(tflite_ScatterNdOptions_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_ScatterNdOptions_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_ScatterNdOptions)


struct tflite_SelectV2Options_table { uint8_t unused__; };

static inline size_t tflite_SelectV2Options_vec_len(tflite_SelectV2Options_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_SelectV2Options_table_t tflite_SelectV2Options_vec_at(tflite_SelectV2Options_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_SelectV2Options_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_SelectV2Options)


struct tflite_DensifyOptions_table { uint8_t unused__; };

static inline size_t tflite_DensifyOptions_vec_len(tflite_DensifyOptions_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_DensifyOptions_table_t tflite_DensifyOptions_vec_at(tflite_DensifyOptions_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_DensifyOptions_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_DensifyOptions)


struct tflite_SegmentSumOptions_table { uint8_t unused__; };

static inline size_t tflite_SegmentSumOptions_vec_len(tflite_SegmentSumOptions_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_SegmentSumOptions_table_t tflite_SegmentSumOptions_vec_at(tflite_SegmentSumOptions_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_SegmentSumOptions_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_SegmentSumOptions)


struct tflite_OperatorCode_table { uint8_t unused__; };

static inline size_t tflite_OperatorCode_vec_len(tflite_OperatorCode_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_OperatorCode_table_t tflite_OperatorCode_vec_at(tflite_OperatorCode_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_OperatorCode_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_OperatorCode)

__flatbuffers_define_scalar_field(0, tflite_OperatorCode, builtin_code, tflite_BuiltinOperator, tflite_BuiltinOperator_enum_t, INT8_C(0))
__flatbuffers_define_string_field(1, tflite_OperatorCode, custom_code, 0)
__flatbuffers_define_scalar_field(2, tflite_OperatorCode, version, flatbuffers_int32, int32_t, INT32_C(1))

struct tflite_Operator_table { uint8_t unused__; };

static inline size_t tflite_Operator_vec_len(tflite_Operator_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_Operator_table_t tflite_Operator_vec_at(tflite_Operator_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_Operator_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_Operator)

__flatbuffers_define_scalar_field(0, tflite_Operator, opcode_index, flatbuffers_uint32, uint32_t, UINT32_C(0))
__flatbuffers_define_vector_field(1, tflite_Operator, inputs, flatbuffers_int32_vec_t, 0)
__flatbuffers_define_vector_field(2, tflite_Operator, outputs, flatbuffers_int32_vec_t, 0)
__flatbuffers_define_union_field(flatbuffers_, 4, tflite_Operator, builtin_options, tflite_BuiltinOptions, 0)
__flatbuffers_define_vector_field(5, tflite_Operator, custom_options, flatbuffers_uint8_vec_t, 0)
__flatbuffers_define_scalar_field(6, tflite_Operator, custom_options_format, tflite_CustomOptionsFormat, tflite_CustomOptionsFormat_enum_t, INT8_C(0))
__flatbuffers_define_vector_field(7, tflite_Operator, mutating_variable_inputs, flatbuffers_uint8_vec_t, 0)
__flatbuffers_define_vector_field(8, tflite_Operator, intermediates, flatbuffers_int32_vec_t, 0)

struct tflite_SubGraph_table { uint8_t unused__; };

static inline size_t tflite_SubGraph_vec_len(tflite_SubGraph_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_SubGraph_table_t tflite_SubGraph_vec_at(tflite_SubGraph_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_SubGraph_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_SubGraph)

__flatbuffers_define_vector_field(0, tflite_SubGraph, tensors, tflite_Tensor_vec_t, 0)
__flatbuffers_define_vector_field(1, tflite_SubGraph, inputs, flatbuffers_int32_vec_t, 0)
__flatbuffers_define_vector_field(2, tflite_SubGraph, outputs, flatbuffers_int32_vec_t, 0)
__flatbuffers_define_vector_field(3, tflite_SubGraph, operators, tflite_Operator_vec_t, 0)
__flatbuffers_define_string_field(4, tflite_SubGraph, name, 0)

struct tflite_Buffer_table { uint8_t unused__; };

static inline size_t tflite_Buffer_vec_len(tflite_Buffer_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_Buffer_table_t tflite_Buffer_vec_at(tflite_Buffer_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_Buffer_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_Buffer)

__flatbuffers_define_vector_field(0, tflite_Buffer, data, flatbuffers_uint8_vec_t, 0)

struct tflite_Metadata_table { uint8_t unused__; };

static inline size_t tflite_Metadata_vec_len(tflite_Metadata_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_Metadata_table_t tflite_Metadata_vec_at(tflite_Metadata_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_Metadata_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_Metadata)

__flatbuffers_define_string_field(0, tflite_Metadata, name, 0)
__flatbuffers_define_scalar_field(1, tflite_Metadata, buffer, flatbuffers_uint32, uint32_t, UINT32_C(0))

struct tflite_Model_table { uint8_t unused__; };

static inline size_t tflite_Model_vec_len(tflite_Model_vec_t vec)
__flatbuffers_vec_len(vec)
static inline tflite_Model_table_t tflite_Model_vec_at(tflite_Model_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(tflite_Model_table_t, vec, i, 0)
__flatbuffers_table_as_root(tflite_Model)

__flatbuffers_define_scalar_field(0, tflite_Model, version, flatbuffers_uint32, uint32_t, UINT32_C(0))
__flatbuffers_define_vector_field(1, tflite_Model, operator_codes, tflite_OperatorCode_vec_t, 0)
__flatbuffers_define_vector_field(2, tflite_Model, subgraphs, tflite_SubGraph_vec_t, 0)
__flatbuffers_define_string_field(3, tflite_Model, description, 0)
__flatbuffers_define_vector_field(4, tflite_Model, buffers, tflite_Buffer_vec_t, 0)
__flatbuffers_define_vector_field(5, tflite_Model, metadata_buffer, flatbuffers_int32_vec_t, 0)
__flatbuffers_define_vector_field(6, tflite_Model, metadata, tflite_Metadata_vec_t, 0)


#include "flatcc/flatcc_epilogue.h"
#endif /* SCHEMA_NO_FORCE_ALIGN_READER_H */
#ifndef SCHEMA_NO_FORCE_ALIGN_BUILDER_H
#define SCHEMA_NO_FORCE_ALIGN_BUILDER_H

/* Generated by flatcc 0.6.1-dev FlatBuffers schema compiler for C by dvide.com */

#ifndef SCHEMA_NO_FORCE_ALIGN_READER_H
#include "schema_no_force_align_reader.h"
#endif
#ifndef FLATBUFFERS_COMMON_BUILDER_H
#include "flatbuffers_common_builder.h"
#endif
#include "flatcc/flatcc_prologue.h"
#undef flatbuffers_identifier
#define flatbuffers_identifier "TFL3"
#undef flatbuffers_extension
#define flatbuffers_extension ".tflite"

#define __tflite_TensorType_formal_args , tflite_TensorType_enum_t v0
#define __tflite_TensorType_call_args , v0
__flatbuffers_build_scalar(flatbuffers_, tflite_TensorType, tflite_TensorType_enum_t)
#define __tflite_DimensionType_formal_args , tflite_DimensionType_enum_t v0
#define __tflite_DimensionType_call_args , v0
__flatbuffers_build_scalar(flatbuffers_, tflite_DimensionType, tflite_DimensionType_enum_t)
#define __tflite_BuiltinOperator_formal_args , tflite_BuiltinOperator_enum_t v0
#define __tflite_BuiltinOperator_call_args , v0
__flatbuffers_build_scalar(flatbuffers_, tflite_BuiltinOperator, tflite_BuiltinOperator_enum_t)
#define __tflite_Padding_formal_args , tflite_Padding_enum_t v0
#define __tflite_Padding_call_args , v0
__flatbuffers_build_scalar(flatbuffers_, tflite_Padding, tflite_Padding_enum_t)
#define __tflite_ActivationFunctionType_formal_args , tflite_ActivationFunctionType_enum_t v0
#define __tflite_ActivationFunctionType_call_args , v0
__flatbuffers_build_scalar(flatbuffers_, tflite_ActivationFunctionType, tflite_ActivationFunctionType_enum_t)
#define __tflite_LSHProjectionType_formal_args , tflite_LSHProjectionType_enum_t v0
#define __tflite_LSHProjectionType_call_args , v0
__flatbuffers_build_scalar(flatbuffers_, tflite_LSHProjectionType, tflite_LSHProjectionType_enum_t)
#define __tflite_FullyConnectedOptionsWeightsFormat_formal_args , tflite_FullyConnectedOptionsWeightsFormat_enum_t v0
#define __tflite_FullyConnectedOptionsWeightsFormat_call_args , v0
__flatbuffers_build_scalar(flatbuffers_, tflite_FullyConnectedOptionsWeightsFormat, tflite_FullyConnectedOptionsWeightsFormat_enum_t)
#define __tflite_LSTMKernelType_formal_args , tflite_LSTMKernelType_enum_t v0
#define __tflite_LSTMKernelType_call_args , v0
__flatbuffers_build_scalar(flatbuffers_, tflite_LSTMKernelType, tflite_LSTMKernelType_enum_t)
#define __tflite_CombinerType_formal_args , tflite_CombinerType_enum_t v0
#define __tflite_CombinerType_call_args , v0
__flatbuffers_build_scalar(flatbuffers_, tflite_CombinerType, tflite_CombinerType_enum_t)
#define __tflite_MirrorPadMode_formal_args , tflite_MirrorPadMode_enum_t v0
#define __tflite_MirrorPadMode_call_args , v0
__flatbuffers_build_scalar(flatbuffers_, tflite_MirrorPadMode, tflite_MirrorPadMode_enum_t)
#define __tflite_CustomOptionsFormat_formal_args , tflite_CustomOptionsFormat_enum_t v0
#define __tflite_CustomOptionsFormat_call_args , v0
__flatbuffers_build_scalar(flatbuffers_, tflite_CustomOptionsFormat, tflite_CustomOptionsFormat_enum_t)

typedef flatbuffers_union_ref_t tflite_QuantizationDetails_union_ref_t;
typedef flatbuffers_union_vec_ref_t tflite_QuantizationDetails_union_vec_ref_t;
static tflite_QuantizationDetails_union_ref_t tflite_QuantizationDetails_clone(flatbuffers_builder_t *B, tflite_QuantizationDetails_union_t t);
typedef flatbuffers_union_ref_t tflite_SparseIndexVector_union_ref_t;
typedef flatbuffers_union_vec_ref_t tflite_SparseIndexVector_union_vec_ref_t;
static tflite_SparseIndexVector_union_ref_t tflite_SparseIndexVector_clone(flatbuffers_builder_t *B, tflite_SparseIndexVector_union_t t);
typedef flatbuffers_union_ref_t tflite_BuiltinOptions_union_ref_t;
typedef flatbuffers_union_vec_ref_t tflite_BuiltinOptions_union_vec_ref_t;
static tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_clone(flatbuffers_builder_t *B, tflite_BuiltinOptions_union_t t);

static const flatbuffers_voffset_t __tflite_CustomQuantization_required[] = { 0 };
typedef flatbuffers_ref_t tflite_CustomQuantization_ref_t;
static tflite_CustomQuantization_ref_t tflite_CustomQuantization_clone(flatbuffers_builder_t *B, tflite_CustomQuantization_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_CustomQuantization, 1)

static const flatbuffers_voffset_t __tflite_QuantizationParameters_required[] = { 0 };
typedef flatbuffers_ref_t tflite_QuantizationParameters_ref_t;
static tflite_QuantizationParameters_ref_t tflite_QuantizationParameters_clone(flatbuffers_builder_t *B, tflite_QuantizationParameters_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_QuantizationParameters, 7)

static const flatbuffers_voffset_t __tflite_Int32Vector_required[] = { 0 };
typedef flatbuffers_ref_t tflite_Int32Vector_ref_t;
static tflite_Int32Vector_ref_t tflite_Int32Vector_clone(flatbuffers_builder_t *B, tflite_Int32Vector_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_Int32Vector, 1)

static const flatbuffers_voffset_t __tflite_Uint16Vector_required[] = { 0 };
typedef flatbuffers_ref_t tflite_Uint16Vector_ref_t;
static tflite_Uint16Vector_ref_t tflite_Uint16Vector_clone(flatbuffers_builder_t *B, tflite_Uint16Vector_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_Uint16Vector, 1)

static const flatbuffers_voffset_t __tflite_Uint8Vector_required[] = { 0 };
typedef flatbuffers_ref_t tflite_Uint8Vector_ref_t;
static tflite_Uint8Vector_ref_t tflite_Uint8Vector_clone(flatbuffers_builder_t *B, tflite_Uint8Vector_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_Uint8Vector, 1)

static const flatbuffers_voffset_t __tflite_DimensionMetadata_required[] = { 0 };
typedef flatbuffers_ref_t tflite_DimensionMetadata_ref_t;
static tflite_DimensionMetadata_ref_t tflite_DimensionMetadata_clone(flatbuffers_builder_t *B, tflite_DimensionMetadata_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_DimensionMetadata, 6)

static const flatbuffers_voffset_t __tflite_SparsityParameters_required[] = { 0 };
typedef flatbuffers_ref_t tflite_SparsityParameters_ref_t;
static tflite_SparsityParameters_ref_t tflite_SparsityParameters_clone(flatbuffers_builder_t *B, tflite_SparsityParameters_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_SparsityParameters, 3)

static const flatbuffers_voffset_t __tflite_Tensor_required[] = { 0 };
typedef flatbuffers_ref_t tflite_Tensor_ref_t;
static tflite_Tensor_ref_t tflite_Tensor_clone(flatbuffers_builder_t *B, tflite_Tensor_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_Tensor, 8)

static const flatbuffers_voffset_t __tflite_Conv2DOptions_required[] = { 0 };
typedef flatbuffers_ref_t tflite_Conv2DOptions_ref_t;
static tflite_Conv2DOptions_ref_t tflite_Conv2DOptions_clone(flatbuffers_builder_t *B, tflite_Conv2DOptions_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_Conv2DOptions, 6)

static const flatbuffers_voffset_t __tflite_Pool2DOptions_required[] = { 0 };
typedef flatbuffers_ref_t tflite_Pool2DOptions_ref_t;
static tflite_Pool2DOptions_ref_t tflite_Pool2DOptions_clone(flatbuffers_builder_t *B, tflite_Pool2DOptions_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_Pool2DOptions, 6)

static const flatbuffers_voffset_t __tflite_DepthwiseConv2DOptions_required[] = { 0 };
typedef flatbuffers_ref_t tflite_DepthwiseConv2DOptions_ref_t;
static tflite_DepthwiseConv2DOptions_ref_t tflite_DepthwiseConv2DOptions_clone(flatbuffers_builder_t *B, tflite_DepthwiseConv2DOptions_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_DepthwiseConv2DOptions, 7)

static const flatbuffers_voffset_t __tflite_ConcatEmbeddingsOptions_required[] = { 0 };
typedef flatbuffers_ref_t tflite_ConcatEmbeddingsOptions_ref_t;
static tflite_ConcatEmbeddingsOptions_ref_t tflite_ConcatEmbeddingsOptions_clone(flatbuffers_builder_t *B, tflite_ConcatEmbeddingsOptions_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_ConcatEmbeddingsOptions, 3)

static const flatbuffers_voffset_t __tflite_LSHProjectionOptions_required[] = { 0 };
typedef flatbuffers_ref_t tflite_LSHProjectionOptions_ref_t;
static tflite_LSHProjectionOptions_ref_t tflite_LSHProjectionOptions_clone(flatbuffers_builder_t *B, tflite_LSHProjectionOptions_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_LSHProjectionOptions, 1)

static const flatbuffers_voffset_t __tflite_SVDFOptions_required[] = { 0 };
typedef flatbuffers_ref_t tflite_SVDFOptions_ref_t;
static tflite_SVDFOptions_ref_t tflite_SVDFOptions_clone(flatbuffers_builder_t *B, tflite_SVDFOptions_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_SVDFOptions, 2)

static const flatbuffers_voffset_t __tflite_RNNOptions_required[] = { 0 };
typedef flatbuffers_ref_t tflite_RNNOptions_ref_t;
static tflite_RNNOptions_ref_t tflite_RNNOptions_clone(flatbuffers_builder_t *B, tflite_RNNOptions_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_RNNOptions, 1)

static const flatbuffers_voffset_t __tflite_SequenceRNNOptions_required[] = { 0 };
typedef flatbuffers_ref_t tflite_SequenceRNNOptions_ref_t;
static tflite_SequenceRNNOptions_ref_t tflite_SequenceRNNOptions_clone(flatbuffers_builder_t *B, tflite_SequenceRNNOptions_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_SequenceRNNOptions, 2)

static const flatbuffers_voffset_t __tflite_BidirectionalSequenceRNNOptions_required[] = { 0 };
typedef flatbuffers_ref_t tflite_BidirectionalSequenceRNNOptions_ref_t;
static tflite_BidirectionalSequenceRNNOptions_ref_t tflite_BidirectionalSequenceRNNOptions_clone(flatbuffers_builder_t *B, tflite_BidirectionalSequenceRNNOptions_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_BidirectionalSequenceRNNOptions, 3)

static const flatbuffers_voffset_t __tflite_FullyConnectedOptions_required[] = { 0 };
typedef flatbuffers_ref_t tflite_FullyConnectedOptions_ref_t;
static tflite_FullyConnectedOptions_ref_t tflite_FullyConnectedOptions_clone(flatbuffers_builder_t *B, tflite_FullyConnectedOptions_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_FullyConnectedOptions, 3)

static const flatbuffers_voffset_t __tflite_SoftmaxOptions_required[] = { 0 };
typedef flatbuffers_ref_t tflite_SoftmaxOptions_ref_t;
static tflite_SoftmaxOptions_ref_t tflite_SoftmaxOptions_clone(flatbuffers_builder_t *B, tflite_SoftmaxOptions_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_SoftmaxOptions, 1)

static const flatbuffers_voffset_t __tflite_ConcatenationOptions_required[] = { 0 };
typedef flatbuffers_ref_t tflite_ConcatenationOptions_ref_t;
static tflite_ConcatenationOptions_ref_t tflite_ConcatenationOptions_clone(flatbuffers_builder_t *B, tflite_ConcatenationOptions_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_ConcatenationOptions, 2)

static const flatbuffers_voffset_t __tflite_AddOptions_required[] = { 0 };
typedef flatbuffers_ref_t tflite_AddOptions_ref_t;
static tflite_AddOptions_ref_t tflite_AddOptions_clone(flatbuffers_builder_t *B, tflite_AddOptions_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_AddOptions, 1)

static const flatbuffers_voffset_t __tflite_MulOptions_required[] = { 0 };
typedef flatbuffers_ref_t tflite_MulOptions_ref_t;
static tflite_MulOptions_ref_t tflite_MulOptions_clone(flatbuffers_builder_t *B, tflite_MulOptions_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_MulOptions, 1)

static const flatbuffers_voffset_t __tflite_L2NormOptions_required[] = { 0 };
typedef flatbuffers_ref_t tflite_L2NormOptions_ref_t;
static tflite_L2NormOptions_ref_t tflite_L2NormOptions_clone(flatbuffers_builder_t *B, tflite_L2NormOptions_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_L2NormOptions, 1)

static const flatbuffers_voffset_t __tflite_LocalResponseNormalizationOptions_required[] = { 0 };
typedef flatbuffers_ref_t tflite_LocalResponseNormalizationOptions_ref_t;
static tflite_LocalResponseNormalizationOptions_ref_t tflite_LocalResponseNormalizationOptions_clone(flatbuffers_builder_t *B, tflite_LocalResponseNormalizationOptions_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_LocalResponseNormalizationOptions, 4)

static const flatbuffers_voffset_t __tflite_LSTMOptions_required[] = { 0 };
typedef flatbuffers_ref_t tflite_LSTMOptions_ref_t;
static tflite_LSTMOptions_ref_t tflite_LSTMOptions_clone(flatbuffers_builder_t *B, tflite_LSTMOptions_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_LSTMOptions, 4)

static const flatbuffers_voffset_t __tflite_UnidirectionalSequenceLSTMOptions_required[] = { 0 };
typedef flatbuffers_ref_t tflite_UnidirectionalSequenceLSTMOptions_ref_t;
static tflite_UnidirectionalSequenceLSTMOptions_ref_t tflite_UnidirectionalSequenceLSTMOptions_clone(flatbuffers_builder_t *B, tflite_UnidirectionalSequenceLSTMOptions_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_UnidirectionalSequenceLSTMOptions, 4)

static const flatbuffers_voffset_t __tflite_BidirectionalSequenceLSTMOptions_required[] = { 0 };
typedef flatbuffers_ref_t tflite_BidirectionalSequenceLSTMOptions_ref_t;
static tflite_BidirectionalSequenceLSTMOptions_ref_t tflite_BidirectionalSequenceLSTMOptions_clone(flatbuffers_builder_t *B, tflite_BidirectionalSequenceLSTMOptions_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_BidirectionalSequenceLSTMOptions, 5)

static const flatbuffers_voffset_t __tflite_ResizeBilinearOptions_required[] = { 0 };
typedef flatbuffers_ref_t tflite_ResizeBilinearOptions_ref_t;
static tflite_ResizeBilinearOptions_ref_t tflite_ResizeBilinearOptions_clone(flatbuffers_builder_t *B, tflite_ResizeBilinearOptions_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_ResizeBilinearOptions, 4)

static const flatbuffers_voffset_t __tflite_ResizeNearestNeighborOptions_required[] = { 0 };
typedef flatbuffers_ref_t tflite_ResizeNearestNeighborOptions_ref_t;
static tflite_ResizeNearestNeighborOptions_ref_t tflite_ResizeNearestNeighborOptions_clone(flatbuffers_builder_t *B, tflite_ResizeNearestNeighborOptions_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_ResizeNearestNeighborOptions, 1)

static const flatbuffers_voffset_t __tflite_CallOptions_required[] = { 0 };
typedef flatbuffers_ref_t tflite_CallOptions_ref_t;
static tflite_CallOptions_ref_t tflite_CallOptions_clone(flatbuffers_builder_t *B, tflite_CallOptions_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_CallOptions, 1)

static const flatbuffers_voffset_t __tflite_PadOptions_required[] = { 0 };
typedef flatbuffers_ref_t tflite_PadOptions_ref_t;
static tflite_PadOptions_ref_t tflite_PadOptions_clone(flatbuffers_builder_t *B, tflite_PadOptions_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_PadOptions, 0)

static const flatbuffers_voffset_t __tflite_PadV2Options_required[] = { 0 };
typedef flatbuffers_ref_t tflite_PadV2Options_ref_t;
static tflite_PadV2Options_ref_t tflite_PadV2Options_clone(flatbuffers_builder_t *B, tflite_PadV2Options_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_PadV2Options, 0)

static const flatbuffers_voffset_t __tflite_ReshapeOptions_required[] = { 0 };
typedef flatbuffers_ref_t tflite_ReshapeOptions_ref_t;
static tflite_ReshapeOptions_ref_t tflite_ReshapeOptions_clone(flatbuffers_builder_t *B, tflite_ReshapeOptions_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_ReshapeOptions, 1)

static const flatbuffers_voffset_t __tflite_SpaceToBatchNDOptions_required[] = { 0 };
typedef flatbuffers_ref_t tflite_SpaceToBatchNDOptions_ref_t;
static tflite_SpaceToBatchNDOptions_ref_t tflite_SpaceToBatchNDOptions_clone(flatbuffers_builder_t *B, tflite_SpaceToBatchNDOptions_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_SpaceToBatchNDOptions, 0)

static const flatbuffers_voffset_t __tflite_BatchToSpaceNDOptions_required[] = { 0 };
typedef flatbuffers_ref_t tflite_BatchToSpaceNDOptions_ref_t;
static tflite_BatchToSpaceNDOptions_ref_t tflite_BatchToSpaceNDOptions_clone(flatbuffers_builder_t *B, tflite_BatchToSpaceNDOptions_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_BatchToSpaceNDOptions, 0)

static const flatbuffers_voffset_t __tflite_SkipGramOptions_required[] = { 0 };
typedef flatbuffers_ref_t tflite_SkipGramOptions_ref_t;
static tflite_SkipGramOptions_ref_t tflite_SkipGramOptions_clone(flatbuffers_builder_t *B, tflite_SkipGramOptions_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_SkipGramOptions, 3)

static const flatbuffers_voffset_t __tflite_SpaceToDepthOptions_required[] = { 0 };
typedef flatbuffers_ref_t tflite_SpaceToDepthOptions_ref_t;
static tflite_SpaceToDepthOptions_ref_t tflite_SpaceToDepthOptions_clone(flatbuffers_builder_t *B, tflite_SpaceToDepthOptions_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_SpaceToDepthOptions, 1)

static const flatbuffers_voffset_t __tflite_DepthToSpaceOptions_required[] = { 0 };
typedef flatbuffers_ref_t tflite_DepthToSpaceOptions_ref_t;
static tflite_DepthToSpaceOptions_ref_t tflite_DepthToSpaceOptions_clone(flatbuffers_builder_t *B, tflite_DepthToSpaceOptions_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_DepthToSpaceOptions, 1)

static const flatbuffers_voffset_t __tflite_SubOptions_required[] = { 0 };
typedef flatbuffers_ref_t tflite_SubOptions_ref_t;
static tflite_SubOptions_ref_t tflite_SubOptions_clone(flatbuffers_builder_t *B, tflite_SubOptions_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_SubOptions, 1)

static const flatbuffers_voffset_t __tflite_DivOptions_required[] = { 0 };
typedef flatbuffers_ref_t tflite_DivOptions_ref_t;
static tflite_DivOptions_ref_t tflite_DivOptions_clone(flatbuffers_builder_t *B, tflite_DivOptions_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_DivOptions, 1)

static const flatbuffers_voffset_t __tflite_TopKV2Options_required[] = { 0 };
typedef flatbuffers_ref_t tflite_TopKV2Options_ref_t;
static tflite_TopKV2Options_ref_t tflite_TopKV2Options_clone(flatbuffers_builder_t *B, tflite_TopKV2Options_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_TopKV2Options, 0)

static const flatbuffers_voffset_t __tflite_EmbeddingLookupSparseOptions_required[] = { 0 };
typedef flatbuffers_ref_t tflite_EmbeddingLookupSparseOptions_ref_t;
static tflite_EmbeddingLookupSparseOptions_ref_t tflite_EmbeddingLookupSparseOptions_clone(flatbuffers_builder_t *B, tflite_EmbeddingLookupSparseOptions_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_EmbeddingLookupSparseOptions, 1)

static const flatbuffers_voffset_t __tflite_GatherOptions_required[] = { 0 };
typedef flatbuffers_ref_t tflite_GatherOptions_ref_t;
static tflite_GatherOptions_ref_t tflite_GatherOptions_clone(flatbuffers_builder_t *B, tflite_GatherOptions_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_GatherOptions, 1)

static const flatbuffers_voffset_t __tflite_TransposeOptions_required[] = { 0 };
typedef flatbuffers_ref_t tflite_TransposeOptions_ref_t;
static tflite_TransposeOptions_ref_t tflite_TransposeOptions_clone(flatbuffers_builder_t *B, tflite_TransposeOptions_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_TransposeOptions, 0)

static const flatbuffers_voffset_t __tflite_ExpOptions_required[] = { 0 };
typedef flatbuffers_ref_t tflite_ExpOptions_ref_t;
static tflite_ExpOptions_ref_t tflite_ExpOptions_clone(flatbuffers_builder_t *B, tflite_ExpOptions_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_ExpOptions, 0)

static const flatbuffers_voffset_t __tflite_CosOptions_required[] = { 0 };
typedef flatbuffers_ref_t tflite_CosOptions_ref_t;
static tflite_CosOptions_ref_t tflite_CosOptions_clone(flatbuffers_builder_t *B, tflite_CosOptions_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_CosOptions, 0)

static const flatbuffers_voffset_t __tflite_ReducerOptions_required[] = { 0 };
typedef flatbuffers_ref_t tflite_ReducerOptions_ref_t;
static tflite_ReducerOptions_ref_t tflite_ReducerOptions_clone(flatbuffers_builder_t *B, tflite_ReducerOptions_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_ReducerOptions, 1)

static const flatbuffers_voffset_t __tflite_SqueezeOptions_required[] = { 0 };
typedef flatbuffers_ref_t tflite_SqueezeOptions_ref_t;
static tflite_SqueezeOptions_ref_t tflite_SqueezeOptions_clone(flatbuffers_builder_t *B, tflite_SqueezeOptions_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_SqueezeOptions, 1)

static const flatbuffers_voffset_t __tflite_SplitOptions_required[] = { 0 };
typedef flatbuffers_ref_t tflite_SplitOptions_ref_t;
static tflite_SplitOptions_ref_t tflite_SplitOptions_clone(flatbuffers_builder_t *B, tflite_SplitOptions_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_SplitOptions, 1)

static const flatbuffers_voffset_t __tflite_SplitVOptions_required[] = { 0 };
typedef flatbuffers_ref_t tflite_SplitVOptions_ref_t;
static tflite_SplitVOptions_ref_t tflite_SplitVOptions_clone(flatbuffers_builder_t *B, tflite_SplitVOptions_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_SplitVOptions, 1)

static const flatbuffers_voffset_t __tflite_StridedSliceOptions_required[] = { 0 };
typedef flatbuffers_ref_t tflite_StridedSliceOptions_ref_t;
static tflite_StridedSliceOptions_ref_t tflite_StridedSliceOptions_clone(flatbuffers_builder_t *B, tflite_StridedSliceOptions_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_StridedSliceOptions, 5)

static const flatbuffers_voffset_t __tflite_LogSoftmaxOptions_required[] = { 0 };
typedef flatbuffers_ref_t tflite_LogSoftmaxOptions_ref_t;
static tflite_LogSoftmaxOptions_ref_t tflite_LogSoftmaxOptions_clone(flatbuffers_builder_t *B, tflite_LogSoftmaxOptions_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_LogSoftmaxOptions, 0)

static const flatbuffers_voffset_t __tflite_CastOptions_required[] = { 0 };
typedef flatbuffers_ref_t tflite_CastOptions_ref_t;
static tflite_CastOptions_ref_t tflite_CastOptions_clone(flatbuffers_builder_t *B, tflite_CastOptions_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_CastOptions, 2)

static const flatbuffers_voffset_t __tflite_DequantizeOptions_required[] = { 0 };
typedef flatbuffers_ref_t tflite_DequantizeOptions_ref_t;
static tflite_DequantizeOptions_ref_t tflite_DequantizeOptions_clone(flatbuffers_builder_t *B, tflite_DequantizeOptions_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_DequantizeOptions, 0)

static const flatbuffers_voffset_t __tflite_MaximumMinimumOptions_required[] = { 0 };
typedef flatbuffers_ref_t tflite_MaximumMinimumOptions_ref_t;
static tflite_MaximumMinimumOptions_ref_t tflite_MaximumMinimumOptions_clone(flatbuffers_builder_t *B, tflite_MaximumMinimumOptions_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_MaximumMinimumOptions, 0)

static const flatbuffers_voffset_t __tflite_TileOptions_required[] = { 0 };
typedef flatbuffers_ref_t tflite_TileOptions_ref_t;
static tflite_TileOptions_ref_t tflite_TileOptions_clone(flatbuffers_builder_t *B, tflite_TileOptions_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_TileOptions, 0)

static const flatbuffers_voffset_t __tflite_ArgMaxOptions_required[] = { 0 };
typedef flatbuffers_ref_t tflite_ArgMaxOptions_ref_t;
static tflite_ArgMaxOptions_ref_t tflite_ArgMaxOptions_clone(flatbuffers_builder_t *B, tflite_ArgMaxOptions_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_ArgMaxOptions, 1)

static const flatbuffers_voffset_t __tflite_ArgMinOptions_required[] = { 0 };
typedef flatbuffers_ref_t tflite_ArgMinOptions_ref_t;
static tflite_ArgMinOptions_ref_t tflite_ArgMinOptions_clone(flatbuffers_builder_t *B, tflite_ArgMinOptions_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_ArgMinOptions, 1)

static const flatbuffers_voffset_t __tflite_GreaterOptions_required[] = { 0 };
typedef flatbuffers_ref_t tflite_GreaterOptions_ref_t;
static tflite_GreaterOptions_ref_t tflite_GreaterOptions_clone(flatbuffers_builder_t *B, tflite_GreaterOptions_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_GreaterOptions, 0)

static const flatbuffers_voffset_t __tflite_GreaterEqualOptions_required[] = { 0 };
typedef flatbuffers_ref_t tflite_GreaterEqualOptions_ref_t;
static tflite_GreaterEqualOptions_ref_t tflite_GreaterEqualOptions_clone(flatbuffers_builder_t *B, tflite_GreaterEqualOptions_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_GreaterEqualOptions, 0)

static const flatbuffers_voffset_t __tflite_LessOptions_required[] = { 0 };
typedef flatbuffers_ref_t tflite_LessOptions_ref_t;
static tflite_LessOptions_ref_t tflite_LessOptions_clone(flatbuffers_builder_t *B, tflite_LessOptions_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_LessOptions, 0)

static const flatbuffers_voffset_t __tflite_LessEqualOptions_required[] = { 0 };
typedef flatbuffers_ref_t tflite_LessEqualOptions_ref_t;
static tflite_LessEqualOptions_ref_t tflite_LessEqualOptions_clone(flatbuffers_builder_t *B, tflite_LessEqualOptions_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_LessEqualOptions, 0)

static const flatbuffers_voffset_t __tflite_NegOptions_required[] = { 0 };
typedef flatbuffers_ref_t tflite_NegOptions_ref_t;
static tflite_NegOptions_ref_t tflite_NegOptions_clone(flatbuffers_builder_t *B, tflite_NegOptions_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_NegOptions, 0)

static const flatbuffers_voffset_t __tflite_SelectOptions_required[] = { 0 };
typedef flatbuffers_ref_t tflite_SelectOptions_ref_t;
static tflite_SelectOptions_ref_t tflite_SelectOptions_clone(flatbuffers_builder_t *B, tflite_SelectOptions_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_SelectOptions, 0)

static const flatbuffers_voffset_t __tflite_SliceOptions_required[] = { 0 };
typedef flatbuffers_ref_t tflite_SliceOptions_ref_t;
static tflite_SliceOptions_ref_t tflite_SliceOptions_clone(flatbuffers_builder_t *B, tflite_SliceOptions_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_SliceOptions, 0)

static const flatbuffers_voffset_t __tflite_TransposeConvOptions_required[] = { 0 };
typedef flatbuffers_ref_t tflite_TransposeConvOptions_ref_t;
static tflite_TransposeConvOptions_ref_t tflite_TransposeConvOptions_clone(flatbuffers_builder_t *B, tflite_TransposeConvOptions_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_TransposeConvOptions, 3)

static const flatbuffers_voffset_t __tflite_ExpandDimsOptions_required[] = { 0 };
typedef flatbuffers_ref_t tflite_ExpandDimsOptions_ref_t;
static tflite_ExpandDimsOptions_ref_t tflite_ExpandDimsOptions_clone(flatbuffers_builder_t *B, tflite_ExpandDimsOptions_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_ExpandDimsOptions, 0)

static const flatbuffers_voffset_t __tflite_SparseToDenseOptions_required[] = { 0 };
typedef flatbuffers_ref_t tflite_SparseToDenseOptions_ref_t;
static tflite_SparseToDenseOptions_ref_t tflite_SparseToDenseOptions_clone(flatbuffers_builder_t *B, tflite_SparseToDenseOptions_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_SparseToDenseOptions, 1)

static const flatbuffers_voffset_t __tflite_EqualOptions_required[] = { 0 };
typedef flatbuffers_ref_t tflite_EqualOptions_ref_t;
static tflite_EqualOptions_ref_t tflite_EqualOptions_clone(flatbuffers_builder_t *B, tflite_EqualOptions_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_EqualOptions, 0)

static const flatbuffers_voffset_t __tflite_NotEqualOptions_required[] = { 0 };
typedef flatbuffers_ref_t tflite_NotEqualOptions_ref_t;
static tflite_NotEqualOptions_ref_t tflite_NotEqualOptions_clone(flatbuffers_builder_t *B, tflite_NotEqualOptions_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_NotEqualOptions, 0)

static const flatbuffers_voffset_t __tflite_ShapeOptions_required[] = { 0 };
typedef flatbuffers_ref_t tflite_ShapeOptions_ref_t;
static tflite_ShapeOptions_ref_t tflite_ShapeOptions_clone(flatbuffers_builder_t *B, tflite_ShapeOptions_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_ShapeOptions, 1)

static const flatbuffers_voffset_t __tflite_RankOptions_required[] = { 0 };
typedef flatbuffers_ref_t tflite_RankOptions_ref_t;
static tflite_RankOptions_ref_t tflite_RankOptions_clone(flatbuffers_builder_t *B, tflite_RankOptions_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_RankOptions, 0)

static const flatbuffers_voffset_t __tflite_PowOptions_required[] = { 0 };
typedef flatbuffers_ref_t tflite_PowOptions_ref_t;
static tflite_PowOptions_ref_t tflite_PowOptions_clone(flatbuffers_builder_t *B, tflite_PowOptions_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_PowOptions, 0)

static const flatbuffers_voffset_t __tflite_FakeQuantOptions_required[] = { 0 };
typedef flatbuffers_ref_t tflite_FakeQuantOptions_ref_t;
static tflite_FakeQuantOptions_ref_t tflite_FakeQuantOptions_clone(flatbuffers_builder_t *B, tflite_FakeQuantOptions_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_FakeQuantOptions, 4)

static const flatbuffers_voffset_t __tflite_PackOptions_required[] = { 0 };
typedef flatbuffers_ref_t tflite_PackOptions_ref_t;
static tflite_PackOptions_ref_t tflite_PackOptions_clone(flatbuffers_builder_t *B, tflite_PackOptions_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_PackOptions, 2)

static const flatbuffers_voffset_t __tflite_LogicalOrOptions_required[] = { 0 };
typedef flatbuffers_ref_t tflite_LogicalOrOptions_ref_t;
static tflite_LogicalOrOptions_ref_t tflite_LogicalOrOptions_clone(flatbuffers_builder_t *B, tflite_LogicalOrOptions_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_LogicalOrOptions, 0)

static const flatbuffers_voffset_t __tflite_OneHotOptions_required[] = { 0 };
typedef flatbuffers_ref_t tflite_OneHotOptions_ref_t;
static tflite_OneHotOptions_ref_t tflite_OneHotOptions_clone(flatbuffers_builder_t *B, tflite_OneHotOptions_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_OneHotOptions, 1)

static const flatbuffers_voffset_t __tflite_AbsOptions_required[] = { 0 };
typedef flatbuffers_ref_t tflite_AbsOptions_ref_t;
static tflite_AbsOptions_ref_t tflite_AbsOptions_clone(flatbuffers_builder_t *B, tflite_AbsOptions_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_AbsOptions, 0)

static const flatbuffers_voffset_t __tflite_HardSwishOptions_required[] = { 0 };
typedef flatbuffers_ref_t tflite_HardSwishOptions_ref_t;
static tflite_HardSwishOptions_ref_t tflite_HardSwishOptions_clone(flatbuffers_builder_t *B, tflite_HardSwishOptions_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_HardSwishOptions, 0)

static const flatbuffers_voffset_t __tflite_LogicalAndOptions_required[] = { 0 };
typedef flatbuffers_ref_t tflite_LogicalAndOptions_ref_t;
static tflite_LogicalAndOptions_ref_t tflite_LogicalAndOptions_clone(flatbuffers_builder_t *B, tflite_LogicalAndOptions_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_LogicalAndOptions, 0)

static const flatbuffers_voffset_t __tflite_LogicalNotOptions_required[] = { 0 };
typedef flatbuffers_ref_t tflite_LogicalNotOptions_ref_t;
static tflite_LogicalNotOptions_ref_t tflite_LogicalNotOptions_clone(flatbuffers_builder_t *B, tflite_LogicalNotOptions_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_LogicalNotOptions, 0)

static const flatbuffers_voffset_t __tflite_UnpackOptions_required[] = { 0 };
typedef flatbuffers_ref_t tflite_UnpackOptions_ref_t;
static tflite_UnpackOptions_ref_t tflite_UnpackOptions_clone(flatbuffers_builder_t *B, tflite_UnpackOptions_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_UnpackOptions, 2)

static const flatbuffers_voffset_t __tflite_FloorDivOptions_required[] = { 0 };
typedef flatbuffers_ref_t tflite_FloorDivOptions_ref_t;
static tflite_FloorDivOptions_ref_t tflite_FloorDivOptions_clone(flatbuffers_builder_t *B, tflite_FloorDivOptions_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_FloorDivOptions, 0)

static const flatbuffers_voffset_t __tflite_SquareOptions_required[] = { 0 };
typedef flatbuffers_ref_t tflite_SquareOptions_ref_t;
static tflite_SquareOptions_ref_t tflite_SquareOptions_clone(flatbuffers_builder_t *B, tflite_SquareOptions_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_SquareOptions, 0)

static const flatbuffers_voffset_t __tflite_ZerosLikeOptions_required[] = { 0 };
typedef flatbuffers_ref_t tflite_ZerosLikeOptions_ref_t;
static tflite_ZerosLikeOptions_ref_t tflite_ZerosLikeOptions_clone(flatbuffers_builder_t *B, tflite_ZerosLikeOptions_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_ZerosLikeOptions, 0)

static const flatbuffers_voffset_t __tflite_FillOptions_required[] = { 0 };
typedef flatbuffers_ref_t tflite_FillOptions_ref_t;
static tflite_FillOptions_ref_t tflite_FillOptions_clone(flatbuffers_builder_t *B, tflite_FillOptions_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_FillOptions, 0)

static const flatbuffers_voffset_t __tflite_FloorModOptions_required[] = { 0 };
typedef flatbuffers_ref_t tflite_FloorModOptions_ref_t;
static tflite_FloorModOptions_ref_t tflite_FloorModOptions_clone(flatbuffers_builder_t *B, tflite_FloorModOptions_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_FloorModOptions, 0)

static const flatbuffers_voffset_t __tflite_RangeOptions_required[] = { 0 };
typedef flatbuffers_ref_t tflite_RangeOptions_ref_t;
static tflite_RangeOptions_ref_t tflite_RangeOptions_clone(flatbuffers_builder_t *B, tflite_RangeOptions_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_RangeOptions, 0)

static const flatbuffers_voffset_t __tflite_LeakyReluOptions_required[] = { 0 };
typedef flatbuffers_ref_t tflite_LeakyReluOptions_ref_t;
static tflite_LeakyReluOptions_ref_t tflite_LeakyReluOptions_clone(flatbuffers_builder_t *B, tflite_LeakyReluOptions_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_LeakyReluOptions, 1)

static const flatbuffers_voffset_t __tflite_SquaredDifferenceOptions_required[] = { 0 };
typedef flatbuffers_ref_t tflite_SquaredDifferenceOptions_ref_t;
static tflite_SquaredDifferenceOptions_ref_t tflite_SquaredDifferenceOptions_clone(flatbuffers_builder_t *B, tflite_SquaredDifferenceOptions_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_SquaredDifferenceOptions, 0)

static const flatbuffers_voffset_t __tflite_MirrorPadOptions_required[] = { 0 };
typedef flatbuffers_ref_t tflite_MirrorPadOptions_ref_t;
static tflite_MirrorPadOptions_ref_t tflite_MirrorPadOptions_clone(flatbuffers_builder_t *B, tflite_MirrorPadOptions_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_MirrorPadOptions, 1)

static const flatbuffers_voffset_t __tflite_UniqueOptions_required[] = { 0 };
typedef flatbuffers_ref_t tflite_UniqueOptions_ref_t;
static tflite_UniqueOptions_ref_t tflite_UniqueOptions_clone(flatbuffers_builder_t *B, tflite_UniqueOptions_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_UniqueOptions, 1)

static const flatbuffers_voffset_t __tflite_ReverseV2Options_required[] = { 0 };
typedef flatbuffers_ref_t tflite_ReverseV2Options_ref_t;
static tflite_ReverseV2Options_ref_t tflite_ReverseV2Options_clone(flatbuffers_builder_t *B, tflite_ReverseV2Options_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_ReverseV2Options, 0)

static const flatbuffers_voffset_t __tflite_AddNOptions_required[] = { 0 };
typedef flatbuffers_ref_t tflite_AddNOptions_ref_t;
static tflite_AddNOptions_ref_t tflite_AddNOptions_clone(flatbuffers_builder_t *B, tflite_AddNOptions_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_AddNOptions, 0)

static const flatbuffers_voffset_t __tflite_GatherNdOptions_required[] = { 0 };
typedef flatbuffers_ref_t tflite_GatherNdOptions_ref_t;
static tflite_GatherNdOptions_ref_t tflite_GatherNdOptions_clone(flatbuffers_builder_t *B, tflite_GatherNdOptions_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_GatherNdOptions, 0)

static const flatbuffers_voffset_t __tflite_WhereOptions_required[] = { 0 };
typedef flatbuffers_ref_t tflite_WhereOptions_ref_t;
static tflite_WhereOptions_ref_t tflite_WhereOptions_clone(flatbuffers_builder_t *B, tflite_WhereOptions_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_WhereOptions, 0)

static const flatbuffers_voffset_t __tflite_ReverseSequenceOptions_required[] = { 0 };
typedef flatbuffers_ref_t tflite_ReverseSequenceOptions_ref_t;
static tflite_ReverseSequenceOptions_ref_t tflite_ReverseSequenceOptions_clone(flatbuffers_builder_t *B, tflite_ReverseSequenceOptions_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_ReverseSequenceOptions, 2)

static const flatbuffers_voffset_t __tflite_MatrixDiagOptions_required[] = { 0 };
typedef flatbuffers_ref_t tflite_MatrixDiagOptions_ref_t;
static tflite_MatrixDiagOptions_ref_t tflite_MatrixDiagOptions_clone(flatbuffers_builder_t *B, tflite_MatrixDiagOptions_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_MatrixDiagOptions, 0)

static const flatbuffers_voffset_t __tflite_QuantizeOptions_required[] = { 0 };
typedef flatbuffers_ref_t tflite_QuantizeOptions_ref_t;
static tflite_QuantizeOptions_ref_t tflite_QuantizeOptions_clone(flatbuffers_builder_t *B, tflite_QuantizeOptions_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_QuantizeOptions, 0)

static const flatbuffers_voffset_t __tflite_MatrixSetDiagOptions_required[] = { 0 };
typedef flatbuffers_ref_t tflite_MatrixSetDiagOptions_ref_t;
static tflite_MatrixSetDiagOptions_ref_t tflite_MatrixSetDiagOptions_clone(flatbuffers_builder_t *B, tflite_MatrixSetDiagOptions_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_MatrixSetDiagOptions, 0)

static const flatbuffers_voffset_t __tflite_IfOptions_required[] = { 0 };
typedef flatbuffers_ref_t tflite_IfOptions_ref_t;
static tflite_IfOptions_ref_t tflite_IfOptions_clone(flatbuffers_builder_t *B, tflite_IfOptions_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_IfOptions, 2)

static const flatbuffers_voffset_t __tflite_WhileOptions_required[] = { 0 };
typedef flatbuffers_ref_t tflite_WhileOptions_ref_t;
static tflite_WhileOptions_ref_t tflite_WhileOptions_clone(flatbuffers_builder_t *B, tflite_WhileOptions_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_WhileOptions, 2)

static const flatbuffers_voffset_t __tflite_NonMaxSuppressionV4Options_required[] = { 0 };
typedef flatbuffers_ref_t tflite_NonMaxSuppressionV4Options_ref_t;
static tflite_NonMaxSuppressionV4Options_ref_t tflite_NonMaxSuppressionV4Options_clone(flatbuffers_builder_t *B, tflite_NonMaxSuppressionV4Options_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_NonMaxSuppressionV4Options, 0)

static const flatbuffers_voffset_t __tflite_NonMaxSuppressionV5Options_required[] = { 0 };
typedef flatbuffers_ref_t tflite_NonMaxSuppressionV5Options_ref_t;
static tflite_NonMaxSuppressionV5Options_ref_t tflite_NonMaxSuppressionV5Options_clone(flatbuffers_builder_t *B, tflite_NonMaxSuppressionV5Options_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_NonMaxSuppressionV5Options, 0)

static const flatbuffers_voffset_t __tflite_ScatterNdOptions_required[] = { 0 };
typedef flatbuffers_ref_t tflite_ScatterNdOptions_ref_t;
static tflite_ScatterNdOptions_ref_t tflite_ScatterNdOptions_clone(flatbuffers_builder_t *B, tflite_ScatterNdOptions_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_ScatterNdOptions, 0)

static const flatbuffers_voffset_t __tflite_SelectV2Options_required[] = { 0 };
typedef flatbuffers_ref_t tflite_SelectV2Options_ref_t;
static tflite_SelectV2Options_ref_t tflite_SelectV2Options_clone(flatbuffers_builder_t *B, tflite_SelectV2Options_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_SelectV2Options, 0)

static const flatbuffers_voffset_t __tflite_DensifyOptions_required[] = { 0 };
typedef flatbuffers_ref_t tflite_DensifyOptions_ref_t;
static tflite_DensifyOptions_ref_t tflite_DensifyOptions_clone(flatbuffers_builder_t *B, tflite_DensifyOptions_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_DensifyOptions, 0)

static const flatbuffers_voffset_t __tflite_SegmentSumOptions_required[] = { 0 };
typedef flatbuffers_ref_t tflite_SegmentSumOptions_ref_t;
static tflite_SegmentSumOptions_ref_t tflite_SegmentSumOptions_clone(flatbuffers_builder_t *B, tflite_SegmentSumOptions_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_SegmentSumOptions, 0)

static const flatbuffers_voffset_t __tflite_OperatorCode_required[] = { 0 };
typedef flatbuffers_ref_t tflite_OperatorCode_ref_t;
static tflite_OperatorCode_ref_t tflite_OperatorCode_clone(flatbuffers_builder_t *B, tflite_OperatorCode_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_OperatorCode, 3)

static const flatbuffers_voffset_t __tflite_Operator_required[] = { 0 };
typedef flatbuffers_ref_t tflite_Operator_ref_t;
static tflite_Operator_ref_t tflite_Operator_clone(flatbuffers_builder_t *B, tflite_Operator_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_Operator, 9)

static const flatbuffers_voffset_t __tflite_SubGraph_required[] = { 0 };
typedef flatbuffers_ref_t tflite_SubGraph_ref_t;
static tflite_SubGraph_ref_t tflite_SubGraph_clone(flatbuffers_builder_t *B, tflite_SubGraph_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_SubGraph, 5)

static const flatbuffers_voffset_t __tflite_Buffer_required[] = { 0 };
typedef flatbuffers_ref_t tflite_Buffer_ref_t;
static tflite_Buffer_ref_t tflite_Buffer_clone(flatbuffers_builder_t *B, tflite_Buffer_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_Buffer, 1)

static const flatbuffers_voffset_t __tflite_Metadata_required[] = { 0 };
typedef flatbuffers_ref_t tflite_Metadata_ref_t;
static tflite_Metadata_ref_t tflite_Metadata_clone(flatbuffers_builder_t *B, tflite_Metadata_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_Metadata, 2)

static const flatbuffers_voffset_t __tflite_Model_required[] = { 0 };
typedef flatbuffers_ref_t tflite_Model_ref_t;
static tflite_Model_ref_t tflite_Model_clone(flatbuffers_builder_t *B, tflite_Model_table_t t);
__flatbuffers_build_table(flatbuffers_, tflite_Model, 7)

#define __tflite_CustomQuantization_formal_args , flatbuffers_uint8_vec_ref_t v0
#define __tflite_CustomQuantization_call_args , v0
static inline tflite_CustomQuantization_ref_t tflite_CustomQuantization_create(flatbuffers_builder_t *B __tflite_CustomQuantization_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_CustomQuantization, tflite_CustomQuantization_file_identifier, tflite_CustomQuantization_type_identifier)

#define __tflite_QuantizationParameters_formal_args ,\
  flatbuffers_float_vec_ref_t v0, flatbuffers_float_vec_ref_t v1, flatbuffers_float_vec_ref_t v2, flatbuffers_int64_vec_ref_t v3, tflite_QuantizationDetails_union_ref_t v5, int32_t v6
#define __tflite_QuantizationParameters_call_args ,\
  v0, v1, v2, v3, v5, v6
static inline tflite_QuantizationParameters_ref_t tflite_QuantizationParameters_create(flatbuffers_builder_t *B __tflite_QuantizationParameters_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_QuantizationParameters, tflite_QuantizationParameters_file_identifier, tflite_QuantizationParameters_type_identifier)

#define __tflite_Int32Vector_formal_args , flatbuffers_int32_vec_ref_t v0
#define __tflite_Int32Vector_call_args , v0
static inline tflite_Int32Vector_ref_t tflite_Int32Vector_create(flatbuffers_builder_t *B __tflite_Int32Vector_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_Int32Vector, tflite_Int32Vector_file_identifier, tflite_Int32Vector_type_identifier)

#define __tflite_Uint16Vector_formal_args , flatbuffers_uint16_vec_ref_t v0
#define __tflite_Uint16Vector_call_args , v0
static inline tflite_Uint16Vector_ref_t tflite_Uint16Vector_create(flatbuffers_builder_t *B __tflite_Uint16Vector_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_Uint16Vector, tflite_Uint16Vector_file_identifier, tflite_Uint16Vector_type_identifier)

#define __tflite_Uint8Vector_formal_args , flatbuffers_uint8_vec_ref_t v0
#define __tflite_Uint8Vector_call_args , v0
static inline tflite_Uint8Vector_ref_t tflite_Uint8Vector_create(flatbuffers_builder_t *B __tflite_Uint8Vector_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_Uint8Vector, tflite_Uint8Vector_file_identifier, tflite_Uint8Vector_type_identifier)

#define __tflite_DimensionMetadata_formal_args , tflite_DimensionType_enum_t v0, int32_t v1, tflite_SparseIndexVector_union_ref_t v3, tflite_SparseIndexVector_union_ref_t v5
#define __tflite_DimensionMetadata_call_args , v0, v1, v3, v5
static inline tflite_DimensionMetadata_ref_t tflite_DimensionMetadata_create(flatbuffers_builder_t *B __tflite_DimensionMetadata_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_DimensionMetadata, tflite_DimensionMetadata_file_identifier, tflite_DimensionMetadata_type_identifier)

#define __tflite_SparsityParameters_formal_args , flatbuffers_int32_vec_ref_t v0, flatbuffers_int32_vec_ref_t v1, tflite_DimensionMetadata_vec_ref_t v2
#define __tflite_SparsityParameters_call_args , v0, v1, v2
static inline tflite_SparsityParameters_ref_t tflite_SparsityParameters_create(flatbuffers_builder_t *B __tflite_SparsityParameters_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_SparsityParameters, tflite_SparsityParameters_file_identifier, tflite_SparsityParameters_type_identifier)

#define __tflite_Tensor_formal_args ,\
  flatbuffers_int32_vec_ref_t v0, tflite_TensorType_enum_t v1, uint32_t v2, flatbuffers_string_ref_t v3,\
  tflite_QuantizationParameters_ref_t v4, flatbuffers_bool_t v5, tflite_SparsityParameters_ref_t v6, flatbuffers_int32_vec_ref_t v7
#define __tflite_Tensor_call_args ,\
  v0, v1, v2, v3,\
  v4, v5, v6, v7
static inline tflite_Tensor_ref_t tflite_Tensor_create(flatbuffers_builder_t *B __tflite_Tensor_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_Tensor, tflite_Tensor_file_identifier, tflite_Tensor_type_identifier)

#define __tflite_Conv2DOptions_formal_args ,\
  tflite_Padding_enum_t v0, int32_t v1, int32_t v2, tflite_ActivationFunctionType_enum_t v3, int32_t v4, int32_t v5
#define __tflite_Conv2DOptions_call_args ,\
  v0, v1, v2, v3, v4, v5
static inline tflite_Conv2DOptions_ref_t tflite_Conv2DOptions_create(flatbuffers_builder_t *B __tflite_Conv2DOptions_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_Conv2DOptions, tflite_Conv2DOptions_file_identifier, tflite_Conv2DOptions_type_identifier)

#define __tflite_Pool2DOptions_formal_args ,\
  tflite_Padding_enum_t v0, int32_t v1, int32_t v2, int32_t v3, int32_t v4, tflite_ActivationFunctionType_enum_t v5
#define __tflite_Pool2DOptions_call_args ,\
  v0, v1, v2, v3, v4, v5
static inline tflite_Pool2DOptions_ref_t tflite_Pool2DOptions_create(flatbuffers_builder_t *B __tflite_Pool2DOptions_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_Pool2DOptions, tflite_Pool2DOptions_file_identifier, tflite_Pool2DOptions_type_identifier)

#define __tflite_DepthwiseConv2DOptions_formal_args ,\
  tflite_Padding_enum_t v0, int32_t v1, int32_t v2, int32_t v3,\
  tflite_ActivationFunctionType_enum_t v4, int32_t v5, int32_t v6
#define __tflite_DepthwiseConv2DOptions_call_args ,\
  v0, v1, v2, v3,\
  v4, v5, v6
static inline tflite_DepthwiseConv2DOptions_ref_t tflite_DepthwiseConv2DOptions_create(flatbuffers_builder_t *B __tflite_DepthwiseConv2DOptions_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_DepthwiseConv2DOptions, tflite_DepthwiseConv2DOptions_file_identifier, tflite_DepthwiseConv2DOptions_type_identifier)

#define __tflite_ConcatEmbeddingsOptions_formal_args , int32_t v0, flatbuffers_int32_vec_ref_t v1, flatbuffers_int32_vec_ref_t v2
#define __tflite_ConcatEmbeddingsOptions_call_args , v0, v1, v2
static inline tflite_ConcatEmbeddingsOptions_ref_t tflite_ConcatEmbeddingsOptions_create(flatbuffers_builder_t *B __tflite_ConcatEmbeddingsOptions_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_ConcatEmbeddingsOptions, tflite_ConcatEmbeddingsOptions_file_identifier, tflite_ConcatEmbeddingsOptions_type_identifier)

#define __tflite_LSHProjectionOptions_formal_args , tflite_LSHProjectionType_enum_t v0
#define __tflite_LSHProjectionOptions_call_args , v0
static inline tflite_LSHProjectionOptions_ref_t tflite_LSHProjectionOptions_create(flatbuffers_builder_t *B __tflite_LSHProjectionOptions_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_LSHProjectionOptions, tflite_LSHProjectionOptions_file_identifier, tflite_LSHProjectionOptions_type_identifier)

#define __tflite_SVDFOptions_formal_args , int32_t v0, tflite_ActivationFunctionType_enum_t v1
#define __tflite_SVDFOptions_call_args , v0, v1
static inline tflite_SVDFOptions_ref_t tflite_SVDFOptions_create(flatbuffers_builder_t *B __tflite_SVDFOptions_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_SVDFOptions, tflite_SVDFOptions_file_identifier, tflite_SVDFOptions_type_identifier)

#define __tflite_RNNOptions_formal_args , tflite_ActivationFunctionType_enum_t v0
#define __tflite_RNNOptions_call_args , v0
static inline tflite_RNNOptions_ref_t tflite_RNNOptions_create(flatbuffers_builder_t *B __tflite_RNNOptions_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_RNNOptions, tflite_RNNOptions_file_identifier, tflite_RNNOptions_type_identifier)

#define __tflite_SequenceRNNOptions_formal_args , flatbuffers_bool_t v0, tflite_ActivationFunctionType_enum_t v1
#define __tflite_SequenceRNNOptions_call_args , v0, v1
static inline tflite_SequenceRNNOptions_ref_t tflite_SequenceRNNOptions_create(flatbuffers_builder_t *B __tflite_SequenceRNNOptions_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_SequenceRNNOptions, tflite_SequenceRNNOptions_file_identifier, tflite_SequenceRNNOptions_type_identifier)

#define __tflite_BidirectionalSequenceRNNOptions_formal_args , flatbuffers_bool_t v0, tflite_ActivationFunctionType_enum_t v1, flatbuffers_bool_t v2
#define __tflite_BidirectionalSequenceRNNOptions_call_args , v0, v1, v2
static inline tflite_BidirectionalSequenceRNNOptions_ref_t tflite_BidirectionalSequenceRNNOptions_create(flatbuffers_builder_t *B __tflite_BidirectionalSequenceRNNOptions_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_BidirectionalSequenceRNNOptions, tflite_BidirectionalSequenceRNNOptions_file_identifier, tflite_BidirectionalSequenceRNNOptions_type_identifier)

#define __tflite_FullyConnectedOptions_formal_args , tflite_ActivationFunctionType_enum_t v0, tflite_FullyConnectedOptionsWeightsFormat_enum_t v1, flatbuffers_bool_t v2
#define __tflite_FullyConnectedOptions_call_args , v0, v1, v2
static inline tflite_FullyConnectedOptions_ref_t tflite_FullyConnectedOptions_create(flatbuffers_builder_t *B __tflite_FullyConnectedOptions_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_FullyConnectedOptions, tflite_FullyConnectedOptions_file_identifier, tflite_FullyConnectedOptions_type_identifier)

#define __tflite_SoftmaxOptions_formal_args , float v0
#define __tflite_SoftmaxOptions_call_args , v0
static inline tflite_SoftmaxOptions_ref_t tflite_SoftmaxOptions_create(flatbuffers_builder_t *B __tflite_SoftmaxOptions_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_SoftmaxOptions, tflite_SoftmaxOptions_file_identifier, tflite_SoftmaxOptions_type_identifier)

#define __tflite_ConcatenationOptions_formal_args , int32_t v0, tflite_ActivationFunctionType_enum_t v1
#define __tflite_ConcatenationOptions_call_args , v0, v1
static inline tflite_ConcatenationOptions_ref_t tflite_ConcatenationOptions_create(flatbuffers_builder_t *B __tflite_ConcatenationOptions_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_ConcatenationOptions, tflite_ConcatenationOptions_file_identifier, tflite_ConcatenationOptions_type_identifier)

#define __tflite_AddOptions_formal_args , tflite_ActivationFunctionType_enum_t v0
#define __tflite_AddOptions_call_args , v0
static inline tflite_AddOptions_ref_t tflite_AddOptions_create(flatbuffers_builder_t *B __tflite_AddOptions_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_AddOptions, tflite_AddOptions_file_identifier, tflite_AddOptions_type_identifier)

#define __tflite_MulOptions_formal_args , tflite_ActivationFunctionType_enum_t v0
#define __tflite_MulOptions_call_args , v0
static inline tflite_MulOptions_ref_t tflite_MulOptions_create(flatbuffers_builder_t *B __tflite_MulOptions_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_MulOptions, tflite_MulOptions_file_identifier, tflite_MulOptions_type_identifier)

#define __tflite_L2NormOptions_formal_args , tflite_ActivationFunctionType_enum_t v0
#define __tflite_L2NormOptions_call_args , v0
static inline tflite_L2NormOptions_ref_t tflite_L2NormOptions_create(flatbuffers_builder_t *B __tflite_L2NormOptions_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_L2NormOptions, tflite_L2NormOptions_file_identifier, tflite_L2NormOptions_type_identifier)

#define __tflite_LocalResponseNormalizationOptions_formal_args , int32_t v0, float v1, float v2, float v3
#define __tflite_LocalResponseNormalizationOptions_call_args , v0, v1, v2, v3
static inline tflite_LocalResponseNormalizationOptions_ref_t tflite_LocalResponseNormalizationOptions_create(flatbuffers_builder_t *B __tflite_LocalResponseNormalizationOptions_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_LocalResponseNormalizationOptions, tflite_LocalResponseNormalizationOptions_file_identifier, tflite_LocalResponseNormalizationOptions_type_identifier)

#define __tflite_LSTMOptions_formal_args , tflite_ActivationFunctionType_enum_t v0, float v1, float v2, tflite_LSTMKernelType_enum_t v3
#define __tflite_LSTMOptions_call_args , v0, v1, v2, v3
static inline tflite_LSTMOptions_ref_t tflite_LSTMOptions_create(flatbuffers_builder_t *B __tflite_LSTMOptions_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_LSTMOptions, tflite_LSTMOptions_file_identifier, tflite_LSTMOptions_type_identifier)

#define __tflite_UnidirectionalSequenceLSTMOptions_formal_args , tflite_ActivationFunctionType_enum_t v0, float v1, float v2, flatbuffers_bool_t v3
#define __tflite_UnidirectionalSequenceLSTMOptions_call_args , v0, v1, v2, v3
static inline tflite_UnidirectionalSequenceLSTMOptions_ref_t tflite_UnidirectionalSequenceLSTMOptions_create(flatbuffers_builder_t *B __tflite_UnidirectionalSequenceLSTMOptions_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_UnidirectionalSequenceLSTMOptions, tflite_UnidirectionalSequenceLSTMOptions_file_identifier, tflite_UnidirectionalSequenceLSTMOptions_type_identifier)

#define __tflite_BidirectionalSequenceLSTMOptions_formal_args ,\
  tflite_ActivationFunctionType_enum_t v0, float v1, float v2, flatbuffers_bool_t v3, flatbuffers_bool_t v4
#define __tflite_BidirectionalSequenceLSTMOptions_call_args ,\
  v0, v1, v2, v3, v4
static inline tflite_BidirectionalSequenceLSTMOptions_ref_t tflite_BidirectionalSequenceLSTMOptions_create(flatbuffers_builder_t *B __tflite_BidirectionalSequenceLSTMOptions_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_BidirectionalSequenceLSTMOptions, tflite_BidirectionalSequenceLSTMOptions_file_identifier, tflite_BidirectionalSequenceLSTMOptions_type_identifier)

#define __tflite_ResizeBilinearOptions_formal_args , flatbuffers_bool_t v2, flatbuffers_bool_t v3
#define __tflite_ResizeBilinearOptions_call_args , v2, v3
static inline tflite_ResizeBilinearOptions_ref_t tflite_ResizeBilinearOptions_create(flatbuffers_builder_t *B __tflite_ResizeBilinearOptions_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_ResizeBilinearOptions, tflite_ResizeBilinearOptions_file_identifier, tflite_ResizeBilinearOptions_type_identifier)

#define __tflite_ResizeNearestNeighborOptions_formal_args , flatbuffers_bool_t v0
#define __tflite_ResizeNearestNeighborOptions_call_args , v0
static inline tflite_ResizeNearestNeighborOptions_ref_t tflite_ResizeNearestNeighborOptions_create(flatbuffers_builder_t *B __tflite_ResizeNearestNeighborOptions_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_ResizeNearestNeighborOptions, tflite_ResizeNearestNeighborOptions_file_identifier, tflite_ResizeNearestNeighborOptions_type_identifier)

#define __tflite_CallOptions_formal_args , uint32_t v0
#define __tflite_CallOptions_call_args , v0
static inline tflite_CallOptions_ref_t tflite_CallOptions_create(flatbuffers_builder_t *B __tflite_CallOptions_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_CallOptions, tflite_CallOptions_file_identifier, tflite_CallOptions_type_identifier)

#define __tflite_PadOptions_formal_args 
#define __tflite_PadOptions_call_args 
static inline tflite_PadOptions_ref_t tflite_PadOptions_create(flatbuffers_builder_t *B __tflite_PadOptions_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_PadOptions, tflite_PadOptions_file_identifier, tflite_PadOptions_type_identifier)

#define __tflite_PadV2Options_formal_args 
#define __tflite_PadV2Options_call_args 
static inline tflite_PadV2Options_ref_t tflite_PadV2Options_create(flatbuffers_builder_t *B __tflite_PadV2Options_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_PadV2Options, tflite_PadV2Options_file_identifier, tflite_PadV2Options_type_identifier)

#define __tflite_ReshapeOptions_formal_args , flatbuffers_int32_vec_ref_t v0
#define __tflite_ReshapeOptions_call_args , v0
static inline tflite_ReshapeOptions_ref_t tflite_ReshapeOptions_create(flatbuffers_builder_t *B __tflite_ReshapeOptions_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_ReshapeOptions, tflite_ReshapeOptions_file_identifier, tflite_ReshapeOptions_type_identifier)

#define __tflite_SpaceToBatchNDOptions_formal_args 
#define __tflite_SpaceToBatchNDOptions_call_args 
static inline tflite_SpaceToBatchNDOptions_ref_t tflite_SpaceToBatchNDOptions_create(flatbuffers_builder_t *B __tflite_SpaceToBatchNDOptions_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_SpaceToBatchNDOptions, tflite_SpaceToBatchNDOptions_file_identifier, tflite_SpaceToBatchNDOptions_type_identifier)

#define __tflite_BatchToSpaceNDOptions_formal_args 
#define __tflite_BatchToSpaceNDOptions_call_args 
static inline tflite_BatchToSpaceNDOptions_ref_t tflite_BatchToSpaceNDOptions_create(flatbuffers_builder_t *B __tflite_BatchToSpaceNDOptions_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_BatchToSpaceNDOptions, tflite_BatchToSpaceNDOptions_file_identifier, tflite_BatchToSpaceNDOptions_type_identifier)

#define __tflite_SkipGramOptions_formal_args , int32_t v0, int32_t v1, flatbuffers_bool_t v2
#define __tflite_SkipGramOptions_call_args , v0, v1, v2
static inline tflite_SkipGramOptions_ref_t tflite_SkipGramOptions_create(flatbuffers_builder_t *B __tflite_SkipGramOptions_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_SkipGramOptions, tflite_SkipGramOptions_file_identifier, tflite_SkipGramOptions_type_identifier)

#define __tflite_SpaceToDepthOptions_formal_args , int32_t v0
#define __tflite_SpaceToDepthOptions_call_args , v0
static inline tflite_SpaceToDepthOptions_ref_t tflite_SpaceToDepthOptions_create(flatbuffers_builder_t *B __tflite_SpaceToDepthOptions_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_SpaceToDepthOptions, tflite_SpaceToDepthOptions_file_identifier, tflite_SpaceToDepthOptions_type_identifier)

#define __tflite_DepthToSpaceOptions_formal_args , int32_t v0
#define __tflite_DepthToSpaceOptions_call_args , v0
static inline tflite_DepthToSpaceOptions_ref_t tflite_DepthToSpaceOptions_create(flatbuffers_builder_t *B __tflite_DepthToSpaceOptions_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_DepthToSpaceOptions, tflite_DepthToSpaceOptions_file_identifier, tflite_DepthToSpaceOptions_type_identifier)

#define __tflite_SubOptions_formal_args , tflite_ActivationFunctionType_enum_t v0
#define __tflite_SubOptions_call_args , v0
static inline tflite_SubOptions_ref_t tflite_SubOptions_create(flatbuffers_builder_t *B __tflite_SubOptions_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_SubOptions, tflite_SubOptions_file_identifier, tflite_SubOptions_type_identifier)

#define __tflite_DivOptions_formal_args , tflite_ActivationFunctionType_enum_t v0
#define __tflite_DivOptions_call_args , v0
static inline tflite_DivOptions_ref_t tflite_DivOptions_create(flatbuffers_builder_t *B __tflite_DivOptions_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_DivOptions, tflite_DivOptions_file_identifier, tflite_DivOptions_type_identifier)

#define __tflite_TopKV2Options_formal_args 
#define __tflite_TopKV2Options_call_args 
static inline tflite_TopKV2Options_ref_t tflite_TopKV2Options_create(flatbuffers_builder_t *B __tflite_TopKV2Options_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_TopKV2Options, tflite_TopKV2Options_file_identifier, tflite_TopKV2Options_type_identifier)

#define __tflite_EmbeddingLookupSparseOptions_formal_args , tflite_CombinerType_enum_t v0
#define __tflite_EmbeddingLookupSparseOptions_call_args , v0
static inline tflite_EmbeddingLookupSparseOptions_ref_t tflite_EmbeddingLookupSparseOptions_create(flatbuffers_builder_t *B __tflite_EmbeddingLookupSparseOptions_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_EmbeddingLookupSparseOptions, tflite_EmbeddingLookupSparseOptions_file_identifier, tflite_EmbeddingLookupSparseOptions_type_identifier)

#define __tflite_GatherOptions_formal_args , int32_t v0
#define __tflite_GatherOptions_call_args , v0
static inline tflite_GatherOptions_ref_t tflite_GatherOptions_create(flatbuffers_builder_t *B __tflite_GatherOptions_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_GatherOptions, tflite_GatherOptions_file_identifier, tflite_GatherOptions_type_identifier)

#define __tflite_TransposeOptions_formal_args 
#define __tflite_TransposeOptions_call_args 
static inline tflite_TransposeOptions_ref_t tflite_TransposeOptions_create(flatbuffers_builder_t *B __tflite_TransposeOptions_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_TransposeOptions, tflite_TransposeOptions_file_identifier, tflite_TransposeOptions_type_identifier)

#define __tflite_ExpOptions_formal_args 
#define __tflite_ExpOptions_call_args 
static inline tflite_ExpOptions_ref_t tflite_ExpOptions_create(flatbuffers_builder_t *B __tflite_ExpOptions_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_ExpOptions, tflite_ExpOptions_file_identifier, tflite_ExpOptions_type_identifier)

#define __tflite_CosOptions_formal_args 
#define __tflite_CosOptions_call_args 
static inline tflite_CosOptions_ref_t tflite_CosOptions_create(flatbuffers_builder_t *B __tflite_CosOptions_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_CosOptions, tflite_CosOptions_file_identifier, tflite_CosOptions_type_identifier)

#define __tflite_ReducerOptions_formal_args , flatbuffers_bool_t v0
#define __tflite_ReducerOptions_call_args , v0
static inline tflite_ReducerOptions_ref_t tflite_ReducerOptions_create(flatbuffers_builder_t *B __tflite_ReducerOptions_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_ReducerOptions, tflite_ReducerOptions_file_identifier, tflite_ReducerOptions_type_identifier)

#define __tflite_SqueezeOptions_formal_args , flatbuffers_int32_vec_ref_t v0
#define __tflite_SqueezeOptions_call_args , v0
static inline tflite_SqueezeOptions_ref_t tflite_SqueezeOptions_create(flatbuffers_builder_t *B __tflite_SqueezeOptions_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_SqueezeOptions, tflite_SqueezeOptions_file_identifier, tflite_SqueezeOptions_type_identifier)

#define __tflite_SplitOptions_formal_args , int32_t v0
#define __tflite_SplitOptions_call_args , v0
static inline tflite_SplitOptions_ref_t tflite_SplitOptions_create(flatbuffers_builder_t *B __tflite_SplitOptions_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_SplitOptions, tflite_SplitOptions_file_identifier, tflite_SplitOptions_type_identifier)

#define __tflite_SplitVOptions_formal_args , int32_t v0
#define __tflite_SplitVOptions_call_args , v0
static inline tflite_SplitVOptions_ref_t tflite_SplitVOptions_create(flatbuffers_builder_t *B __tflite_SplitVOptions_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_SplitVOptions, tflite_SplitVOptions_file_identifier, tflite_SplitVOptions_type_identifier)

#define __tflite_StridedSliceOptions_formal_args ,\
  int32_t v0, int32_t v1, int32_t v2, int32_t v3, int32_t v4
#define __tflite_StridedSliceOptions_call_args ,\
  v0, v1, v2, v3, v4
static inline tflite_StridedSliceOptions_ref_t tflite_StridedSliceOptions_create(flatbuffers_builder_t *B __tflite_StridedSliceOptions_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_StridedSliceOptions, tflite_StridedSliceOptions_file_identifier, tflite_StridedSliceOptions_type_identifier)

#define __tflite_LogSoftmaxOptions_formal_args 
#define __tflite_LogSoftmaxOptions_call_args 
static inline tflite_LogSoftmaxOptions_ref_t tflite_LogSoftmaxOptions_create(flatbuffers_builder_t *B __tflite_LogSoftmaxOptions_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_LogSoftmaxOptions, tflite_LogSoftmaxOptions_file_identifier, tflite_LogSoftmaxOptions_type_identifier)

#define __tflite_CastOptions_formal_args , tflite_TensorType_enum_t v0, tflite_TensorType_enum_t v1
#define __tflite_CastOptions_call_args , v0, v1
static inline tflite_CastOptions_ref_t tflite_CastOptions_create(flatbuffers_builder_t *B __tflite_CastOptions_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_CastOptions, tflite_CastOptions_file_identifier, tflite_CastOptions_type_identifier)

#define __tflite_DequantizeOptions_formal_args 
#define __tflite_DequantizeOptions_call_args 
static inline tflite_DequantizeOptions_ref_t tflite_DequantizeOptions_create(flatbuffers_builder_t *B __tflite_DequantizeOptions_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_DequantizeOptions, tflite_DequantizeOptions_file_identifier, tflite_DequantizeOptions_type_identifier)

#define __tflite_MaximumMinimumOptions_formal_args 
#define __tflite_MaximumMinimumOptions_call_args 
static inline tflite_MaximumMinimumOptions_ref_t tflite_MaximumMinimumOptions_create(flatbuffers_builder_t *B __tflite_MaximumMinimumOptions_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_MaximumMinimumOptions, tflite_MaximumMinimumOptions_file_identifier, tflite_MaximumMinimumOptions_type_identifier)

#define __tflite_TileOptions_formal_args 
#define __tflite_TileOptions_call_args 
static inline tflite_TileOptions_ref_t tflite_TileOptions_create(flatbuffers_builder_t *B __tflite_TileOptions_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_TileOptions, tflite_TileOptions_file_identifier, tflite_TileOptions_type_identifier)

#define __tflite_ArgMaxOptions_formal_args , tflite_TensorType_enum_t v0
#define __tflite_ArgMaxOptions_call_args , v0
static inline tflite_ArgMaxOptions_ref_t tflite_ArgMaxOptions_create(flatbuffers_builder_t *B __tflite_ArgMaxOptions_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_ArgMaxOptions, tflite_ArgMaxOptions_file_identifier, tflite_ArgMaxOptions_type_identifier)

#define __tflite_ArgMinOptions_formal_args , tflite_TensorType_enum_t v0
#define __tflite_ArgMinOptions_call_args , v0
static inline tflite_ArgMinOptions_ref_t tflite_ArgMinOptions_create(flatbuffers_builder_t *B __tflite_ArgMinOptions_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_ArgMinOptions, tflite_ArgMinOptions_file_identifier, tflite_ArgMinOptions_type_identifier)

#define __tflite_GreaterOptions_formal_args 
#define __tflite_GreaterOptions_call_args 
static inline tflite_GreaterOptions_ref_t tflite_GreaterOptions_create(flatbuffers_builder_t *B __tflite_GreaterOptions_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_GreaterOptions, tflite_GreaterOptions_file_identifier, tflite_GreaterOptions_type_identifier)

#define __tflite_GreaterEqualOptions_formal_args 
#define __tflite_GreaterEqualOptions_call_args 
static inline tflite_GreaterEqualOptions_ref_t tflite_GreaterEqualOptions_create(flatbuffers_builder_t *B __tflite_GreaterEqualOptions_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_GreaterEqualOptions, tflite_GreaterEqualOptions_file_identifier, tflite_GreaterEqualOptions_type_identifier)

#define __tflite_LessOptions_formal_args 
#define __tflite_LessOptions_call_args 
static inline tflite_LessOptions_ref_t tflite_LessOptions_create(flatbuffers_builder_t *B __tflite_LessOptions_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_LessOptions, tflite_LessOptions_file_identifier, tflite_LessOptions_type_identifier)

#define __tflite_LessEqualOptions_formal_args 
#define __tflite_LessEqualOptions_call_args 
static inline tflite_LessEqualOptions_ref_t tflite_LessEqualOptions_create(flatbuffers_builder_t *B __tflite_LessEqualOptions_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_LessEqualOptions, tflite_LessEqualOptions_file_identifier, tflite_LessEqualOptions_type_identifier)

#define __tflite_NegOptions_formal_args 
#define __tflite_NegOptions_call_args 
static inline tflite_NegOptions_ref_t tflite_NegOptions_create(flatbuffers_builder_t *B __tflite_NegOptions_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_NegOptions, tflite_NegOptions_file_identifier, tflite_NegOptions_type_identifier)

#define __tflite_SelectOptions_formal_args 
#define __tflite_SelectOptions_call_args 
static inline tflite_SelectOptions_ref_t tflite_SelectOptions_create(flatbuffers_builder_t *B __tflite_SelectOptions_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_SelectOptions, tflite_SelectOptions_file_identifier, tflite_SelectOptions_type_identifier)

#define __tflite_SliceOptions_formal_args 
#define __tflite_SliceOptions_call_args 
static inline tflite_SliceOptions_ref_t tflite_SliceOptions_create(flatbuffers_builder_t *B __tflite_SliceOptions_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_SliceOptions, tflite_SliceOptions_file_identifier, tflite_SliceOptions_type_identifier)

#define __tflite_TransposeConvOptions_formal_args , tflite_Padding_enum_t v0, int32_t v1, int32_t v2
#define __tflite_TransposeConvOptions_call_args , v0, v1, v2
static inline tflite_TransposeConvOptions_ref_t tflite_TransposeConvOptions_create(flatbuffers_builder_t *B __tflite_TransposeConvOptions_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_TransposeConvOptions, tflite_TransposeConvOptions_file_identifier, tflite_TransposeConvOptions_type_identifier)

#define __tflite_ExpandDimsOptions_formal_args 
#define __tflite_ExpandDimsOptions_call_args 
static inline tflite_ExpandDimsOptions_ref_t tflite_ExpandDimsOptions_create(flatbuffers_builder_t *B __tflite_ExpandDimsOptions_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_ExpandDimsOptions, tflite_ExpandDimsOptions_file_identifier, tflite_ExpandDimsOptions_type_identifier)

#define __tflite_SparseToDenseOptions_formal_args , flatbuffers_bool_t v0
#define __tflite_SparseToDenseOptions_call_args , v0
static inline tflite_SparseToDenseOptions_ref_t tflite_SparseToDenseOptions_create(flatbuffers_builder_t *B __tflite_SparseToDenseOptions_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_SparseToDenseOptions, tflite_SparseToDenseOptions_file_identifier, tflite_SparseToDenseOptions_type_identifier)

#define __tflite_EqualOptions_formal_args 
#define __tflite_EqualOptions_call_args 
static inline tflite_EqualOptions_ref_t tflite_EqualOptions_create(flatbuffers_builder_t *B __tflite_EqualOptions_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_EqualOptions, tflite_EqualOptions_file_identifier, tflite_EqualOptions_type_identifier)

#define __tflite_NotEqualOptions_formal_args 
#define __tflite_NotEqualOptions_call_args 
static inline tflite_NotEqualOptions_ref_t tflite_NotEqualOptions_create(flatbuffers_builder_t *B __tflite_NotEqualOptions_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_NotEqualOptions, tflite_NotEqualOptions_file_identifier, tflite_NotEqualOptions_type_identifier)

#define __tflite_ShapeOptions_formal_args , tflite_TensorType_enum_t v0
#define __tflite_ShapeOptions_call_args , v0
static inline tflite_ShapeOptions_ref_t tflite_ShapeOptions_create(flatbuffers_builder_t *B __tflite_ShapeOptions_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_ShapeOptions, tflite_ShapeOptions_file_identifier, tflite_ShapeOptions_type_identifier)

#define __tflite_RankOptions_formal_args 
#define __tflite_RankOptions_call_args 
static inline tflite_RankOptions_ref_t tflite_RankOptions_create(flatbuffers_builder_t *B __tflite_RankOptions_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_RankOptions, tflite_RankOptions_file_identifier, tflite_RankOptions_type_identifier)

#define __tflite_PowOptions_formal_args 
#define __tflite_PowOptions_call_args 
static inline tflite_PowOptions_ref_t tflite_PowOptions_create(flatbuffers_builder_t *B __tflite_PowOptions_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_PowOptions, tflite_PowOptions_file_identifier, tflite_PowOptions_type_identifier)

#define __tflite_FakeQuantOptions_formal_args , float v0, float v1, int32_t v2, flatbuffers_bool_t v3
#define __tflite_FakeQuantOptions_call_args , v0, v1, v2, v3
static inline tflite_FakeQuantOptions_ref_t tflite_FakeQuantOptions_create(flatbuffers_builder_t *B __tflite_FakeQuantOptions_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_FakeQuantOptions, tflite_FakeQuantOptions_file_identifier, tflite_FakeQuantOptions_type_identifier)

#define __tflite_PackOptions_formal_args , int32_t v0, int32_t v1
#define __tflite_PackOptions_call_args , v0, v1
static inline tflite_PackOptions_ref_t tflite_PackOptions_create(flatbuffers_builder_t *B __tflite_PackOptions_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_PackOptions, tflite_PackOptions_file_identifier, tflite_PackOptions_type_identifier)

#define __tflite_LogicalOrOptions_formal_args 
#define __tflite_LogicalOrOptions_call_args 
static inline tflite_LogicalOrOptions_ref_t tflite_LogicalOrOptions_create(flatbuffers_builder_t *B __tflite_LogicalOrOptions_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_LogicalOrOptions, tflite_LogicalOrOptions_file_identifier, tflite_LogicalOrOptions_type_identifier)

#define __tflite_OneHotOptions_formal_args , int32_t v0
#define __tflite_OneHotOptions_call_args , v0
static inline tflite_OneHotOptions_ref_t tflite_OneHotOptions_create(flatbuffers_builder_t *B __tflite_OneHotOptions_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_OneHotOptions, tflite_OneHotOptions_file_identifier, tflite_OneHotOptions_type_identifier)

#define __tflite_AbsOptions_formal_args 
#define __tflite_AbsOptions_call_args 
static inline tflite_AbsOptions_ref_t tflite_AbsOptions_create(flatbuffers_builder_t *B __tflite_AbsOptions_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_AbsOptions, tflite_AbsOptions_file_identifier, tflite_AbsOptions_type_identifier)

#define __tflite_HardSwishOptions_formal_args 
#define __tflite_HardSwishOptions_call_args 
static inline tflite_HardSwishOptions_ref_t tflite_HardSwishOptions_create(flatbuffers_builder_t *B __tflite_HardSwishOptions_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_HardSwishOptions, tflite_HardSwishOptions_file_identifier, tflite_HardSwishOptions_type_identifier)

#define __tflite_LogicalAndOptions_formal_args 
#define __tflite_LogicalAndOptions_call_args 
static inline tflite_LogicalAndOptions_ref_t tflite_LogicalAndOptions_create(flatbuffers_builder_t *B __tflite_LogicalAndOptions_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_LogicalAndOptions, tflite_LogicalAndOptions_file_identifier, tflite_LogicalAndOptions_type_identifier)

#define __tflite_LogicalNotOptions_formal_args 
#define __tflite_LogicalNotOptions_call_args 
static inline tflite_LogicalNotOptions_ref_t tflite_LogicalNotOptions_create(flatbuffers_builder_t *B __tflite_LogicalNotOptions_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_LogicalNotOptions, tflite_LogicalNotOptions_file_identifier, tflite_LogicalNotOptions_type_identifier)

#define __tflite_UnpackOptions_formal_args , int32_t v0, int32_t v1
#define __tflite_UnpackOptions_call_args , v0, v1
static inline tflite_UnpackOptions_ref_t tflite_UnpackOptions_create(flatbuffers_builder_t *B __tflite_UnpackOptions_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_UnpackOptions, tflite_UnpackOptions_file_identifier, tflite_UnpackOptions_type_identifier)

#define __tflite_FloorDivOptions_formal_args 
#define __tflite_FloorDivOptions_call_args 
static inline tflite_FloorDivOptions_ref_t tflite_FloorDivOptions_create(flatbuffers_builder_t *B __tflite_FloorDivOptions_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_FloorDivOptions, tflite_FloorDivOptions_file_identifier, tflite_FloorDivOptions_type_identifier)

#define __tflite_SquareOptions_formal_args 
#define __tflite_SquareOptions_call_args 
static inline tflite_SquareOptions_ref_t tflite_SquareOptions_create(flatbuffers_builder_t *B __tflite_SquareOptions_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_SquareOptions, tflite_SquareOptions_file_identifier, tflite_SquareOptions_type_identifier)

#define __tflite_ZerosLikeOptions_formal_args 
#define __tflite_ZerosLikeOptions_call_args 
static inline tflite_ZerosLikeOptions_ref_t tflite_ZerosLikeOptions_create(flatbuffers_builder_t *B __tflite_ZerosLikeOptions_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_ZerosLikeOptions, tflite_ZerosLikeOptions_file_identifier, tflite_ZerosLikeOptions_type_identifier)

#define __tflite_FillOptions_formal_args 
#define __tflite_FillOptions_call_args 
static inline tflite_FillOptions_ref_t tflite_FillOptions_create(flatbuffers_builder_t *B __tflite_FillOptions_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_FillOptions, tflite_FillOptions_file_identifier, tflite_FillOptions_type_identifier)

#define __tflite_FloorModOptions_formal_args 
#define __tflite_FloorModOptions_call_args 
static inline tflite_FloorModOptions_ref_t tflite_FloorModOptions_create(flatbuffers_builder_t *B __tflite_FloorModOptions_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_FloorModOptions, tflite_FloorModOptions_file_identifier, tflite_FloorModOptions_type_identifier)

#define __tflite_RangeOptions_formal_args 
#define __tflite_RangeOptions_call_args 
static inline tflite_RangeOptions_ref_t tflite_RangeOptions_create(flatbuffers_builder_t *B __tflite_RangeOptions_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_RangeOptions, tflite_RangeOptions_file_identifier, tflite_RangeOptions_type_identifier)

#define __tflite_LeakyReluOptions_formal_args , float v0
#define __tflite_LeakyReluOptions_call_args , v0
static inline tflite_LeakyReluOptions_ref_t tflite_LeakyReluOptions_create(flatbuffers_builder_t *B __tflite_LeakyReluOptions_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_LeakyReluOptions, tflite_LeakyReluOptions_file_identifier, tflite_LeakyReluOptions_type_identifier)

#define __tflite_SquaredDifferenceOptions_formal_args 
#define __tflite_SquaredDifferenceOptions_call_args 
static inline tflite_SquaredDifferenceOptions_ref_t tflite_SquaredDifferenceOptions_create(flatbuffers_builder_t *B __tflite_SquaredDifferenceOptions_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_SquaredDifferenceOptions, tflite_SquaredDifferenceOptions_file_identifier, tflite_SquaredDifferenceOptions_type_identifier)

#define __tflite_MirrorPadOptions_formal_args , tflite_MirrorPadMode_enum_t v0
#define __tflite_MirrorPadOptions_call_args , v0
static inline tflite_MirrorPadOptions_ref_t tflite_MirrorPadOptions_create(flatbuffers_builder_t *B __tflite_MirrorPadOptions_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_MirrorPadOptions, tflite_MirrorPadOptions_file_identifier, tflite_MirrorPadOptions_type_identifier)

#define __tflite_UniqueOptions_formal_args , tflite_TensorType_enum_t v0
#define __tflite_UniqueOptions_call_args , v0
static inline tflite_UniqueOptions_ref_t tflite_UniqueOptions_create(flatbuffers_builder_t *B __tflite_UniqueOptions_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_UniqueOptions, tflite_UniqueOptions_file_identifier, tflite_UniqueOptions_type_identifier)

#define __tflite_ReverseV2Options_formal_args 
#define __tflite_ReverseV2Options_call_args 
static inline tflite_ReverseV2Options_ref_t tflite_ReverseV2Options_create(flatbuffers_builder_t *B __tflite_ReverseV2Options_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_ReverseV2Options, tflite_ReverseV2Options_file_identifier, tflite_ReverseV2Options_type_identifier)

#define __tflite_AddNOptions_formal_args 
#define __tflite_AddNOptions_call_args 
static inline tflite_AddNOptions_ref_t tflite_AddNOptions_create(flatbuffers_builder_t *B __tflite_AddNOptions_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_AddNOptions, tflite_AddNOptions_file_identifier, tflite_AddNOptions_type_identifier)

#define __tflite_GatherNdOptions_formal_args 
#define __tflite_GatherNdOptions_call_args 
static inline tflite_GatherNdOptions_ref_t tflite_GatherNdOptions_create(flatbuffers_builder_t *B __tflite_GatherNdOptions_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_GatherNdOptions, tflite_GatherNdOptions_file_identifier, tflite_GatherNdOptions_type_identifier)

#define __tflite_WhereOptions_formal_args 
#define __tflite_WhereOptions_call_args 
static inline tflite_WhereOptions_ref_t tflite_WhereOptions_create(flatbuffers_builder_t *B __tflite_WhereOptions_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_WhereOptions, tflite_WhereOptions_file_identifier, tflite_WhereOptions_type_identifier)

#define __tflite_ReverseSequenceOptions_formal_args , int32_t v0, int32_t v1
#define __tflite_ReverseSequenceOptions_call_args , v0, v1
static inline tflite_ReverseSequenceOptions_ref_t tflite_ReverseSequenceOptions_create(flatbuffers_builder_t *B __tflite_ReverseSequenceOptions_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_ReverseSequenceOptions, tflite_ReverseSequenceOptions_file_identifier, tflite_ReverseSequenceOptions_type_identifier)

#define __tflite_MatrixDiagOptions_formal_args 
#define __tflite_MatrixDiagOptions_call_args 
static inline tflite_MatrixDiagOptions_ref_t tflite_MatrixDiagOptions_create(flatbuffers_builder_t *B __tflite_MatrixDiagOptions_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_MatrixDiagOptions, tflite_MatrixDiagOptions_file_identifier, tflite_MatrixDiagOptions_type_identifier)

#define __tflite_QuantizeOptions_formal_args 
#define __tflite_QuantizeOptions_call_args 
static inline tflite_QuantizeOptions_ref_t tflite_QuantizeOptions_create(flatbuffers_builder_t *B __tflite_QuantizeOptions_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_QuantizeOptions, tflite_QuantizeOptions_file_identifier, tflite_QuantizeOptions_type_identifier)

#define __tflite_MatrixSetDiagOptions_formal_args 
#define __tflite_MatrixSetDiagOptions_call_args 
static inline tflite_MatrixSetDiagOptions_ref_t tflite_MatrixSetDiagOptions_create(flatbuffers_builder_t *B __tflite_MatrixSetDiagOptions_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_MatrixSetDiagOptions, tflite_MatrixSetDiagOptions_file_identifier, tflite_MatrixSetDiagOptions_type_identifier)

#define __tflite_IfOptions_formal_args , int32_t v0, int32_t v1
#define __tflite_IfOptions_call_args , v0, v1
static inline tflite_IfOptions_ref_t tflite_IfOptions_create(flatbuffers_builder_t *B __tflite_IfOptions_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_IfOptions, tflite_IfOptions_file_identifier, tflite_IfOptions_type_identifier)

#define __tflite_WhileOptions_formal_args , int32_t v0, int32_t v1
#define __tflite_WhileOptions_call_args , v0, v1
static inline tflite_WhileOptions_ref_t tflite_WhileOptions_create(flatbuffers_builder_t *B __tflite_WhileOptions_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_WhileOptions, tflite_WhileOptions_file_identifier, tflite_WhileOptions_type_identifier)

#define __tflite_NonMaxSuppressionV4Options_formal_args 
#define __tflite_NonMaxSuppressionV4Options_call_args 
static inline tflite_NonMaxSuppressionV4Options_ref_t tflite_NonMaxSuppressionV4Options_create(flatbuffers_builder_t *B __tflite_NonMaxSuppressionV4Options_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_NonMaxSuppressionV4Options, tflite_NonMaxSuppressionV4Options_file_identifier, tflite_NonMaxSuppressionV4Options_type_identifier)

#define __tflite_NonMaxSuppressionV5Options_formal_args 
#define __tflite_NonMaxSuppressionV5Options_call_args 
static inline tflite_NonMaxSuppressionV5Options_ref_t tflite_NonMaxSuppressionV5Options_create(flatbuffers_builder_t *B __tflite_NonMaxSuppressionV5Options_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_NonMaxSuppressionV5Options, tflite_NonMaxSuppressionV5Options_file_identifier, tflite_NonMaxSuppressionV5Options_type_identifier)

#define __tflite_ScatterNdOptions_formal_args 
#define __tflite_ScatterNdOptions_call_args 
static inline tflite_ScatterNdOptions_ref_t tflite_ScatterNdOptions_create(flatbuffers_builder_t *B __tflite_ScatterNdOptions_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_ScatterNdOptions, tflite_ScatterNdOptions_file_identifier, tflite_ScatterNdOptions_type_identifier)

#define __tflite_SelectV2Options_formal_args 
#define __tflite_SelectV2Options_call_args 
static inline tflite_SelectV2Options_ref_t tflite_SelectV2Options_create(flatbuffers_builder_t *B __tflite_SelectV2Options_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_SelectV2Options, tflite_SelectV2Options_file_identifier, tflite_SelectV2Options_type_identifier)

#define __tflite_DensifyOptions_formal_args 
#define __tflite_DensifyOptions_call_args 
static inline tflite_DensifyOptions_ref_t tflite_DensifyOptions_create(flatbuffers_builder_t *B __tflite_DensifyOptions_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_DensifyOptions, tflite_DensifyOptions_file_identifier, tflite_DensifyOptions_type_identifier)

#define __tflite_SegmentSumOptions_formal_args 
#define __tflite_SegmentSumOptions_call_args 
static inline tflite_SegmentSumOptions_ref_t tflite_SegmentSumOptions_create(flatbuffers_builder_t *B __tflite_SegmentSumOptions_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_SegmentSumOptions, tflite_SegmentSumOptions_file_identifier, tflite_SegmentSumOptions_type_identifier)

#define __tflite_OperatorCode_formal_args , tflite_BuiltinOperator_enum_t v0, flatbuffers_string_ref_t v1, int32_t v2
#define __tflite_OperatorCode_call_args , v0, v1, v2
static inline tflite_OperatorCode_ref_t tflite_OperatorCode_create(flatbuffers_builder_t *B __tflite_OperatorCode_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_OperatorCode, tflite_OperatorCode_file_identifier, tflite_OperatorCode_type_identifier)

#define __tflite_Operator_formal_args ,\
  uint32_t v0, flatbuffers_int32_vec_ref_t v1, flatbuffers_int32_vec_ref_t v2, tflite_BuiltinOptions_union_ref_t v4,\
  flatbuffers_uint8_vec_ref_t v5, tflite_CustomOptionsFormat_enum_t v6, flatbuffers_bool_vec_ref_t v7, flatbuffers_int32_vec_ref_t v8
#define __tflite_Operator_call_args ,\
  v0, v1, v2, v4,\
  v5, v6, v7, v8
static inline tflite_Operator_ref_t tflite_Operator_create(flatbuffers_builder_t *B __tflite_Operator_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_Operator, tflite_Operator_file_identifier, tflite_Operator_type_identifier)

#define __tflite_SubGraph_formal_args ,\
  tflite_Tensor_vec_ref_t v0, flatbuffers_int32_vec_ref_t v1, flatbuffers_int32_vec_ref_t v2, tflite_Operator_vec_ref_t v3, flatbuffers_string_ref_t v4
#define __tflite_SubGraph_call_args ,\
  v0, v1, v2, v3, v4
static inline tflite_SubGraph_ref_t tflite_SubGraph_create(flatbuffers_builder_t *B __tflite_SubGraph_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_SubGraph, tflite_SubGraph_file_identifier, tflite_SubGraph_type_identifier)

#define __tflite_Buffer_formal_args , flatbuffers_uint8_vec_ref_t v0
#define __tflite_Buffer_call_args , v0
static inline tflite_Buffer_ref_t tflite_Buffer_create(flatbuffers_builder_t *B __tflite_Buffer_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_Buffer, tflite_Buffer_file_identifier, tflite_Buffer_type_identifier)

#define __tflite_Metadata_formal_args , flatbuffers_string_ref_t v0, uint32_t v1
#define __tflite_Metadata_call_args , v0, v1
static inline tflite_Metadata_ref_t tflite_Metadata_create(flatbuffers_builder_t *B __tflite_Metadata_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_Metadata, tflite_Metadata_file_identifier, tflite_Metadata_type_identifier)

#define __tflite_Model_formal_args ,\
  uint32_t v0, tflite_OperatorCode_vec_ref_t v1, tflite_SubGraph_vec_ref_t v2, flatbuffers_string_ref_t v3,\
  tflite_Buffer_vec_ref_t v4, flatbuffers_int32_vec_ref_t v5, tflite_Metadata_vec_ref_t v6
#define __tflite_Model_call_args ,\
  v0, v1, v2, v3,\
  v4, v5, v6
static inline tflite_Model_ref_t tflite_Model_create(flatbuffers_builder_t *B __tflite_Model_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, tflite_Model, tflite_Model_file_identifier, tflite_Model_type_identifier)

static inline tflite_QuantizationDetails_union_ref_t tflite_QuantizationDetails_as_NONE(void)
{ tflite_QuantizationDetails_union_ref_t uref; uref.type = tflite_QuantizationDetails_NONE; uref.value = 0; return uref; }
static inline tflite_QuantizationDetails_union_ref_t tflite_QuantizationDetails_as_CustomQuantization(tflite_CustomQuantization_ref_t ref)
{ tflite_QuantizationDetails_union_ref_t uref; uref.type = tflite_QuantizationDetails_CustomQuantization; uref.value = ref; return uref; }
__flatbuffers_build_union_vector(flatbuffers_, tflite_QuantizationDetails)

static tflite_QuantizationDetails_union_ref_t tflite_QuantizationDetails_clone(flatbuffers_builder_t *B, tflite_QuantizationDetails_union_t u)
{
    switch (u.type) {
    case 1: return tflite_QuantizationDetails_as_CustomQuantization(tflite_CustomQuantization_clone(B, (tflite_CustomQuantization_table_t)u.value));
    default: return tflite_QuantizationDetails_as_NONE();
    }
}

static inline tflite_SparseIndexVector_union_ref_t tflite_SparseIndexVector_as_NONE(void)
{ tflite_SparseIndexVector_union_ref_t uref; uref.type = tflite_SparseIndexVector_NONE; uref.value = 0; return uref; }
static inline tflite_SparseIndexVector_union_ref_t tflite_SparseIndexVector_as_Int32Vector(tflite_Int32Vector_ref_t ref)
{ tflite_SparseIndexVector_union_ref_t uref; uref.type = tflite_SparseIndexVector_Int32Vector; uref.value = ref; return uref; }
static inline tflite_SparseIndexVector_union_ref_t tflite_SparseIndexVector_as_Uint16Vector(tflite_Uint16Vector_ref_t ref)
{ tflite_SparseIndexVector_union_ref_t uref; uref.type = tflite_SparseIndexVector_Uint16Vector; uref.value = ref; return uref; }
static inline tflite_SparseIndexVector_union_ref_t tflite_SparseIndexVector_as_Uint8Vector(tflite_Uint8Vector_ref_t ref)
{ tflite_SparseIndexVector_union_ref_t uref; uref.type = tflite_SparseIndexVector_Uint8Vector; uref.value = ref; return uref; }
__flatbuffers_build_union_vector(flatbuffers_, tflite_SparseIndexVector)

static tflite_SparseIndexVector_union_ref_t tflite_SparseIndexVector_clone(flatbuffers_builder_t *B, tflite_SparseIndexVector_union_t u)
{
    switch (u.type) {
    case 1: return tflite_SparseIndexVector_as_Int32Vector(tflite_Int32Vector_clone(B, (tflite_Int32Vector_table_t)u.value));
    case 2: return tflite_SparseIndexVector_as_Uint16Vector(tflite_Uint16Vector_clone(B, (tflite_Uint16Vector_table_t)u.value));
    case 3: return tflite_SparseIndexVector_as_Uint8Vector(tflite_Uint8Vector_clone(B, (tflite_Uint8Vector_table_t)u.value));
    default: return tflite_SparseIndexVector_as_NONE();
    }
}

static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_NONE(void)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_NONE; uref.value = 0; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_Conv2DOptions(tflite_Conv2DOptions_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_Conv2DOptions; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_DepthwiseConv2DOptions(tflite_DepthwiseConv2DOptions_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_DepthwiseConv2DOptions; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_ConcatEmbeddingsOptions(tflite_ConcatEmbeddingsOptions_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_ConcatEmbeddingsOptions; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_LSHProjectionOptions(tflite_LSHProjectionOptions_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_LSHProjectionOptions; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_Pool2DOptions(tflite_Pool2DOptions_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_Pool2DOptions; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_SVDFOptions(tflite_SVDFOptions_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_SVDFOptions; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_RNNOptions(tflite_RNNOptions_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_RNNOptions; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_FullyConnectedOptions(tflite_FullyConnectedOptions_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_FullyConnectedOptions; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_SoftmaxOptions(tflite_SoftmaxOptions_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_SoftmaxOptions; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_ConcatenationOptions(tflite_ConcatenationOptions_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_ConcatenationOptions; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_AddOptions(tflite_AddOptions_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_AddOptions; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_L2NormOptions(tflite_L2NormOptions_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_L2NormOptions; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_LocalResponseNormalizationOptions(tflite_LocalResponseNormalizationOptions_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_LocalResponseNormalizationOptions; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_LSTMOptions(tflite_LSTMOptions_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_LSTMOptions; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_ResizeBilinearOptions(tflite_ResizeBilinearOptions_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_ResizeBilinearOptions; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_CallOptions(tflite_CallOptions_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_CallOptions; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_ReshapeOptions(tflite_ReshapeOptions_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_ReshapeOptions; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_SkipGramOptions(tflite_SkipGramOptions_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_SkipGramOptions; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_SpaceToDepthOptions(tflite_SpaceToDepthOptions_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_SpaceToDepthOptions; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_EmbeddingLookupSparseOptions(tflite_EmbeddingLookupSparseOptions_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_EmbeddingLookupSparseOptions; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_MulOptions(tflite_MulOptions_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_MulOptions; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_PadOptions(tflite_PadOptions_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_PadOptions; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_GatherOptions(tflite_GatherOptions_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_GatherOptions; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_BatchToSpaceNDOptions(tflite_BatchToSpaceNDOptions_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_BatchToSpaceNDOptions; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_SpaceToBatchNDOptions(tflite_SpaceToBatchNDOptions_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_SpaceToBatchNDOptions; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_TransposeOptions(tflite_TransposeOptions_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_TransposeOptions; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_ReducerOptions(tflite_ReducerOptions_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_ReducerOptions; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_SubOptions(tflite_SubOptions_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_SubOptions; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_DivOptions(tflite_DivOptions_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_DivOptions; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_SqueezeOptions(tflite_SqueezeOptions_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_SqueezeOptions; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_SequenceRNNOptions(tflite_SequenceRNNOptions_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_SequenceRNNOptions; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_StridedSliceOptions(tflite_StridedSliceOptions_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_StridedSliceOptions; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_ExpOptions(tflite_ExpOptions_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_ExpOptions; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_TopKV2Options(tflite_TopKV2Options_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_TopKV2Options; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_SplitOptions(tflite_SplitOptions_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_SplitOptions; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_LogSoftmaxOptions(tflite_LogSoftmaxOptions_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_LogSoftmaxOptions; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_CastOptions(tflite_CastOptions_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_CastOptions; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_DequantizeOptions(tflite_DequantizeOptions_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_DequantizeOptions; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_MaximumMinimumOptions(tflite_MaximumMinimumOptions_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_MaximumMinimumOptions; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_ArgMaxOptions(tflite_ArgMaxOptions_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_ArgMaxOptions; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_LessOptions(tflite_LessOptions_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_LessOptions; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_NegOptions(tflite_NegOptions_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_NegOptions; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_PadV2Options(tflite_PadV2Options_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_PadV2Options; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_GreaterOptions(tflite_GreaterOptions_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_GreaterOptions; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_GreaterEqualOptions(tflite_GreaterEqualOptions_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_GreaterEqualOptions; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_LessEqualOptions(tflite_LessEqualOptions_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_LessEqualOptions; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_SelectOptions(tflite_SelectOptions_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_SelectOptions; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_SliceOptions(tflite_SliceOptions_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_SliceOptions; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_TransposeConvOptions(tflite_TransposeConvOptions_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_TransposeConvOptions; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_SparseToDenseOptions(tflite_SparseToDenseOptions_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_SparseToDenseOptions; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_TileOptions(tflite_TileOptions_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_TileOptions; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_ExpandDimsOptions(tflite_ExpandDimsOptions_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_ExpandDimsOptions; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_EqualOptions(tflite_EqualOptions_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_EqualOptions; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_NotEqualOptions(tflite_NotEqualOptions_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_NotEqualOptions; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_ShapeOptions(tflite_ShapeOptions_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_ShapeOptions; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_PowOptions(tflite_PowOptions_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_PowOptions; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_ArgMinOptions(tflite_ArgMinOptions_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_ArgMinOptions; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_FakeQuantOptions(tflite_FakeQuantOptions_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_FakeQuantOptions; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_PackOptions(tflite_PackOptions_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_PackOptions; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_LogicalOrOptions(tflite_LogicalOrOptions_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_LogicalOrOptions; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_OneHotOptions(tflite_OneHotOptions_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_OneHotOptions; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_LogicalAndOptions(tflite_LogicalAndOptions_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_LogicalAndOptions; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_LogicalNotOptions(tflite_LogicalNotOptions_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_LogicalNotOptions; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_UnpackOptions(tflite_UnpackOptions_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_UnpackOptions; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_FloorDivOptions(tflite_FloorDivOptions_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_FloorDivOptions; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_SquareOptions(tflite_SquareOptions_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_SquareOptions; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_ZerosLikeOptions(tflite_ZerosLikeOptions_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_ZerosLikeOptions; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_FillOptions(tflite_FillOptions_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_FillOptions; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_BidirectionalSequenceLSTMOptions(tflite_BidirectionalSequenceLSTMOptions_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_BidirectionalSequenceLSTMOptions; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_BidirectionalSequenceRNNOptions(tflite_BidirectionalSequenceRNNOptions_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_BidirectionalSequenceRNNOptions; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_UnidirectionalSequenceLSTMOptions(tflite_UnidirectionalSequenceLSTMOptions_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_UnidirectionalSequenceLSTMOptions; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_FloorModOptions(tflite_FloorModOptions_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_FloorModOptions; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_RangeOptions(tflite_RangeOptions_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_RangeOptions; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_ResizeNearestNeighborOptions(tflite_ResizeNearestNeighborOptions_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_ResizeNearestNeighborOptions; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_LeakyReluOptions(tflite_LeakyReluOptions_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_LeakyReluOptions; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_SquaredDifferenceOptions(tflite_SquaredDifferenceOptions_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_SquaredDifferenceOptions; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_MirrorPadOptions(tflite_MirrorPadOptions_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_MirrorPadOptions; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_AbsOptions(tflite_AbsOptions_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_AbsOptions; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_SplitVOptions(tflite_SplitVOptions_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_SplitVOptions; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_UniqueOptions(tflite_UniqueOptions_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_UniqueOptions; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_ReverseV2Options(tflite_ReverseV2Options_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_ReverseV2Options; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_AddNOptions(tflite_AddNOptions_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_AddNOptions; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_GatherNdOptions(tflite_GatherNdOptions_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_GatherNdOptions; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_CosOptions(tflite_CosOptions_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_CosOptions; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_WhereOptions(tflite_WhereOptions_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_WhereOptions; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_RankOptions(tflite_RankOptions_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_RankOptions; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_ReverseSequenceOptions(tflite_ReverseSequenceOptions_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_ReverseSequenceOptions; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_MatrixDiagOptions(tflite_MatrixDiagOptions_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_MatrixDiagOptions; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_QuantizeOptions(tflite_QuantizeOptions_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_QuantizeOptions; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_MatrixSetDiagOptions(tflite_MatrixSetDiagOptions_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_MatrixSetDiagOptions; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_HardSwishOptions(tflite_HardSwishOptions_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_HardSwishOptions; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_IfOptions(tflite_IfOptions_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_IfOptions; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_WhileOptions(tflite_WhileOptions_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_WhileOptions; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_DepthToSpaceOptions(tflite_DepthToSpaceOptions_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_DepthToSpaceOptions; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_NonMaxSuppressionV4Options(tflite_NonMaxSuppressionV4Options_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_NonMaxSuppressionV4Options; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_NonMaxSuppressionV5Options(tflite_NonMaxSuppressionV5Options_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_NonMaxSuppressionV5Options; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_ScatterNdOptions(tflite_ScatterNdOptions_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_ScatterNdOptions; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_SelectV2Options(tflite_SelectV2Options_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_SelectV2Options; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_DensifyOptions(tflite_DensifyOptions_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_DensifyOptions; uref.value = ref; return uref; }
static inline tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_as_SegmentSumOptions(tflite_SegmentSumOptions_ref_t ref)
{ tflite_BuiltinOptions_union_ref_t uref; uref.type = tflite_BuiltinOptions_SegmentSumOptions; uref.value = ref; return uref; }
__flatbuffers_build_union_vector(flatbuffers_, tflite_BuiltinOptions)

static tflite_BuiltinOptions_union_ref_t tflite_BuiltinOptions_clone(flatbuffers_builder_t *B, tflite_BuiltinOptions_union_t u)
{
    switch (u.type) {
    case 1: return tflite_BuiltinOptions_as_Conv2DOptions(tflite_Conv2DOptions_clone(B, (tflite_Conv2DOptions_table_t)u.value));
    case 2: return tflite_BuiltinOptions_as_DepthwiseConv2DOptions(tflite_DepthwiseConv2DOptions_clone(B, (tflite_DepthwiseConv2DOptions_table_t)u.value));
    case 3: return tflite_BuiltinOptions_as_ConcatEmbeddingsOptions(tflite_ConcatEmbeddingsOptions_clone(B, (tflite_ConcatEmbeddingsOptions_table_t)u.value));
    case 4: return tflite_BuiltinOptions_as_LSHProjectionOptions(tflite_LSHProjectionOptions_clone(B, (tflite_LSHProjectionOptions_table_t)u.value));
    case 5: return tflite_BuiltinOptions_as_Pool2DOptions(tflite_Pool2DOptions_clone(B, (tflite_Pool2DOptions_table_t)u.value));
    case 6: return tflite_BuiltinOptions_as_SVDFOptions(tflite_SVDFOptions_clone(B, (tflite_SVDFOptions_table_t)u.value));
    case 7: return tflite_BuiltinOptions_as_RNNOptions(tflite_RNNOptions_clone(B, (tflite_RNNOptions_table_t)u.value));
    case 8: return tflite_BuiltinOptions_as_FullyConnectedOptions(tflite_FullyConnectedOptions_clone(B, (tflite_FullyConnectedOptions_table_t)u.value));
    case 9: return tflite_BuiltinOptions_as_SoftmaxOptions(tflite_SoftmaxOptions_clone(B, (tflite_SoftmaxOptions_table_t)u.value));
    case 10: return tflite_BuiltinOptions_as_ConcatenationOptions(tflite_ConcatenationOptions_clone(B, (tflite_ConcatenationOptions_table_t)u.value));
    case 11: return tflite_BuiltinOptions_as_AddOptions(tflite_AddOptions_clone(B, (tflite_AddOptions_table_t)u.value));
    case 12: return tflite_BuiltinOptions_as_L2NormOptions(tflite_L2NormOptions_clone(B, (tflite_L2NormOptions_table_t)u.value));
    case 13: return tflite_BuiltinOptions_as_LocalResponseNormalizationOptions(tflite_LocalResponseNormalizationOptions_clone(B, (tflite_LocalResponseNormalizationOptions_table_t)u.value));
    case 14: return tflite_BuiltinOptions_as_LSTMOptions(tflite_LSTMOptions_clone(B, (tflite_LSTMOptions_table_t)u.value));
    case 15: return tflite_BuiltinOptions_as_ResizeBilinearOptions(tflite_ResizeBilinearOptions_clone(B, (tflite_ResizeBilinearOptions_table_t)u.value));
    case 16: return tflite_BuiltinOptions_as_CallOptions(tflite_CallOptions_clone(B, (tflite_CallOptions_table_t)u.value));
    case 17: return tflite_BuiltinOptions_as_ReshapeOptions(tflite_ReshapeOptions_clone(B, (tflite_ReshapeOptions_table_t)u.value));
    case 18: return tflite_BuiltinOptions_as_SkipGramOptions(tflite_SkipGramOptions_clone(B, (tflite_SkipGramOptions_table_t)u.value));
    case 19: return tflite_BuiltinOptions_as_SpaceToDepthOptions(tflite_SpaceToDepthOptions_clone(B, (tflite_SpaceToDepthOptions_table_t)u.value));
    case 20: return tflite_BuiltinOptions_as_EmbeddingLookupSparseOptions(tflite_EmbeddingLookupSparseOptions_clone(B, (tflite_EmbeddingLookupSparseOptions_table_t)u.value));
    case 21: return tflite_BuiltinOptions_as_MulOptions(tflite_MulOptions_clone(B, (tflite_MulOptions_table_t)u.value));
    case 22: return tflite_BuiltinOptions_as_PadOptions(tflite_PadOptions_clone(B, (tflite_PadOptions_table_t)u.value));
    case 23: return tflite_BuiltinOptions_as_GatherOptions(tflite_GatherOptions_clone(B, (tflite_GatherOptions_table_t)u.value));
    case 24: return tflite_BuiltinOptions_as_BatchToSpaceNDOptions(tflite_BatchToSpaceNDOptions_clone(B, (tflite_BatchToSpaceNDOptions_table_t)u.value));
    case 25: return tflite_BuiltinOptions_as_SpaceToBatchNDOptions(tflite_SpaceToBatchNDOptions_clone(B, (tflite_SpaceToBatchNDOptions_table_t)u.value));
    case 26: return tflite_BuiltinOptions_as_TransposeOptions(tflite_TransposeOptions_clone(B, (tflite_TransposeOptions_table_t)u.value));
    case 27: return tflite_BuiltinOptions_as_ReducerOptions(tflite_ReducerOptions_clone(B, (tflite_ReducerOptions_table_t)u.value));
    case 28: return tflite_BuiltinOptions_as_SubOptions(tflite_SubOptions_clone(B, (tflite_SubOptions_table_t)u.value));
    case 29: return tflite_BuiltinOptions_as_DivOptions(tflite_DivOptions_clone(B, (tflite_DivOptions_table_t)u.value));
    case 30: return tflite_BuiltinOptions_as_SqueezeOptions(tflite_SqueezeOptions_clone(B, (tflite_SqueezeOptions_table_t)u.value));
    case 31: return tflite_BuiltinOptions_as_SequenceRNNOptions(tflite_SequenceRNNOptions_clone(B, (tflite_SequenceRNNOptions_table_t)u.value));
    case 32: return tflite_BuiltinOptions_as_StridedSliceOptions(tflite_StridedSliceOptions_clone(B, (tflite_StridedSliceOptions_table_t)u.value));
    case 33: return tflite_BuiltinOptions_as_ExpOptions(tflite_ExpOptions_clone(B, (tflite_ExpOptions_table_t)u.value));
    case 34: return tflite_BuiltinOptions_as_TopKV2Options(tflite_TopKV2Options_clone(B, (tflite_TopKV2Options_table_t)u.value));
    case 35: return tflite_BuiltinOptions_as_SplitOptions(tflite_SplitOptions_clone(B, (tflite_SplitOptions_table_t)u.value));
    case 36: return tflite_BuiltinOptions_as_LogSoftmaxOptions(tflite_LogSoftmaxOptions_clone(B, (tflite_LogSoftmaxOptions_table_t)u.value));
    case 37: return tflite_BuiltinOptions_as_CastOptions(tflite_CastOptions_clone(B, (tflite_CastOptions_table_t)u.value));
    case 38: return tflite_BuiltinOptions_as_DequantizeOptions(tflite_DequantizeOptions_clone(B, (tflite_DequantizeOptions_table_t)u.value));
    case 39: return tflite_BuiltinOptions_as_MaximumMinimumOptions(tflite_MaximumMinimumOptions_clone(B, (tflite_MaximumMinimumOptions_table_t)u.value));
    case 40: return tflite_BuiltinOptions_as_ArgMaxOptions(tflite_ArgMaxOptions_clone(B, (tflite_ArgMaxOptions_table_t)u.value));
    case 41: return tflite_BuiltinOptions_as_LessOptions(tflite_LessOptions_clone(B, (tflite_LessOptions_table_t)u.value));
    case 42: return tflite_BuiltinOptions_as_NegOptions(tflite_NegOptions_clone(B, (tflite_NegOptions_table_t)u.value));
    case 43: return tflite_BuiltinOptions_as_PadV2Options(tflite_PadV2Options_clone(B, (tflite_PadV2Options_table_t)u.value));
    case 44: return tflite_BuiltinOptions_as_GreaterOptions(tflite_GreaterOptions_clone(B, (tflite_GreaterOptions_table_t)u.value));
    case 45: return tflite_BuiltinOptions_as_GreaterEqualOptions(tflite_GreaterEqualOptions_clone(B, (tflite_GreaterEqualOptions_table_t)u.value));
    case 46: return tflite_BuiltinOptions_as_LessEqualOptions(tflite_LessEqualOptions_clone(B, (tflite_LessEqualOptions_table_t)u.value));
    case 47: return tflite_BuiltinOptions_as_SelectOptions(tflite_SelectOptions_clone(B, (tflite_SelectOptions_table_t)u.value));
    case 48: return tflite_BuiltinOptions_as_SliceOptions(tflite_SliceOptions_clone(B, (tflite_SliceOptions_table_t)u.value));
    case 49: return tflite_BuiltinOptions_as_TransposeConvOptions(tflite_TransposeConvOptions_clone(B, (tflite_TransposeConvOptions_table_t)u.value));
    case 50: return tflite_BuiltinOptions_as_SparseToDenseOptions(tflite_SparseToDenseOptions_clone(B, (tflite_SparseToDenseOptions_table_t)u.value));
    case 51: return tflite_BuiltinOptions_as_TileOptions(tflite_TileOptions_clone(B, (tflite_TileOptions_table_t)u.value));
    case 52: return tflite_BuiltinOptions_as_ExpandDimsOptions(tflite_ExpandDimsOptions_clone(B, (tflite_ExpandDimsOptions_table_t)u.value));
    case 53: return tflite_BuiltinOptions_as_EqualOptions(tflite_EqualOptions_clone(B, (tflite_EqualOptions_table_t)u.value));
    case 54: return tflite_BuiltinOptions_as_NotEqualOptions(tflite_NotEqualOptions_clone(B, (tflite_NotEqualOptions_table_t)u.value));
    case 55: return tflite_BuiltinOptions_as_ShapeOptions(tflite_ShapeOptions_clone(B, (tflite_ShapeOptions_table_t)u.value));
    case 56: return tflite_BuiltinOptions_as_PowOptions(tflite_PowOptions_clone(B, (tflite_PowOptions_table_t)u.value));
    case 57: return tflite_BuiltinOptions_as_ArgMinOptions(tflite_ArgMinOptions_clone(B, (tflite_ArgMinOptions_table_t)u.value));
    case 58: return tflite_BuiltinOptions_as_FakeQuantOptions(tflite_FakeQuantOptions_clone(B, (tflite_FakeQuantOptions_table_t)u.value));
    case 59: return tflite_BuiltinOptions_as_PackOptions(tflite_PackOptions_clone(B, (tflite_PackOptions_table_t)u.value));
    case 60: return tflite_BuiltinOptions_as_LogicalOrOptions(tflite_LogicalOrOptions_clone(B, (tflite_LogicalOrOptions_table_t)u.value));
    case 61: return tflite_BuiltinOptions_as_OneHotOptions(tflite_OneHotOptions_clone(B, (tflite_OneHotOptions_table_t)u.value));
    case 62: return tflite_BuiltinOptions_as_LogicalAndOptions(tflite_LogicalAndOptions_clone(B, (tflite_LogicalAndOptions_table_t)u.value));
    case 63: return tflite_BuiltinOptions_as_LogicalNotOptions(tflite_LogicalNotOptions_clone(B, (tflite_LogicalNotOptions_table_t)u.value));
    case 64: return tflite_BuiltinOptions_as_UnpackOptions(tflite_UnpackOptions_clone(B, (tflite_UnpackOptions_table_t)u.value));
    case 65: return tflite_BuiltinOptions_as_FloorDivOptions(tflite_FloorDivOptions_clone(B, (tflite_FloorDivOptions_table_t)u.value));
    case 66: return tflite_BuiltinOptions_as_SquareOptions(tflite_SquareOptions_clone(B, (tflite_SquareOptions_table_t)u.value));
    case 67: return tflite_BuiltinOptions_as_ZerosLikeOptions(tflite_ZerosLikeOptions_clone(B, (tflite_ZerosLikeOptions_table_t)u.value));
    case 68: return tflite_BuiltinOptions_as_FillOptions(tflite_FillOptions_clone(B, (tflite_FillOptions_table_t)u.value));
    case 69: return tflite_BuiltinOptions_as_BidirectionalSequenceLSTMOptions(tflite_BidirectionalSequenceLSTMOptions_clone(B, (tflite_BidirectionalSequenceLSTMOptions_table_t)u.value));
    case 70: return tflite_BuiltinOptions_as_BidirectionalSequenceRNNOptions(tflite_BidirectionalSequenceRNNOptions_clone(B, (tflite_BidirectionalSequenceRNNOptions_table_t)u.value));
    case 71: return tflite_BuiltinOptions_as_UnidirectionalSequenceLSTMOptions(tflite_UnidirectionalSequenceLSTMOptions_clone(B, (tflite_UnidirectionalSequenceLSTMOptions_table_t)u.value));
    case 72: return tflite_BuiltinOptions_as_FloorModOptions(tflite_FloorModOptions_clone(B, (tflite_FloorModOptions_table_t)u.value));
    case 73: return tflite_BuiltinOptions_as_RangeOptions(tflite_RangeOptions_clone(B, (tflite_RangeOptions_table_t)u.value));
    case 74: return tflite_BuiltinOptions_as_ResizeNearestNeighborOptions(tflite_ResizeNearestNeighborOptions_clone(B, (tflite_ResizeNearestNeighborOptions_table_t)u.value));
    case 75: return tflite_BuiltinOptions_as_LeakyReluOptions(tflite_LeakyReluOptions_clone(B, (tflite_LeakyReluOptions_table_t)u.value));
    case 76: return tflite_BuiltinOptions_as_SquaredDifferenceOptions(tflite_SquaredDifferenceOptions_clone(B, (tflite_SquaredDifferenceOptions_table_t)u.value));
    case 77: return tflite_BuiltinOptions_as_MirrorPadOptions(tflite_MirrorPadOptions_clone(B, (tflite_MirrorPadOptions_table_t)u.value));
    case 78: return tflite_BuiltinOptions_as_AbsOptions(tflite_AbsOptions_clone(B, (tflite_AbsOptions_table_t)u.value));
    case 79: return tflite_BuiltinOptions_as_SplitVOptions(tflite_SplitVOptions_clone(B, (tflite_SplitVOptions_table_t)u.value));
    case 80: return tflite_BuiltinOptions_as_UniqueOptions(tflite_UniqueOptions_clone(B, (tflite_UniqueOptions_table_t)u.value));
    case 81: return tflite_BuiltinOptions_as_ReverseV2Options(tflite_ReverseV2Options_clone(B, (tflite_ReverseV2Options_table_t)u.value));
    case 82: return tflite_BuiltinOptions_as_AddNOptions(tflite_AddNOptions_clone(B, (tflite_AddNOptions_table_t)u.value));
    case 83: return tflite_BuiltinOptions_as_GatherNdOptions(tflite_GatherNdOptions_clone(B, (tflite_GatherNdOptions_table_t)u.value));
    case 84: return tflite_BuiltinOptions_as_CosOptions(tflite_CosOptions_clone(B, (tflite_CosOptions_table_t)u.value));
    case 85: return tflite_BuiltinOptions_as_WhereOptions(tflite_WhereOptions_clone(B, (tflite_WhereOptions_table_t)u.value));
    case 86: return tflite_BuiltinOptions_as_RankOptions(tflite_RankOptions_clone(B, (tflite_RankOptions_table_t)u.value));
    case 87: return tflite_BuiltinOptions_as_ReverseSequenceOptions(tflite_ReverseSequenceOptions_clone(B, (tflite_ReverseSequenceOptions_table_t)u.value));
    case 88: return tflite_BuiltinOptions_as_MatrixDiagOptions(tflite_MatrixDiagOptions_clone(B, (tflite_MatrixDiagOptions_table_t)u.value));
    case 89: return tflite_BuiltinOptions_as_QuantizeOptions(tflite_QuantizeOptions_clone(B, (tflite_QuantizeOptions_table_t)u.value));
    case 90: return tflite_BuiltinOptions_as_MatrixSetDiagOptions(tflite_MatrixSetDiagOptions_clone(B, (tflite_MatrixSetDiagOptions_table_t)u.value));
    case 91: return tflite_BuiltinOptions_as_HardSwishOptions(tflite_HardSwishOptions_clone(B, (tflite_HardSwishOptions_table_t)u.value));
    case 92: return tflite_BuiltinOptions_as_IfOptions(tflite_IfOptions_clone(B, (tflite_IfOptions_table_t)u.value));
    case 93: return tflite_BuiltinOptions_as_WhileOptions(tflite_WhileOptions_clone(B, (tflite_WhileOptions_table_t)u.value));
    case 94: return tflite_BuiltinOptions_as_DepthToSpaceOptions(tflite_DepthToSpaceOptions_clone(B, (tflite_DepthToSpaceOptions_table_t)u.value));
    case 95: return tflite_BuiltinOptions_as_NonMaxSuppressionV4Options(tflite_NonMaxSuppressionV4Options_clone(B, (tflite_NonMaxSuppressionV4Options_table_t)u.value));
    case 96: return tflite_BuiltinOptions_as_NonMaxSuppressionV5Options(tflite_NonMaxSuppressionV5Options_clone(B, (tflite_NonMaxSuppressionV5Options_table_t)u.value));
    case 97: return tflite_BuiltinOptions_as_ScatterNdOptions(tflite_ScatterNdOptions_clone(B, (tflite_ScatterNdOptions_table_t)u.value));
    case 98: return tflite_BuiltinOptions_as_SelectV2Options(tflite_SelectV2Options_clone(B, (tflite_SelectV2Options_table_t)u.value));
    case 99: return tflite_BuiltinOptions_as_DensifyOptions(tflite_DensifyOptions_clone(B, (tflite_DensifyOptions_table_t)u.value));
    case 100: return tflite_BuiltinOptions_as_SegmentSumOptions(tflite_SegmentSumOptions_clone(B, (tflite_SegmentSumOptions_table_t)u.value));
    default: return tflite_BuiltinOptions_as_NONE();
    }
}

__flatbuffers_build_vector_field(0, flatbuffers_, tflite_CustomQuantization_custom, flatbuffers_uint8, uint8_t, tflite_CustomQuantization)

static inline tflite_CustomQuantization_ref_t tflite_CustomQuantization_create(flatbuffers_builder_t *B __tflite_CustomQuantization_formal_args)
{
    if (tflite_CustomQuantization_start(B)
        || tflite_CustomQuantization_custom_add(B, v0)) {
        return 0;
    }
    return tflite_CustomQuantization_end(B);
}

static tflite_CustomQuantization_ref_t tflite_CustomQuantization_clone(flatbuffers_builder_t *B, tflite_CustomQuantization_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_CustomQuantization_start(B)
        || tflite_CustomQuantization_custom_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_CustomQuantization_end(B));
}

__flatbuffers_build_vector_field(0, flatbuffers_, tflite_QuantizationParameters_min, flatbuffers_float, float, tflite_QuantizationParameters)
__flatbuffers_build_vector_field(1, flatbuffers_, tflite_QuantizationParameters_max, flatbuffers_float, float, tflite_QuantizationParameters)
__flatbuffers_build_vector_field(2, flatbuffers_, tflite_QuantizationParameters_scale, flatbuffers_float, float, tflite_QuantizationParameters)
__flatbuffers_build_vector_field(3, flatbuffers_, tflite_QuantizationParameters_zero_point, flatbuffers_int64, int64_t, tflite_QuantizationParameters)
__flatbuffers_build_union_field(5, flatbuffers_, tflite_QuantizationParameters_details, tflite_QuantizationDetails, tflite_QuantizationParameters)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_QuantizationParameters_details, tflite_QuantizationDetails, CustomQuantization, tflite_CustomQuantization)
__flatbuffers_build_scalar_field(6, flatbuffers_, tflite_QuantizationParameters_quantized_dimension, flatbuffers_int32, int32_t, 4, 4, INT32_C(0), tflite_QuantizationParameters)

static inline tflite_QuantizationParameters_ref_t tflite_QuantizationParameters_create(flatbuffers_builder_t *B __tflite_QuantizationParameters_formal_args)
{
    if (tflite_QuantizationParameters_start(B)
        || tflite_QuantizationParameters_min_add(B, v0)
        || tflite_QuantizationParameters_max_add(B, v1)
        || tflite_QuantizationParameters_scale_add(B, v2)
        || tflite_QuantizationParameters_zero_point_add(B, v3)
        || tflite_QuantizationParameters_details_add_value(B, v5)
        || tflite_QuantizationParameters_quantized_dimension_add(B, v6)
        || tflite_QuantizationParameters_details_add_type(B, v5.type)) {
        return 0;
    }
    return tflite_QuantizationParameters_end(B);
}

static tflite_QuantizationParameters_ref_t tflite_QuantizationParameters_clone(flatbuffers_builder_t *B, tflite_QuantizationParameters_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_QuantizationParameters_start(B)
        || tflite_QuantizationParameters_min_pick(B, t)
        || tflite_QuantizationParameters_max_pick(B, t)
        || tflite_QuantizationParameters_scale_pick(B, t)
        || tflite_QuantizationParameters_zero_point_pick(B, t)
        || tflite_QuantizationParameters_details_pick(B, t)
        || tflite_QuantizationParameters_quantized_dimension_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_QuantizationParameters_end(B));
}

__flatbuffers_build_vector_field(0, flatbuffers_, tflite_Int32Vector_values, flatbuffers_int32, int32_t, tflite_Int32Vector)

static inline tflite_Int32Vector_ref_t tflite_Int32Vector_create(flatbuffers_builder_t *B __tflite_Int32Vector_formal_args)
{
    if (tflite_Int32Vector_start(B)
        || tflite_Int32Vector_values_add(B, v0)) {
        return 0;
    }
    return tflite_Int32Vector_end(B);
}

static tflite_Int32Vector_ref_t tflite_Int32Vector_clone(flatbuffers_builder_t *B, tflite_Int32Vector_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_Int32Vector_start(B)
        || tflite_Int32Vector_values_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_Int32Vector_end(B));
}

__flatbuffers_build_vector_field(0, flatbuffers_, tflite_Uint16Vector_values, flatbuffers_uint16, uint16_t, tflite_Uint16Vector)

static inline tflite_Uint16Vector_ref_t tflite_Uint16Vector_create(flatbuffers_builder_t *B __tflite_Uint16Vector_formal_args)
{
    if (tflite_Uint16Vector_start(B)
        || tflite_Uint16Vector_values_add(B, v0)) {
        return 0;
    }
    return tflite_Uint16Vector_end(B);
}

static tflite_Uint16Vector_ref_t tflite_Uint16Vector_clone(flatbuffers_builder_t *B, tflite_Uint16Vector_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_Uint16Vector_start(B)
        || tflite_Uint16Vector_values_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_Uint16Vector_end(B));
}

__flatbuffers_build_vector_field(0, flatbuffers_, tflite_Uint8Vector_values, flatbuffers_uint8, uint8_t, tflite_Uint8Vector)

static inline tflite_Uint8Vector_ref_t tflite_Uint8Vector_create(flatbuffers_builder_t *B __tflite_Uint8Vector_formal_args)
{
    if (tflite_Uint8Vector_start(B)
        || tflite_Uint8Vector_values_add(B, v0)) {
        return 0;
    }
    return tflite_Uint8Vector_end(B);
}

static tflite_Uint8Vector_ref_t tflite_Uint8Vector_clone(flatbuffers_builder_t *B, tflite_Uint8Vector_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_Uint8Vector_start(B)
        || tflite_Uint8Vector_values_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_Uint8Vector_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, tflite_DimensionMetadata_format, tflite_DimensionType, tflite_DimensionType_enum_t, 1, 1, INT8_C(0), tflite_DimensionMetadata)
__flatbuffers_build_scalar_field(1, flatbuffers_, tflite_DimensionMetadata_dense_size, flatbuffers_int32, int32_t, 4, 4, INT32_C(0), tflite_DimensionMetadata)
__flatbuffers_build_union_field(3, flatbuffers_, tflite_DimensionMetadata_array_segments, tflite_SparseIndexVector, tflite_DimensionMetadata)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_DimensionMetadata_array_segments, tflite_SparseIndexVector, Int32Vector, tflite_Int32Vector)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_DimensionMetadata_array_segments, tflite_SparseIndexVector, Uint16Vector, tflite_Uint16Vector)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_DimensionMetadata_array_segments, tflite_SparseIndexVector, Uint8Vector, tflite_Uint8Vector)
__flatbuffers_build_union_field(5, flatbuffers_, tflite_DimensionMetadata_array_indices, tflite_SparseIndexVector, tflite_DimensionMetadata)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_DimensionMetadata_array_indices, tflite_SparseIndexVector, Int32Vector, tflite_Int32Vector)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_DimensionMetadata_array_indices, tflite_SparseIndexVector, Uint16Vector, tflite_Uint16Vector)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_DimensionMetadata_array_indices, tflite_SparseIndexVector, Uint8Vector, tflite_Uint8Vector)

static inline tflite_DimensionMetadata_ref_t tflite_DimensionMetadata_create(flatbuffers_builder_t *B __tflite_DimensionMetadata_formal_args)
{
    if (tflite_DimensionMetadata_start(B)
        || tflite_DimensionMetadata_dense_size_add(B, v1)
        || tflite_DimensionMetadata_array_segments_add_value(B, v3)
        || tflite_DimensionMetadata_array_indices_add_value(B, v5)
        || tflite_DimensionMetadata_format_add(B, v0)
        || tflite_DimensionMetadata_array_segments_add_type(B, v3.type)
        || tflite_DimensionMetadata_array_indices_add_type(B, v5.type)) {
        return 0;
    }
    return tflite_DimensionMetadata_end(B);
}

static tflite_DimensionMetadata_ref_t tflite_DimensionMetadata_clone(flatbuffers_builder_t *B, tflite_DimensionMetadata_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_DimensionMetadata_start(B)
        || tflite_DimensionMetadata_dense_size_pick(B, t)
        || tflite_DimensionMetadata_array_segments_pick(B, t)
        || tflite_DimensionMetadata_array_indices_pick(B, t)
        || tflite_DimensionMetadata_format_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_DimensionMetadata_end(B));
}

__flatbuffers_build_vector_field(0, flatbuffers_, tflite_SparsityParameters_traversal_order, flatbuffers_int32, int32_t, tflite_SparsityParameters)
__flatbuffers_build_vector_field(1, flatbuffers_, tflite_SparsityParameters_block_map, flatbuffers_int32, int32_t, tflite_SparsityParameters)
__flatbuffers_build_table_vector_field(2, flatbuffers_, tflite_SparsityParameters_dim_metadata, tflite_DimensionMetadata, tflite_SparsityParameters)

static inline tflite_SparsityParameters_ref_t tflite_SparsityParameters_create(flatbuffers_builder_t *B __tflite_SparsityParameters_formal_args)
{
    if (tflite_SparsityParameters_start(B)
        || tflite_SparsityParameters_traversal_order_add(B, v0)
        || tflite_SparsityParameters_block_map_add(B, v1)
        || tflite_SparsityParameters_dim_metadata_add(B, v2)) {
        return 0;
    }
    return tflite_SparsityParameters_end(B);
}

static tflite_SparsityParameters_ref_t tflite_SparsityParameters_clone(flatbuffers_builder_t *B, tflite_SparsityParameters_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_SparsityParameters_start(B)
        || tflite_SparsityParameters_traversal_order_pick(B, t)
        || tflite_SparsityParameters_block_map_pick(B, t)
        || tflite_SparsityParameters_dim_metadata_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_SparsityParameters_end(B));
}

__flatbuffers_build_vector_field(0, flatbuffers_, tflite_Tensor_shape, flatbuffers_int32, int32_t, tflite_Tensor)
__flatbuffers_build_scalar_field(1, flatbuffers_, tflite_Tensor_type, tflite_TensorType, tflite_TensorType_enum_t, 1, 1, INT8_C(0), tflite_Tensor)
__flatbuffers_build_scalar_field(2, flatbuffers_, tflite_Tensor_buffer, flatbuffers_uint32, uint32_t, 4, 4, UINT32_C(0), tflite_Tensor)
__flatbuffers_build_string_field(3, flatbuffers_, tflite_Tensor_name, tflite_Tensor)
__flatbuffers_build_table_field(4, flatbuffers_, tflite_Tensor_quantization, tflite_QuantizationParameters, tflite_Tensor)
__flatbuffers_build_scalar_field(5, flatbuffers_, tflite_Tensor_is_variable, flatbuffers_bool, flatbuffers_bool_t, 1, 1, UINT8_C(0), tflite_Tensor)
__flatbuffers_build_table_field(6, flatbuffers_, tflite_Tensor_sparsity, tflite_SparsityParameters, tflite_Tensor)
__flatbuffers_build_vector_field(7, flatbuffers_, tflite_Tensor_shape_signature, flatbuffers_int32, int32_t, tflite_Tensor)

static inline tflite_Tensor_ref_t tflite_Tensor_create(flatbuffers_builder_t *B __tflite_Tensor_formal_args)
{
    if (tflite_Tensor_start(B)
        || tflite_Tensor_shape_add(B, v0)
        || tflite_Tensor_buffer_add(B, v2)
        || tflite_Tensor_name_add(B, v3)
        || tflite_Tensor_quantization_add(B, v4)
        || tflite_Tensor_sparsity_add(B, v6)
        || tflite_Tensor_shape_signature_add(B, v7)
        || tflite_Tensor_type_add(B, v1)
        || tflite_Tensor_is_variable_add(B, v5)) {
        return 0;
    }
    return tflite_Tensor_end(B);
}

static tflite_Tensor_ref_t tflite_Tensor_clone(flatbuffers_builder_t *B, tflite_Tensor_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_Tensor_start(B)
        || tflite_Tensor_shape_pick(B, t)
        || tflite_Tensor_buffer_pick(B, t)
        || tflite_Tensor_name_pick(B, t)
        || tflite_Tensor_quantization_pick(B, t)
        || tflite_Tensor_sparsity_pick(B, t)
        || tflite_Tensor_shape_signature_pick(B, t)
        || tflite_Tensor_type_pick(B, t)
        || tflite_Tensor_is_variable_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_Tensor_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, tflite_Conv2DOptions_padding, tflite_Padding, tflite_Padding_enum_t, 1, 1, INT8_C(0), tflite_Conv2DOptions)
__flatbuffers_build_scalar_field(1, flatbuffers_, tflite_Conv2DOptions_stride_w, flatbuffers_int32, int32_t, 4, 4, INT32_C(0), tflite_Conv2DOptions)
__flatbuffers_build_scalar_field(2, flatbuffers_, tflite_Conv2DOptions_stride_h, flatbuffers_int32, int32_t, 4, 4, INT32_C(0), tflite_Conv2DOptions)
__flatbuffers_build_scalar_field(3, flatbuffers_, tflite_Conv2DOptions_fused_activation_function, tflite_ActivationFunctionType, tflite_ActivationFunctionType_enum_t, 1, 1, INT8_C(0), tflite_Conv2DOptions)
__flatbuffers_build_scalar_field(4, flatbuffers_, tflite_Conv2DOptions_dilation_w_factor, flatbuffers_int32, int32_t, 4, 4, INT32_C(1), tflite_Conv2DOptions)
__flatbuffers_build_scalar_field(5, flatbuffers_, tflite_Conv2DOptions_dilation_h_factor, flatbuffers_int32, int32_t, 4, 4, INT32_C(1), tflite_Conv2DOptions)

static inline tflite_Conv2DOptions_ref_t tflite_Conv2DOptions_create(flatbuffers_builder_t *B __tflite_Conv2DOptions_formal_args)
{
    if (tflite_Conv2DOptions_start(B)
        || tflite_Conv2DOptions_stride_w_add(B, v1)
        || tflite_Conv2DOptions_stride_h_add(B, v2)
        || tflite_Conv2DOptions_dilation_w_factor_add(B, v4)
        || tflite_Conv2DOptions_dilation_h_factor_add(B, v5)
        || tflite_Conv2DOptions_padding_add(B, v0)
        || tflite_Conv2DOptions_fused_activation_function_add(B, v3)) {
        return 0;
    }
    return tflite_Conv2DOptions_end(B);
}

static tflite_Conv2DOptions_ref_t tflite_Conv2DOptions_clone(flatbuffers_builder_t *B, tflite_Conv2DOptions_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_Conv2DOptions_start(B)
        || tflite_Conv2DOptions_stride_w_pick(B, t)
        || tflite_Conv2DOptions_stride_h_pick(B, t)
        || tflite_Conv2DOptions_dilation_w_factor_pick(B, t)
        || tflite_Conv2DOptions_dilation_h_factor_pick(B, t)
        || tflite_Conv2DOptions_padding_pick(B, t)
        || tflite_Conv2DOptions_fused_activation_function_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_Conv2DOptions_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, tflite_Pool2DOptions_padding, tflite_Padding, tflite_Padding_enum_t, 1, 1, INT8_C(0), tflite_Pool2DOptions)
__flatbuffers_build_scalar_field(1, flatbuffers_, tflite_Pool2DOptions_stride_w, flatbuffers_int32, int32_t, 4, 4, INT32_C(0), tflite_Pool2DOptions)
__flatbuffers_build_scalar_field(2, flatbuffers_, tflite_Pool2DOptions_stride_h, flatbuffers_int32, int32_t, 4, 4, INT32_C(0), tflite_Pool2DOptions)
__flatbuffers_build_scalar_field(3, flatbuffers_, tflite_Pool2DOptions_filter_width, flatbuffers_int32, int32_t, 4, 4, INT32_C(0), tflite_Pool2DOptions)
__flatbuffers_build_scalar_field(4, flatbuffers_, tflite_Pool2DOptions_filter_height, flatbuffers_int32, int32_t, 4, 4, INT32_C(0), tflite_Pool2DOptions)
__flatbuffers_build_scalar_field(5, flatbuffers_, tflite_Pool2DOptions_fused_activation_function, tflite_ActivationFunctionType, tflite_ActivationFunctionType_enum_t, 1, 1, INT8_C(0), tflite_Pool2DOptions)

static inline tflite_Pool2DOptions_ref_t tflite_Pool2DOptions_create(flatbuffers_builder_t *B __tflite_Pool2DOptions_formal_args)
{
    if (tflite_Pool2DOptions_start(B)
        || tflite_Pool2DOptions_stride_w_add(B, v1)
        || tflite_Pool2DOptions_stride_h_add(B, v2)
        || tflite_Pool2DOptions_filter_width_add(B, v3)
        || tflite_Pool2DOptions_filter_height_add(B, v4)
        || tflite_Pool2DOptions_padding_add(B, v0)
        || tflite_Pool2DOptions_fused_activation_function_add(B, v5)) {
        return 0;
    }
    return tflite_Pool2DOptions_end(B);
}

static tflite_Pool2DOptions_ref_t tflite_Pool2DOptions_clone(flatbuffers_builder_t *B, tflite_Pool2DOptions_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_Pool2DOptions_start(B)
        || tflite_Pool2DOptions_stride_w_pick(B, t)
        || tflite_Pool2DOptions_stride_h_pick(B, t)
        || tflite_Pool2DOptions_filter_width_pick(B, t)
        || tflite_Pool2DOptions_filter_height_pick(B, t)
        || tflite_Pool2DOptions_padding_pick(B, t)
        || tflite_Pool2DOptions_fused_activation_function_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_Pool2DOptions_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, tflite_DepthwiseConv2DOptions_padding, tflite_Padding, tflite_Padding_enum_t, 1, 1, INT8_C(0), tflite_DepthwiseConv2DOptions)
__flatbuffers_build_scalar_field(1, flatbuffers_, tflite_DepthwiseConv2DOptions_stride_w, flatbuffers_int32, int32_t, 4, 4, INT32_C(0), tflite_DepthwiseConv2DOptions)
__flatbuffers_build_scalar_field(2, flatbuffers_, tflite_DepthwiseConv2DOptions_stride_h, flatbuffers_int32, int32_t, 4, 4, INT32_C(0), tflite_DepthwiseConv2DOptions)
__flatbuffers_build_scalar_field(3, flatbuffers_, tflite_DepthwiseConv2DOptions_depth_multiplier, flatbuffers_int32, int32_t, 4, 4, INT32_C(0), tflite_DepthwiseConv2DOptions)
__flatbuffers_build_scalar_field(4, flatbuffers_, tflite_DepthwiseConv2DOptions_fused_activation_function, tflite_ActivationFunctionType, tflite_ActivationFunctionType_enum_t, 1, 1, INT8_C(0), tflite_DepthwiseConv2DOptions)
__flatbuffers_build_scalar_field(5, flatbuffers_, tflite_DepthwiseConv2DOptions_dilation_w_factor, flatbuffers_int32, int32_t, 4, 4, INT32_C(1), tflite_DepthwiseConv2DOptions)
__flatbuffers_build_scalar_field(6, flatbuffers_, tflite_DepthwiseConv2DOptions_dilation_h_factor, flatbuffers_int32, int32_t, 4, 4, INT32_C(1), tflite_DepthwiseConv2DOptions)

static inline tflite_DepthwiseConv2DOptions_ref_t tflite_DepthwiseConv2DOptions_create(flatbuffers_builder_t *B __tflite_DepthwiseConv2DOptions_formal_args)
{
    if (tflite_DepthwiseConv2DOptions_start(B)
        || tflite_DepthwiseConv2DOptions_stride_w_add(B, v1)
        || tflite_DepthwiseConv2DOptions_stride_h_add(B, v2)
        || tflite_DepthwiseConv2DOptions_depth_multiplier_add(B, v3)
        || tflite_DepthwiseConv2DOptions_dilation_w_factor_add(B, v5)
        || tflite_DepthwiseConv2DOptions_dilation_h_factor_add(B, v6)
        || tflite_DepthwiseConv2DOptions_padding_add(B, v0)
        || tflite_DepthwiseConv2DOptions_fused_activation_function_add(B, v4)) {
        return 0;
    }
    return tflite_DepthwiseConv2DOptions_end(B);
}

static tflite_DepthwiseConv2DOptions_ref_t tflite_DepthwiseConv2DOptions_clone(flatbuffers_builder_t *B, tflite_DepthwiseConv2DOptions_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_DepthwiseConv2DOptions_start(B)
        || tflite_DepthwiseConv2DOptions_stride_w_pick(B, t)
        || tflite_DepthwiseConv2DOptions_stride_h_pick(B, t)
        || tflite_DepthwiseConv2DOptions_depth_multiplier_pick(B, t)
        || tflite_DepthwiseConv2DOptions_dilation_w_factor_pick(B, t)
        || tflite_DepthwiseConv2DOptions_dilation_h_factor_pick(B, t)
        || tflite_DepthwiseConv2DOptions_padding_pick(B, t)
        || tflite_DepthwiseConv2DOptions_fused_activation_function_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_DepthwiseConv2DOptions_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, tflite_ConcatEmbeddingsOptions_num_channels, flatbuffers_int32, int32_t, 4, 4, INT32_C(0), tflite_ConcatEmbeddingsOptions)
__flatbuffers_build_vector_field(1, flatbuffers_, tflite_ConcatEmbeddingsOptions_num_columns_per_channel, flatbuffers_int32, int32_t, tflite_ConcatEmbeddingsOptions)
__flatbuffers_build_vector_field(2, flatbuffers_, tflite_ConcatEmbeddingsOptions_embedding_dim_per_channel, flatbuffers_int32, int32_t, tflite_ConcatEmbeddingsOptions)

static inline tflite_ConcatEmbeddingsOptions_ref_t tflite_ConcatEmbeddingsOptions_create(flatbuffers_builder_t *B __tflite_ConcatEmbeddingsOptions_formal_args)
{
    if (tflite_ConcatEmbeddingsOptions_start(B)
        || tflite_ConcatEmbeddingsOptions_num_channels_add(B, v0)
        || tflite_ConcatEmbeddingsOptions_num_columns_per_channel_add(B, v1)
        || tflite_ConcatEmbeddingsOptions_embedding_dim_per_channel_add(B, v2)) {
        return 0;
    }
    return tflite_ConcatEmbeddingsOptions_end(B);
}

static tflite_ConcatEmbeddingsOptions_ref_t tflite_ConcatEmbeddingsOptions_clone(flatbuffers_builder_t *B, tflite_ConcatEmbeddingsOptions_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_ConcatEmbeddingsOptions_start(B)
        || tflite_ConcatEmbeddingsOptions_num_channels_pick(B, t)
        || tflite_ConcatEmbeddingsOptions_num_columns_per_channel_pick(B, t)
        || tflite_ConcatEmbeddingsOptions_embedding_dim_per_channel_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_ConcatEmbeddingsOptions_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, tflite_LSHProjectionOptions_type, tflite_LSHProjectionType, tflite_LSHProjectionType_enum_t, 1, 1, INT8_C(0), tflite_LSHProjectionOptions)

static inline tflite_LSHProjectionOptions_ref_t tflite_LSHProjectionOptions_create(flatbuffers_builder_t *B __tflite_LSHProjectionOptions_formal_args)
{
    if (tflite_LSHProjectionOptions_start(B)
        || tflite_LSHProjectionOptions_type_add(B, v0)) {
        return 0;
    }
    return tflite_LSHProjectionOptions_end(B);
}

static tflite_LSHProjectionOptions_ref_t tflite_LSHProjectionOptions_clone(flatbuffers_builder_t *B, tflite_LSHProjectionOptions_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_LSHProjectionOptions_start(B)
        || tflite_LSHProjectionOptions_type_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_LSHProjectionOptions_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, tflite_SVDFOptions_rank, flatbuffers_int32, int32_t, 4, 4, INT32_C(0), tflite_SVDFOptions)
__flatbuffers_build_scalar_field(1, flatbuffers_, tflite_SVDFOptions_fused_activation_function, tflite_ActivationFunctionType, tflite_ActivationFunctionType_enum_t, 1, 1, INT8_C(0), tflite_SVDFOptions)

static inline tflite_SVDFOptions_ref_t tflite_SVDFOptions_create(flatbuffers_builder_t *B __tflite_SVDFOptions_formal_args)
{
    if (tflite_SVDFOptions_start(B)
        || tflite_SVDFOptions_rank_add(B, v0)
        || tflite_SVDFOptions_fused_activation_function_add(B, v1)) {
        return 0;
    }
    return tflite_SVDFOptions_end(B);
}

static tflite_SVDFOptions_ref_t tflite_SVDFOptions_clone(flatbuffers_builder_t *B, tflite_SVDFOptions_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_SVDFOptions_start(B)
        || tflite_SVDFOptions_rank_pick(B, t)
        || tflite_SVDFOptions_fused_activation_function_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_SVDFOptions_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, tflite_RNNOptions_fused_activation_function, tflite_ActivationFunctionType, tflite_ActivationFunctionType_enum_t, 1, 1, INT8_C(0), tflite_RNNOptions)

static inline tflite_RNNOptions_ref_t tflite_RNNOptions_create(flatbuffers_builder_t *B __tflite_RNNOptions_formal_args)
{
    if (tflite_RNNOptions_start(B)
        || tflite_RNNOptions_fused_activation_function_add(B, v0)) {
        return 0;
    }
    return tflite_RNNOptions_end(B);
}

static tflite_RNNOptions_ref_t tflite_RNNOptions_clone(flatbuffers_builder_t *B, tflite_RNNOptions_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_RNNOptions_start(B)
        || tflite_RNNOptions_fused_activation_function_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_RNNOptions_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, tflite_SequenceRNNOptions_time_major, flatbuffers_bool, flatbuffers_bool_t, 1, 1, UINT8_C(0), tflite_SequenceRNNOptions)
__flatbuffers_build_scalar_field(1, flatbuffers_, tflite_SequenceRNNOptions_fused_activation_function, tflite_ActivationFunctionType, tflite_ActivationFunctionType_enum_t, 1, 1, INT8_C(0), tflite_SequenceRNNOptions)

static inline tflite_SequenceRNNOptions_ref_t tflite_SequenceRNNOptions_create(flatbuffers_builder_t *B __tflite_SequenceRNNOptions_formal_args)
{
    if (tflite_SequenceRNNOptions_start(B)
        || tflite_SequenceRNNOptions_time_major_add(B, v0)
        || tflite_SequenceRNNOptions_fused_activation_function_add(B, v1)) {
        return 0;
    }
    return tflite_SequenceRNNOptions_end(B);
}

static tflite_SequenceRNNOptions_ref_t tflite_SequenceRNNOptions_clone(flatbuffers_builder_t *B, tflite_SequenceRNNOptions_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_SequenceRNNOptions_start(B)
        || tflite_SequenceRNNOptions_time_major_pick(B, t)
        || tflite_SequenceRNNOptions_fused_activation_function_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_SequenceRNNOptions_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, tflite_BidirectionalSequenceRNNOptions_time_major, flatbuffers_bool, flatbuffers_bool_t, 1, 1, UINT8_C(0), tflite_BidirectionalSequenceRNNOptions)
__flatbuffers_build_scalar_field(1, flatbuffers_, tflite_BidirectionalSequenceRNNOptions_fused_activation_function, tflite_ActivationFunctionType, tflite_ActivationFunctionType_enum_t, 1, 1, INT8_C(0), tflite_BidirectionalSequenceRNNOptions)
__flatbuffers_build_scalar_field(2, flatbuffers_, tflite_BidirectionalSequenceRNNOptions_merge_outputs, flatbuffers_bool, flatbuffers_bool_t, 1, 1, UINT8_C(0), tflite_BidirectionalSequenceRNNOptions)

static inline tflite_BidirectionalSequenceRNNOptions_ref_t tflite_BidirectionalSequenceRNNOptions_create(flatbuffers_builder_t *B __tflite_BidirectionalSequenceRNNOptions_formal_args)
{
    if (tflite_BidirectionalSequenceRNNOptions_start(B)
        || tflite_BidirectionalSequenceRNNOptions_time_major_add(B, v0)
        || tflite_BidirectionalSequenceRNNOptions_fused_activation_function_add(B, v1)
        || tflite_BidirectionalSequenceRNNOptions_merge_outputs_add(B, v2)) {
        return 0;
    }
    return tflite_BidirectionalSequenceRNNOptions_end(B);
}

static tflite_BidirectionalSequenceRNNOptions_ref_t tflite_BidirectionalSequenceRNNOptions_clone(flatbuffers_builder_t *B, tflite_BidirectionalSequenceRNNOptions_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_BidirectionalSequenceRNNOptions_start(B)
        || tflite_BidirectionalSequenceRNNOptions_time_major_pick(B, t)
        || tflite_BidirectionalSequenceRNNOptions_fused_activation_function_pick(B, t)
        || tflite_BidirectionalSequenceRNNOptions_merge_outputs_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_BidirectionalSequenceRNNOptions_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, tflite_FullyConnectedOptions_fused_activation_function, tflite_ActivationFunctionType, tflite_ActivationFunctionType_enum_t, 1, 1, INT8_C(0), tflite_FullyConnectedOptions)
__flatbuffers_build_scalar_field(1, flatbuffers_, tflite_FullyConnectedOptions_weights_format, tflite_FullyConnectedOptionsWeightsFormat, tflite_FullyConnectedOptionsWeightsFormat_enum_t, 1, 1, INT8_C(0), tflite_FullyConnectedOptions)
__flatbuffers_build_scalar_field(2, flatbuffers_, tflite_FullyConnectedOptions_keep_num_dims, flatbuffers_bool, flatbuffers_bool_t, 1, 1, UINT8_C(0), tflite_FullyConnectedOptions)

static inline tflite_FullyConnectedOptions_ref_t tflite_FullyConnectedOptions_create(flatbuffers_builder_t *B __tflite_FullyConnectedOptions_formal_args)
{
    if (tflite_FullyConnectedOptions_start(B)
        || tflite_FullyConnectedOptions_fused_activation_function_add(B, v0)
        || tflite_FullyConnectedOptions_weights_format_add(B, v1)
        || tflite_FullyConnectedOptions_keep_num_dims_add(B, v2)) {
        return 0;
    }
    return tflite_FullyConnectedOptions_end(B);
}

static tflite_FullyConnectedOptions_ref_t tflite_FullyConnectedOptions_clone(flatbuffers_builder_t *B, tflite_FullyConnectedOptions_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_FullyConnectedOptions_start(B)
        || tflite_FullyConnectedOptions_fused_activation_function_pick(B, t)
        || tflite_FullyConnectedOptions_weights_format_pick(B, t)
        || tflite_FullyConnectedOptions_keep_num_dims_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_FullyConnectedOptions_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, tflite_SoftmaxOptions_beta, flatbuffers_float, float, 4, 4, 0.00000000f, tflite_SoftmaxOptions)

static inline tflite_SoftmaxOptions_ref_t tflite_SoftmaxOptions_create(flatbuffers_builder_t *B __tflite_SoftmaxOptions_formal_args)
{
    if (tflite_SoftmaxOptions_start(B)
        || tflite_SoftmaxOptions_beta_add(B, v0)) {
        return 0;
    }
    return tflite_SoftmaxOptions_end(B);
}

static tflite_SoftmaxOptions_ref_t tflite_SoftmaxOptions_clone(flatbuffers_builder_t *B, tflite_SoftmaxOptions_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_SoftmaxOptions_start(B)
        || tflite_SoftmaxOptions_beta_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_SoftmaxOptions_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, tflite_ConcatenationOptions_axis, flatbuffers_int32, int32_t, 4, 4, INT32_C(0), tflite_ConcatenationOptions)
__flatbuffers_build_scalar_field(1, flatbuffers_, tflite_ConcatenationOptions_fused_activation_function, tflite_ActivationFunctionType, tflite_ActivationFunctionType_enum_t, 1, 1, INT8_C(0), tflite_ConcatenationOptions)

static inline tflite_ConcatenationOptions_ref_t tflite_ConcatenationOptions_create(flatbuffers_builder_t *B __tflite_ConcatenationOptions_formal_args)
{
    if (tflite_ConcatenationOptions_start(B)
        || tflite_ConcatenationOptions_axis_add(B, v0)
        || tflite_ConcatenationOptions_fused_activation_function_add(B, v1)) {
        return 0;
    }
    return tflite_ConcatenationOptions_end(B);
}

static tflite_ConcatenationOptions_ref_t tflite_ConcatenationOptions_clone(flatbuffers_builder_t *B, tflite_ConcatenationOptions_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_ConcatenationOptions_start(B)
        || tflite_ConcatenationOptions_axis_pick(B, t)
        || tflite_ConcatenationOptions_fused_activation_function_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_ConcatenationOptions_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, tflite_AddOptions_fused_activation_function, tflite_ActivationFunctionType, tflite_ActivationFunctionType_enum_t, 1, 1, INT8_C(0), tflite_AddOptions)

static inline tflite_AddOptions_ref_t tflite_AddOptions_create(flatbuffers_builder_t *B __tflite_AddOptions_formal_args)
{
    if (tflite_AddOptions_start(B)
        || tflite_AddOptions_fused_activation_function_add(B, v0)) {
        return 0;
    }
    return tflite_AddOptions_end(B);
}

static tflite_AddOptions_ref_t tflite_AddOptions_clone(flatbuffers_builder_t *B, tflite_AddOptions_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_AddOptions_start(B)
        || tflite_AddOptions_fused_activation_function_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_AddOptions_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, tflite_MulOptions_fused_activation_function, tflite_ActivationFunctionType, tflite_ActivationFunctionType_enum_t, 1, 1, INT8_C(0), tflite_MulOptions)

static inline tflite_MulOptions_ref_t tflite_MulOptions_create(flatbuffers_builder_t *B __tflite_MulOptions_formal_args)
{
    if (tflite_MulOptions_start(B)
        || tflite_MulOptions_fused_activation_function_add(B, v0)) {
        return 0;
    }
    return tflite_MulOptions_end(B);
}

static tflite_MulOptions_ref_t tflite_MulOptions_clone(flatbuffers_builder_t *B, tflite_MulOptions_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_MulOptions_start(B)
        || tflite_MulOptions_fused_activation_function_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_MulOptions_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, tflite_L2NormOptions_fused_activation_function, tflite_ActivationFunctionType, tflite_ActivationFunctionType_enum_t, 1, 1, INT8_C(0), tflite_L2NormOptions)

static inline tflite_L2NormOptions_ref_t tflite_L2NormOptions_create(flatbuffers_builder_t *B __tflite_L2NormOptions_formal_args)
{
    if (tflite_L2NormOptions_start(B)
        || tflite_L2NormOptions_fused_activation_function_add(B, v0)) {
        return 0;
    }
    return tflite_L2NormOptions_end(B);
}

static tflite_L2NormOptions_ref_t tflite_L2NormOptions_clone(flatbuffers_builder_t *B, tflite_L2NormOptions_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_L2NormOptions_start(B)
        || tflite_L2NormOptions_fused_activation_function_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_L2NormOptions_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, tflite_LocalResponseNormalizationOptions_radius, flatbuffers_int32, int32_t, 4, 4, INT32_C(0), tflite_LocalResponseNormalizationOptions)
__flatbuffers_build_scalar_field(1, flatbuffers_, tflite_LocalResponseNormalizationOptions_bias, flatbuffers_float, float, 4, 4, 0.00000000f, tflite_LocalResponseNormalizationOptions)
__flatbuffers_build_scalar_field(2, flatbuffers_, tflite_LocalResponseNormalizationOptions_alpha, flatbuffers_float, float, 4, 4, 0.00000000f, tflite_LocalResponseNormalizationOptions)
__flatbuffers_build_scalar_field(3, flatbuffers_, tflite_LocalResponseNormalizationOptions_beta, flatbuffers_float, float, 4, 4, 0.00000000f, tflite_LocalResponseNormalizationOptions)

static inline tflite_LocalResponseNormalizationOptions_ref_t tflite_LocalResponseNormalizationOptions_create(flatbuffers_builder_t *B __tflite_LocalResponseNormalizationOptions_formal_args)
{
    if (tflite_LocalResponseNormalizationOptions_start(B)
        || tflite_LocalResponseNormalizationOptions_radius_add(B, v0)
        || tflite_LocalResponseNormalizationOptions_bias_add(B, v1)
        || tflite_LocalResponseNormalizationOptions_alpha_add(B, v2)
        || tflite_LocalResponseNormalizationOptions_beta_add(B, v3)) {
        return 0;
    }
    return tflite_LocalResponseNormalizationOptions_end(B);
}

static tflite_LocalResponseNormalizationOptions_ref_t tflite_LocalResponseNormalizationOptions_clone(flatbuffers_builder_t *B, tflite_LocalResponseNormalizationOptions_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_LocalResponseNormalizationOptions_start(B)
        || tflite_LocalResponseNormalizationOptions_radius_pick(B, t)
        || tflite_LocalResponseNormalizationOptions_bias_pick(B, t)
        || tflite_LocalResponseNormalizationOptions_alpha_pick(B, t)
        || tflite_LocalResponseNormalizationOptions_beta_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_LocalResponseNormalizationOptions_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, tflite_LSTMOptions_fused_activation_function, tflite_ActivationFunctionType, tflite_ActivationFunctionType_enum_t, 1, 1, INT8_C(0), tflite_LSTMOptions)
__flatbuffers_build_scalar_field(1, flatbuffers_, tflite_LSTMOptions_cell_clip, flatbuffers_float, float, 4, 4, 0.00000000f, tflite_LSTMOptions)
__flatbuffers_build_scalar_field(2, flatbuffers_, tflite_LSTMOptions_proj_clip, flatbuffers_float, float, 4, 4, 0.00000000f, tflite_LSTMOptions)
__flatbuffers_build_scalar_field(3, flatbuffers_, tflite_LSTMOptions_kernel_type, tflite_LSTMKernelType, tflite_LSTMKernelType_enum_t, 1, 1, INT8_C(0), tflite_LSTMOptions)

static inline tflite_LSTMOptions_ref_t tflite_LSTMOptions_create(flatbuffers_builder_t *B __tflite_LSTMOptions_formal_args)
{
    if (tflite_LSTMOptions_start(B)
        || tflite_LSTMOptions_cell_clip_add(B, v1)
        || tflite_LSTMOptions_proj_clip_add(B, v2)
        || tflite_LSTMOptions_fused_activation_function_add(B, v0)
        || tflite_LSTMOptions_kernel_type_add(B, v3)) {
        return 0;
    }
    return tflite_LSTMOptions_end(B);
}

static tflite_LSTMOptions_ref_t tflite_LSTMOptions_clone(flatbuffers_builder_t *B, tflite_LSTMOptions_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_LSTMOptions_start(B)
        || tflite_LSTMOptions_cell_clip_pick(B, t)
        || tflite_LSTMOptions_proj_clip_pick(B, t)
        || tflite_LSTMOptions_fused_activation_function_pick(B, t)
        || tflite_LSTMOptions_kernel_type_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_LSTMOptions_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, tflite_UnidirectionalSequenceLSTMOptions_fused_activation_function, tflite_ActivationFunctionType, tflite_ActivationFunctionType_enum_t, 1, 1, INT8_C(0), tflite_UnidirectionalSequenceLSTMOptions)
__flatbuffers_build_scalar_field(1, flatbuffers_, tflite_UnidirectionalSequenceLSTMOptions_cell_clip, flatbuffers_float, float, 4, 4, 0.00000000f, tflite_UnidirectionalSequenceLSTMOptions)
__flatbuffers_build_scalar_field(2, flatbuffers_, tflite_UnidirectionalSequenceLSTMOptions_proj_clip, flatbuffers_float, float, 4, 4, 0.00000000f, tflite_UnidirectionalSequenceLSTMOptions)
__flatbuffers_build_scalar_field(3, flatbuffers_, tflite_UnidirectionalSequenceLSTMOptions_time_major, flatbuffers_bool, flatbuffers_bool_t, 1, 1, UINT8_C(0), tflite_UnidirectionalSequenceLSTMOptions)

static inline tflite_UnidirectionalSequenceLSTMOptions_ref_t tflite_UnidirectionalSequenceLSTMOptions_create(flatbuffers_builder_t *B __tflite_UnidirectionalSequenceLSTMOptions_formal_args)
{
    if (tflite_UnidirectionalSequenceLSTMOptions_start(B)
        || tflite_UnidirectionalSequenceLSTMOptions_cell_clip_add(B, v1)
        || tflite_UnidirectionalSequenceLSTMOptions_proj_clip_add(B, v2)
        || tflite_UnidirectionalSequenceLSTMOptions_fused_activation_function_add(B, v0)
        || tflite_UnidirectionalSequenceLSTMOptions_time_major_add(B, v3)) {
        return 0;
    }
    return tflite_UnidirectionalSequenceLSTMOptions_end(B);
}

static tflite_UnidirectionalSequenceLSTMOptions_ref_t tflite_UnidirectionalSequenceLSTMOptions_clone(flatbuffers_builder_t *B, tflite_UnidirectionalSequenceLSTMOptions_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_UnidirectionalSequenceLSTMOptions_start(B)
        || tflite_UnidirectionalSequenceLSTMOptions_cell_clip_pick(B, t)
        || tflite_UnidirectionalSequenceLSTMOptions_proj_clip_pick(B, t)
        || tflite_UnidirectionalSequenceLSTMOptions_fused_activation_function_pick(B, t)
        || tflite_UnidirectionalSequenceLSTMOptions_time_major_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_UnidirectionalSequenceLSTMOptions_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, tflite_BidirectionalSequenceLSTMOptions_fused_activation_function, tflite_ActivationFunctionType, tflite_ActivationFunctionType_enum_t, 1, 1, INT8_C(0), tflite_BidirectionalSequenceLSTMOptions)
__flatbuffers_build_scalar_field(1, flatbuffers_, tflite_BidirectionalSequenceLSTMOptions_cell_clip, flatbuffers_float, float, 4, 4, 0.00000000f, tflite_BidirectionalSequenceLSTMOptions)
__flatbuffers_build_scalar_field(2, flatbuffers_, tflite_BidirectionalSequenceLSTMOptions_proj_clip, flatbuffers_float, float, 4, 4, 0.00000000f, tflite_BidirectionalSequenceLSTMOptions)
__flatbuffers_build_scalar_field(3, flatbuffers_, tflite_BidirectionalSequenceLSTMOptions_merge_outputs, flatbuffers_bool, flatbuffers_bool_t, 1, 1, UINT8_C(0), tflite_BidirectionalSequenceLSTMOptions)
__flatbuffers_build_scalar_field(4, flatbuffers_, tflite_BidirectionalSequenceLSTMOptions_time_major, flatbuffers_bool, flatbuffers_bool_t, 1, 1, UINT8_C(1), tflite_BidirectionalSequenceLSTMOptions)

static inline tflite_BidirectionalSequenceLSTMOptions_ref_t tflite_BidirectionalSequenceLSTMOptions_create(flatbuffers_builder_t *B __tflite_BidirectionalSequenceLSTMOptions_formal_args)
{
    if (tflite_BidirectionalSequenceLSTMOptions_start(B)
        || tflite_BidirectionalSequenceLSTMOptions_cell_clip_add(B, v1)
        || tflite_BidirectionalSequenceLSTMOptions_proj_clip_add(B, v2)
        || tflite_BidirectionalSequenceLSTMOptions_fused_activation_function_add(B, v0)
        || tflite_BidirectionalSequenceLSTMOptions_merge_outputs_add(B, v3)
        || tflite_BidirectionalSequenceLSTMOptions_time_major_add(B, v4)) {
        return 0;
    }
    return tflite_BidirectionalSequenceLSTMOptions_end(B);
}

static tflite_BidirectionalSequenceLSTMOptions_ref_t tflite_BidirectionalSequenceLSTMOptions_clone(flatbuffers_builder_t *B, tflite_BidirectionalSequenceLSTMOptions_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_BidirectionalSequenceLSTMOptions_start(B)
        || tflite_BidirectionalSequenceLSTMOptions_cell_clip_pick(B, t)
        || tflite_BidirectionalSequenceLSTMOptions_proj_clip_pick(B, t)
        || tflite_BidirectionalSequenceLSTMOptions_fused_activation_function_pick(B, t)
        || tflite_BidirectionalSequenceLSTMOptions_merge_outputs_pick(B, t)
        || tflite_BidirectionalSequenceLSTMOptions_time_major_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_BidirectionalSequenceLSTMOptions_end(B));
}

/* Skipping build of deprecated field: 'tflite_ResizeBilinearOptions_new_height' */

/* Skipping build of deprecated field: 'tflite_ResizeBilinearOptions_new_width' */

__flatbuffers_build_scalar_field(2, flatbuffers_, tflite_ResizeBilinearOptions_align_corners, flatbuffers_bool, flatbuffers_bool_t, 1, 1, UINT8_C(0), tflite_ResizeBilinearOptions)
__flatbuffers_build_scalar_field(3, flatbuffers_, tflite_ResizeBilinearOptions_half_pixel_centers, flatbuffers_bool, flatbuffers_bool_t, 1, 1, UINT8_C(0), tflite_ResizeBilinearOptions)

static inline tflite_ResizeBilinearOptions_ref_t tflite_ResizeBilinearOptions_create(flatbuffers_builder_t *B __tflite_ResizeBilinearOptions_formal_args)
{
    if (tflite_ResizeBilinearOptions_start(B)
        || tflite_ResizeBilinearOptions_align_corners_add(B, v2)
        || tflite_ResizeBilinearOptions_half_pixel_centers_add(B, v3)) {
        return 0;
    }
    return tflite_ResizeBilinearOptions_end(B);
}

static tflite_ResizeBilinearOptions_ref_t tflite_ResizeBilinearOptions_clone(flatbuffers_builder_t *B, tflite_ResizeBilinearOptions_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_ResizeBilinearOptions_start(B)
        || tflite_ResizeBilinearOptions_align_corners_pick(B, t)
        || tflite_ResizeBilinearOptions_half_pixel_centers_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_ResizeBilinearOptions_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, tflite_ResizeNearestNeighborOptions_align_corners, flatbuffers_bool, flatbuffers_bool_t, 1, 1, UINT8_C(0), tflite_ResizeNearestNeighborOptions)

static inline tflite_ResizeNearestNeighborOptions_ref_t tflite_ResizeNearestNeighborOptions_create(flatbuffers_builder_t *B __tflite_ResizeNearestNeighborOptions_formal_args)
{
    if (tflite_ResizeNearestNeighborOptions_start(B)
        || tflite_ResizeNearestNeighborOptions_align_corners_add(B, v0)) {
        return 0;
    }
    return tflite_ResizeNearestNeighborOptions_end(B);
}

static tflite_ResizeNearestNeighborOptions_ref_t tflite_ResizeNearestNeighborOptions_clone(flatbuffers_builder_t *B, tflite_ResizeNearestNeighborOptions_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_ResizeNearestNeighborOptions_start(B)
        || tflite_ResizeNearestNeighborOptions_align_corners_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_ResizeNearestNeighborOptions_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, tflite_CallOptions_subgraph, flatbuffers_uint32, uint32_t, 4, 4, UINT32_C(0), tflite_CallOptions)

static inline tflite_CallOptions_ref_t tflite_CallOptions_create(flatbuffers_builder_t *B __tflite_CallOptions_formal_args)
{
    if (tflite_CallOptions_start(B)
        || tflite_CallOptions_subgraph_add(B, v0)) {
        return 0;
    }
    return tflite_CallOptions_end(B);
}

static tflite_CallOptions_ref_t tflite_CallOptions_clone(flatbuffers_builder_t *B, tflite_CallOptions_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_CallOptions_start(B)
        || tflite_CallOptions_subgraph_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_CallOptions_end(B));
}


static inline tflite_PadOptions_ref_t tflite_PadOptions_create(flatbuffers_builder_t *B __tflite_PadOptions_formal_args)
{
    if (tflite_PadOptions_start(B)) {
        return 0;
    }
    return tflite_PadOptions_end(B);
}

static tflite_PadOptions_ref_t tflite_PadOptions_clone(flatbuffers_builder_t *B, tflite_PadOptions_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_PadOptions_start(B)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_PadOptions_end(B));
}


static inline tflite_PadV2Options_ref_t tflite_PadV2Options_create(flatbuffers_builder_t *B __tflite_PadV2Options_formal_args)
{
    if (tflite_PadV2Options_start(B)) {
        return 0;
    }
    return tflite_PadV2Options_end(B);
}

static tflite_PadV2Options_ref_t tflite_PadV2Options_clone(flatbuffers_builder_t *B, tflite_PadV2Options_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_PadV2Options_start(B)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_PadV2Options_end(B));
}

__flatbuffers_build_vector_field(0, flatbuffers_, tflite_ReshapeOptions_new_shape, flatbuffers_int32, int32_t, tflite_ReshapeOptions)

static inline tflite_ReshapeOptions_ref_t tflite_ReshapeOptions_create(flatbuffers_builder_t *B __tflite_ReshapeOptions_formal_args)
{
    if (tflite_ReshapeOptions_start(B)
        || tflite_ReshapeOptions_new_shape_add(B, v0)) {
        return 0;
    }
    return tflite_ReshapeOptions_end(B);
}

static tflite_ReshapeOptions_ref_t tflite_ReshapeOptions_clone(flatbuffers_builder_t *B, tflite_ReshapeOptions_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_ReshapeOptions_start(B)
        || tflite_ReshapeOptions_new_shape_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_ReshapeOptions_end(B));
}


static inline tflite_SpaceToBatchNDOptions_ref_t tflite_SpaceToBatchNDOptions_create(flatbuffers_builder_t *B __tflite_SpaceToBatchNDOptions_formal_args)
{
    if (tflite_SpaceToBatchNDOptions_start(B)) {
        return 0;
    }
    return tflite_SpaceToBatchNDOptions_end(B);
}

static tflite_SpaceToBatchNDOptions_ref_t tflite_SpaceToBatchNDOptions_clone(flatbuffers_builder_t *B, tflite_SpaceToBatchNDOptions_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_SpaceToBatchNDOptions_start(B)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_SpaceToBatchNDOptions_end(B));
}


static inline tflite_BatchToSpaceNDOptions_ref_t tflite_BatchToSpaceNDOptions_create(flatbuffers_builder_t *B __tflite_BatchToSpaceNDOptions_formal_args)
{
    if (tflite_BatchToSpaceNDOptions_start(B)) {
        return 0;
    }
    return tflite_BatchToSpaceNDOptions_end(B);
}

static tflite_BatchToSpaceNDOptions_ref_t tflite_BatchToSpaceNDOptions_clone(flatbuffers_builder_t *B, tflite_BatchToSpaceNDOptions_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_BatchToSpaceNDOptions_start(B)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_BatchToSpaceNDOptions_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, tflite_SkipGramOptions_ngram_size, flatbuffers_int32, int32_t, 4, 4, INT32_C(0), tflite_SkipGramOptions)
__flatbuffers_build_scalar_field(1, flatbuffers_, tflite_SkipGramOptions_max_skip_size, flatbuffers_int32, int32_t, 4, 4, INT32_C(0), tflite_SkipGramOptions)
__flatbuffers_build_scalar_field(2, flatbuffers_, tflite_SkipGramOptions_include_all_ngrams, flatbuffers_bool, flatbuffers_bool_t, 1, 1, UINT8_C(0), tflite_SkipGramOptions)

static inline tflite_SkipGramOptions_ref_t tflite_SkipGramOptions_create(flatbuffers_builder_t *B __tflite_SkipGramOptions_formal_args)
{
    if (tflite_SkipGramOptions_start(B)
        || tflite_SkipGramOptions_ngram_size_add(B, v0)
        || tflite_SkipGramOptions_max_skip_size_add(B, v1)
        || tflite_SkipGramOptions_include_all_ngrams_add(B, v2)) {
        return 0;
    }
    return tflite_SkipGramOptions_end(B);
}

static tflite_SkipGramOptions_ref_t tflite_SkipGramOptions_clone(flatbuffers_builder_t *B, tflite_SkipGramOptions_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_SkipGramOptions_start(B)
        || tflite_SkipGramOptions_ngram_size_pick(B, t)
        || tflite_SkipGramOptions_max_skip_size_pick(B, t)
        || tflite_SkipGramOptions_include_all_ngrams_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_SkipGramOptions_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, tflite_SpaceToDepthOptions_block_size, flatbuffers_int32, int32_t, 4, 4, INT32_C(0), tflite_SpaceToDepthOptions)

static inline tflite_SpaceToDepthOptions_ref_t tflite_SpaceToDepthOptions_create(flatbuffers_builder_t *B __tflite_SpaceToDepthOptions_formal_args)
{
    if (tflite_SpaceToDepthOptions_start(B)
        || tflite_SpaceToDepthOptions_block_size_add(B, v0)) {
        return 0;
    }
    return tflite_SpaceToDepthOptions_end(B);
}

static tflite_SpaceToDepthOptions_ref_t tflite_SpaceToDepthOptions_clone(flatbuffers_builder_t *B, tflite_SpaceToDepthOptions_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_SpaceToDepthOptions_start(B)
        || tflite_SpaceToDepthOptions_block_size_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_SpaceToDepthOptions_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, tflite_DepthToSpaceOptions_block_size, flatbuffers_int32, int32_t, 4, 4, INT32_C(0), tflite_DepthToSpaceOptions)

static inline tflite_DepthToSpaceOptions_ref_t tflite_DepthToSpaceOptions_create(flatbuffers_builder_t *B __tflite_DepthToSpaceOptions_formal_args)
{
    if (tflite_DepthToSpaceOptions_start(B)
        || tflite_DepthToSpaceOptions_block_size_add(B, v0)) {
        return 0;
    }
    return tflite_DepthToSpaceOptions_end(B);
}

static tflite_DepthToSpaceOptions_ref_t tflite_DepthToSpaceOptions_clone(flatbuffers_builder_t *B, tflite_DepthToSpaceOptions_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_DepthToSpaceOptions_start(B)
        || tflite_DepthToSpaceOptions_block_size_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_DepthToSpaceOptions_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, tflite_SubOptions_fused_activation_function, tflite_ActivationFunctionType, tflite_ActivationFunctionType_enum_t, 1, 1, INT8_C(0), tflite_SubOptions)

static inline tflite_SubOptions_ref_t tflite_SubOptions_create(flatbuffers_builder_t *B __tflite_SubOptions_formal_args)
{
    if (tflite_SubOptions_start(B)
        || tflite_SubOptions_fused_activation_function_add(B, v0)) {
        return 0;
    }
    return tflite_SubOptions_end(B);
}

static tflite_SubOptions_ref_t tflite_SubOptions_clone(flatbuffers_builder_t *B, tflite_SubOptions_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_SubOptions_start(B)
        || tflite_SubOptions_fused_activation_function_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_SubOptions_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, tflite_DivOptions_fused_activation_function, tflite_ActivationFunctionType, tflite_ActivationFunctionType_enum_t, 1, 1, INT8_C(0), tflite_DivOptions)

static inline tflite_DivOptions_ref_t tflite_DivOptions_create(flatbuffers_builder_t *B __tflite_DivOptions_formal_args)
{
    if (tflite_DivOptions_start(B)
        || tflite_DivOptions_fused_activation_function_add(B, v0)) {
        return 0;
    }
    return tflite_DivOptions_end(B);
}

static tflite_DivOptions_ref_t tflite_DivOptions_clone(flatbuffers_builder_t *B, tflite_DivOptions_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_DivOptions_start(B)
        || tflite_DivOptions_fused_activation_function_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_DivOptions_end(B));
}


static inline tflite_TopKV2Options_ref_t tflite_TopKV2Options_create(flatbuffers_builder_t *B __tflite_TopKV2Options_formal_args)
{
    if (tflite_TopKV2Options_start(B)) {
        return 0;
    }
    return tflite_TopKV2Options_end(B);
}

static tflite_TopKV2Options_ref_t tflite_TopKV2Options_clone(flatbuffers_builder_t *B, tflite_TopKV2Options_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_TopKV2Options_start(B)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_TopKV2Options_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, tflite_EmbeddingLookupSparseOptions_combiner, tflite_CombinerType, tflite_CombinerType_enum_t, 1, 1, INT8_C(0), tflite_EmbeddingLookupSparseOptions)

static inline tflite_EmbeddingLookupSparseOptions_ref_t tflite_EmbeddingLookupSparseOptions_create(flatbuffers_builder_t *B __tflite_EmbeddingLookupSparseOptions_formal_args)
{
    if (tflite_EmbeddingLookupSparseOptions_start(B)
        || tflite_EmbeddingLookupSparseOptions_combiner_add(B, v0)) {
        return 0;
    }
    return tflite_EmbeddingLookupSparseOptions_end(B);
}

static tflite_EmbeddingLookupSparseOptions_ref_t tflite_EmbeddingLookupSparseOptions_clone(flatbuffers_builder_t *B, tflite_EmbeddingLookupSparseOptions_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_EmbeddingLookupSparseOptions_start(B)
        || tflite_EmbeddingLookupSparseOptions_combiner_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_EmbeddingLookupSparseOptions_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, tflite_GatherOptions_axis, flatbuffers_int32, int32_t, 4, 4, INT32_C(0), tflite_GatherOptions)

static inline tflite_GatherOptions_ref_t tflite_GatherOptions_create(flatbuffers_builder_t *B __tflite_GatherOptions_formal_args)
{
    if (tflite_GatherOptions_start(B)
        || tflite_GatherOptions_axis_add(B, v0)) {
        return 0;
    }
    return tflite_GatherOptions_end(B);
}

static tflite_GatherOptions_ref_t tflite_GatherOptions_clone(flatbuffers_builder_t *B, tflite_GatherOptions_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_GatherOptions_start(B)
        || tflite_GatherOptions_axis_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_GatherOptions_end(B));
}


static inline tflite_TransposeOptions_ref_t tflite_TransposeOptions_create(flatbuffers_builder_t *B __tflite_TransposeOptions_formal_args)
{
    if (tflite_TransposeOptions_start(B)) {
        return 0;
    }
    return tflite_TransposeOptions_end(B);
}

static tflite_TransposeOptions_ref_t tflite_TransposeOptions_clone(flatbuffers_builder_t *B, tflite_TransposeOptions_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_TransposeOptions_start(B)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_TransposeOptions_end(B));
}


static inline tflite_ExpOptions_ref_t tflite_ExpOptions_create(flatbuffers_builder_t *B __tflite_ExpOptions_formal_args)
{
    if (tflite_ExpOptions_start(B)) {
        return 0;
    }
    return tflite_ExpOptions_end(B);
}

static tflite_ExpOptions_ref_t tflite_ExpOptions_clone(flatbuffers_builder_t *B, tflite_ExpOptions_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_ExpOptions_start(B)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_ExpOptions_end(B));
}


static inline tflite_CosOptions_ref_t tflite_CosOptions_create(flatbuffers_builder_t *B __tflite_CosOptions_formal_args)
{
    if (tflite_CosOptions_start(B)) {
        return 0;
    }
    return tflite_CosOptions_end(B);
}

static tflite_CosOptions_ref_t tflite_CosOptions_clone(flatbuffers_builder_t *B, tflite_CosOptions_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_CosOptions_start(B)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_CosOptions_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, tflite_ReducerOptions_keep_dims, flatbuffers_bool, flatbuffers_bool_t, 1, 1, UINT8_C(0), tflite_ReducerOptions)

static inline tflite_ReducerOptions_ref_t tflite_ReducerOptions_create(flatbuffers_builder_t *B __tflite_ReducerOptions_formal_args)
{
    if (tflite_ReducerOptions_start(B)
        || tflite_ReducerOptions_keep_dims_add(B, v0)) {
        return 0;
    }
    return tflite_ReducerOptions_end(B);
}

static tflite_ReducerOptions_ref_t tflite_ReducerOptions_clone(flatbuffers_builder_t *B, tflite_ReducerOptions_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_ReducerOptions_start(B)
        || tflite_ReducerOptions_keep_dims_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_ReducerOptions_end(B));
}

__flatbuffers_build_vector_field(0, flatbuffers_, tflite_SqueezeOptions_squeeze_dims, flatbuffers_int32, int32_t, tflite_SqueezeOptions)

static inline tflite_SqueezeOptions_ref_t tflite_SqueezeOptions_create(flatbuffers_builder_t *B __tflite_SqueezeOptions_formal_args)
{
    if (tflite_SqueezeOptions_start(B)
        || tflite_SqueezeOptions_squeeze_dims_add(B, v0)) {
        return 0;
    }
    return tflite_SqueezeOptions_end(B);
}

static tflite_SqueezeOptions_ref_t tflite_SqueezeOptions_clone(flatbuffers_builder_t *B, tflite_SqueezeOptions_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_SqueezeOptions_start(B)
        || tflite_SqueezeOptions_squeeze_dims_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_SqueezeOptions_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, tflite_SplitOptions_num_splits, flatbuffers_int32, int32_t, 4, 4, INT32_C(0), tflite_SplitOptions)

static inline tflite_SplitOptions_ref_t tflite_SplitOptions_create(flatbuffers_builder_t *B __tflite_SplitOptions_formal_args)
{
    if (tflite_SplitOptions_start(B)
        || tflite_SplitOptions_num_splits_add(B, v0)) {
        return 0;
    }
    return tflite_SplitOptions_end(B);
}

static tflite_SplitOptions_ref_t tflite_SplitOptions_clone(flatbuffers_builder_t *B, tflite_SplitOptions_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_SplitOptions_start(B)
        || tflite_SplitOptions_num_splits_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_SplitOptions_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, tflite_SplitVOptions_num_splits, flatbuffers_int32, int32_t, 4, 4, INT32_C(0), tflite_SplitVOptions)

static inline tflite_SplitVOptions_ref_t tflite_SplitVOptions_create(flatbuffers_builder_t *B __tflite_SplitVOptions_formal_args)
{
    if (tflite_SplitVOptions_start(B)
        || tflite_SplitVOptions_num_splits_add(B, v0)) {
        return 0;
    }
    return tflite_SplitVOptions_end(B);
}

static tflite_SplitVOptions_ref_t tflite_SplitVOptions_clone(flatbuffers_builder_t *B, tflite_SplitVOptions_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_SplitVOptions_start(B)
        || tflite_SplitVOptions_num_splits_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_SplitVOptions_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, tflite_StridedSliceOptions_begin_mask, flatbuffers_int32, int32_t, 4, 4, INT32_C(0), tflite_StridedSliceOptions)
__flatbuffers_build_scalar_field(1, flatbuffers_, tflite_StridedSliceOptions_end_mask, flatbuffers_int32, int32_t, 4, 4, INT32_C(0), tflite_StridedSliceOptions)
__flatbuffers_build_scalar_field(2, flatbuffers_, tflite_StridedSliceOptions_ellipsis_mask, flatbuffers_int32, int32_t, 4, 4, INT32_C(0), tflite_StridedSliceOptions)
__flatbuffers_build_scalar_field(3, flatbuffers_, tflite_StridedSliceOptions_new_axis_mask, flatbuffers_int32, int32_t, 4, 4, INT32_C(0), tflite_StridedSliceOptions)
__flatbuffers_build_scalar_field(4, flatbuffers_, tflite_StridedSliceOptions_shrink_axis_mask, flatbuffers_int32, int32_t, 4, 4, INT32_C(0), tflite_StridedSliceOptions)

static inline tflite_StridedSliceOptions_ref_t tflite_StridedSliceOptions_create(flatbuffers_builder_t *B __tflite_StridedSliceOptions_formal_args)
{
    if (tflite_StridedSliceOptions_start(B)
        || tflite_StridedSliceOptions_begin_mask_add(B, v0)
        || tflite_StridedSliceOptions_end_mask_add(B, v1)
        || tflite_StridedSliceOptions_ellipsis_mask_add(B, v2)
        || tflite_StridedSliceOptions_new_axis_mask_add(B, v3)
        || tflite_StridedSliceOptions_shrink_axis_mask_add(B, v4)) {
        return 0;
    }
    return tflite_StridedSliceOptions_end(B);
}

static tflite_StridedSliceOptions_ref_t tflite_StridedSliceOptions_clone(flatbuffers_builder_t *B, tflite_StridedSliceOptions_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_StridedSliceOptions_start(B)
        || tflite_StridedSliceOptions_begin_mask_pick(B, t)
        || tflite_StridedSliceOptions_end_mask_pick(B, t)
        || tflite_StridedSliceOptions_ellipsis_mask_pick(B, t)
        || tflite_StridedSliceOptions_new_axis_mask_pick(B, t)
        || tflite_StridedSliceOptions_shrink_axis_mask_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_StridedSliceOptions_end(B));
}


static inline tflite_LogSoftmaxOptions_ref_t tflite_LogSoftmaxOptions_create(flatbuffers_builder_t *B __tflite_LogSoftmaxOptions_formal_args)
{
    if (tflite_LogSoftmaxOptions_start(B)) {
        return 0;
    }
    return tflite_LogSoftmaxOptions_end(B);
}

static tflite_LogSoftmaxOptions_ref_t tflite_LogSoftmaxOptions_clone(flatbuffers_builder_t *B, tflite_LogSoftmaxOptions_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_LogSoftmaxOptions_start(B)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_LogSoftmaxOptions_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, tflite_CastOptions_in_data_type, tflite_TensorType, tflite_TensorType_enum_t, 1, 1, INT8_C(0), tflite_CastOptions)
__flatbuffers_build_scalar_field(1, flatbuffers_, tflite_CastOptions_out_data_type, tflite_TensorType, tflite_TensorType_enum_t, 1, 1, INT8_C(0), tflite_CastOptions)

static inline tflite_CastOptions_ref_t tflite_CastOptions_create(flatbuffers_builder_t *B __tflite_CastOptions_formal_args)
{
    if (tflite_CastOptions_start(B)
        || tflite_CastOptions_in_data_type_add(B, v0)
        || tflite_CastOptions_out_data_type_add(B, v1)) {
        return 0;
    }
    return tflite_CastOptions_end(B);
}

static tflite_CastOptions_ref_t tflite_CastOptions_clone(flatbuffers_builder_t *B, tflite_CastOptions_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_CastOptions_start(B)
        || tflite_CastOptions_in_data_type_pick(B, t)
        || tflite_CastOptions_out_data_type_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_CastOptions_end(B));
}


static inline tflite_DequantizeOptions_ref_t tflite_DequantizeOptions_create(flatbuffers_builder_t *B __tflite_DequantizeOptions_formal_args)
{
    if (tflite_DequantizeOptions_start(B)) {
        return 0;
    }
    return tflite_DequantizeOptions_end(B);
}

static tflite_DequantizeOptions_ref_t tflite_DequantizeOptions_clone(flatbuffers_builder_t *B, tflite_DequantizeOptions_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_DequantizeOptions_start(B)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_DequantizeOptions_end(B));
}


static inline tflite_MaximumMinimumOptions_ref_t tflite_MaximumMinimumOptions_create(flatbuffers_builder_t *B __tflite_MaximumMinimumOptions_formal_args)
{
    if (tflite_MaximumMinimumOptions_start(B)) {
        return 0;
    }
    return tflite_MaximumMinimumOptions_end(B);
}

static tflite_MaximumMinimumOptions_ref_t tflite_MaximumMinimumOptions_clone(flatbuffers_builder_t *B, tflite_MaximumMinimumOptions_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_MaximumMinimumOptions_start(B)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_MaximumMinimumOptions_end(B));
}


static inline tflite_TileOptions_ref_t tflite_TileOptions_create(flatbuffers_builder_t *B __tflite_TileOptions_formal_args)
{
    if (tflite_TileOptions_start(B)) {
        return 0;
    }
    return tflite_TileOptions_end(B);
}

static tflite_TileOptions_ref_t tflite_TileOptions_clone(flatbuffers_builder_t *B, tflite_TileOptions_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_TileOptions_start(B)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_TileOptions_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, tflite_ArgMaxOptions_output_type, tflite_TensorType, tflite_TensorType_enum_t, 1, 1, INT8_C(0), tflite_ArgMaxOptions)

static inline tflite_ArgMaxOptions_ref_t tflite_ArgMaxOptions_create(flatbuffers_builder_t *B __tflite_ArgMaxOptions_formal_args)
{
    if (tflite_ArgMaxOptions_start(B)
        || tflite_ArgMaxOptions_output_type_add(B, v0)) {
        return 0;
    }
    return tflite_ArgMaxOptions_end(B);
}

static tflite_ArgMaxOptions_ref_t tflite_ArgMaxOptions_clone(flatbuffers_builder_t *B, tflite_ArgMaxOptions_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_ArgMaxOptions_start(B)
        || tflite_ArgMaxOptions_output_type_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_ArgMaxOptions_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, tflite_ArgMinOptions_output_type, tflite_TensorType, tflite_TensorType_enum_t, 1, 1, INT8_C(0), tflite_ArgMinOptions)

static inline tflite_ArgMinOptions_ref_t tflite_ArgMinOptions_create(flatbuffers_builder_t *B __tflite_ArgMinOptions_formal_args)
{
    if (tflite_ArgMinOptions_start(B)
        || tflite_ArgMinOptions_output_type_add(B, v0)) {
        return 0;
    }
    return tflite_ArgMinOptions_end(B);
}

static tflite_ArgMinOptions_ref_t tflite_ArgMinOptions_clone(flatbuffers_builder_t *B, tflite_ArgMinOptions_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_ArgMinOptions_start(B)
        || tflite_ArgMinOptions_output_type_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_ArgMinOptions_end(B));
}


static inline tflite_GreaterOptions_ref_t tflite_GreaterOptions_create(flatbuffers_builder_t *B __tflite_GreaterOptions_formal_args)
{
    if (tflite_GreaterOptions_start(B)) {
        return 0;
    }
    return tflite_GreaterOptions_end(B);
}

static tflite_GreaterOptions_ref_t tflite_GreaterOptions_clone(flatbuffers_builder_t *B, tflite_GreaterOptions_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_GreaterOptions_start(B)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_GreaterOptions_end(B));
}


static inline tflite_GreaterEqualOptions_ref_t tflite_GreaterEqualOptions_create(flatbuffers_builder_t *B __tflite_GreaterEqualOptions_formal_args)
{
    if (tflite_GreaterEqualOptions_start(B)) {
        return 0;
    }
    return tflite_GreaterEqualOptions_end(B);
}

static tflite_GreaterEqualOptions_ref_t tflite_GreaterEqualOptions_clone(flatbuffers_builder_t *B, tflite_GreaterEqualOptions_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_GreaterEqualOptions_start(B)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_GreaterEqualOptions_end(B));
}


static inline tflite_LessOptions_ref_t tflite_LessOptions_create(flatbuffers_builder_t *B __tflite_LessOptions_formal_args)
{
    if (tflite_LessOptions_start(B)) {
        return 0;
    }
    return tflite_LessOptions_end(B);
}

static tflite_LessOptions_ref_t tflite_LessOptions_clone(flatbuffers_builder_t *B, tflite_LessOptions_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_LessOptions_start(B)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_LessOptions_end(B));
}


static inline tflite_LessEqualOptions_ref_t tflite_LessEqualOptions_create(flatbuffers_builder_t *B __tflite_LessEqualOptions_formal_args)
{
    if (tflite_LessEqualOptions_start(B)) {
        return 0;
    }
    return tflite_LessEqualOptions_end(B);
}

static tflite_LessEqualOptions_ref_t tflite_LessEqualOptions_clone(flatbuffers_builder_t *B, tflite_LessEqualOptions_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_LessEqualOptions_start(B)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_LessEqualOptions_end(B));
}


static inline tflite_NegOptions_ref_t tflite_NegOptions_create(flatbuffers_builder_t *B __tflite_NegOptions_formal_args)
{
    if (tflite_NegOptions_start(B)) {
        return 0;
    }
    return tflite_NegOptions_end(B);
}

static tflite_NegOptions_ref_t tflite_NegOptions_clone(flatbuffers_builder_t *B, tflite_NegOptions_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_NegOptions_start(B)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_NegOptions_end(B));
}


static inline tflite_SelectOptions_ref_t tflite_SelectOptions_create(flatbuffers_builder_t *B __tflite_SelectOptions_formal_args)
{
    if (tflite_SelectOptions_start(B)) {
        return 0;
    }
    return tflite_SelectOptions_end(B);
}

static tflite_SelectOptions_ref_t tflite_SelectOptions_clone(flatbuffers_builder_t *B, tflite_SelectOptions_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_SelectOptions_start(B)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_SelectOptions_end(B));
}


static inline tflite_SliceOptions_ref_t tflite_SliceOptions_create(flatbuffers_builder_t *B __tflite_SliceOptions_formal_args)
{
    if (tflite_SliceOptions_start(B)) {
        return 0;
    }
    return tflite_SliceOptions_end(B);
}

static tflite_SliceOptions_ref_t tflite_SliceOptions_clone(flatbuffers_builder_t *B, tflite_SliceOptions_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_SliceOptions_start(B)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_SliceOptions_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, tflite_TransposeConvOptions_padding, tflite_Padding, tflite_Padding_enum_t, 1, 1, INT8_C(0), tflite_TransposeConvOptions)
__flatbuffers_build_scalar_field(1, flatbuffers_, tflite_TransposeConvOptions_stride_w, flatbuffers_int32, int32_t, 4, 4, INT32_C(0), tflite_TransposeConvOptions)
__flatbuffers_build_scalar_field(2, flatbuffers_, tflite_TransposeConvOptions_stride_h, flatbuffers_int32, int32_t, 4, 4, INT32_C(0), tflite_TransposeConvOptions)

static inline tflite_TransposeConvOptions_ref_t tflite_TransposeConvOptions_create(flatbuffers_builder_t *B __tflite_TransposeConvOptions_formal_args)
{
    if (tflite_TransposeConvOptions_start(B)
        || tflite_TransposeConvOptions_stride_w_add(B, v1)
        || tflite_TransposeConvOptions_stride_h_add(B, v2)
        || tflite_TransposeConvOptions_padding_add(B, v0)) {
        return 0;
    }
    return tflite_TransposeConvOptions_end(B);
}

static tflite_TransposeConvOptions_ref_t tflite_TransposeConvOptions_clone(flatbuffers_builder_t *B, tflite_TransposeConvOptions_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_TransposeConvOptions_start(B)
        || tflite_TransposeConvOptions_stride_w_pick(B, t)
        || tflite_TransposeConvOptions_stride_h_pick(B, t)
        || tflite_TransposeConvOptions_padding_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_TransposeConvOptions_end(B));
}


static inline tflite_ExpandDimsOptions_ref_t tflite_ExpandDimsOptions_create(flatbuffers_builder_t *B __tflite_ExpandDimsOptions_formal_args)
{
    if (tflite_ExpandDimsOptions_start(B)) {
        return 0;
    }
    return tflite_ExpandDimsOptions_end(B);
}

static tflite_ExpandDimsOptions_ref_t tflite_ExpandDimsOptions_clone(flatbuffers_builder_t *B, tflite_ExpandDimsOptions_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_ExpandDimsOptions_start(B)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_ExpandDimsOptions_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, tflite_SparseToDenseOptions_validate_indices, flatbuffers_bool, flatbuffers_bool_t, 1, 1, UINT8_C(0), tflite_SparseToDenseOptions)

static inline tflite_SparseToDenseOptions_ref_t tflite_SparseToDenseOptions_create(flatbuffers_builder_t *B __tflite_SparseToDenseOptions_formal_args)
{
    if (tflite_SparseToDenseOptions_start(B)
        || tflite_SparseToDenseOptions_validate_indices_add(B, v0)) {
        return 0;
    }
    return tflite_SparseToDenseOptions_end(B);
}

static tflite_SparseToDenseOptions_ref_t tflite_SparseToDenseOptions_clone(flatbuffers_builder_t *B, tflite_SparseToDenseOptions_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_SparseToDenseOptions_start(B)
        || tflite_SparseToDenseOptions_validate_indices_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_SparseToDenseOptions_end(B));
}


static inline tflite_EqualOptions_ref_t tflite_EqualOptions_create(flatbuffers_builder_t *B __tflite_EqualOptions_formal_args)
{
    if (tflite_EqualOptions_start(B)) {
        return 0;
    }
    return tflite_EqualOptions_end(B);
}

static tflite_EqualOptions_ref_t tflite_EqualOptions_clone(flatbuffers_builder_t *B, tflite_EqualOptions_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_EqualOptions_start(B)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_EqualOptions_end(B));
}


static inline tflite_NotEqualOptions_ref_t tflite_NotEqualOptions_create(flatbuffers_builder_t *B __tflite_NotEqualOptions_formal_args)
{
    if (tflite_NotEqualOptions_start(B)) {
        return 0;
    }
    return tflite_NotEqualOptions_end(B);
}

static tflite_NotEqualOptions_ref_t tflite_NotEqualOptions_clone(flatbuffers_builder_t *B, tflite_NotEqualOptions_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_NotEqualOptions_start(B)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_NotEqualOptions_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, tflite_ShapeOptions_out_type, tflite_TensorType, tflite_TensorType_enum_t, 1, 1, INT8_C(0), tflite_ShapeOptions)

static inline tflite_ShapeOptions_ref_t tflite_ShapeOptions_create(flatbuffers_builder_t *B __tflite_ShapeOptions_formal_args)
{
    if (tflite_ShapeOptions_start(B)
        || tflite_ShapeOptions_out_type_add(B, v0)) {
        return 0;
    }
    return tflite_ShapeOptions_end(B);
}

static tflite_ShapeOptions_ref_t tflite_ShapeOptions_clone(flatbuffers_builder_t *B, tflite_ShapeOptions_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_ShapeOptions_start(B)
        || tflite_ShapeOptions_out_type_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_ShapeOptions_end(B));
}


static inline tflite_RankOptions_ref_t tflite_RankOptions_create(flatbuffers_builder_t *B __tflite_RankOptions_formal_args)
{
    if (tflite_RankOptions_start(B)) {
        return 0;
    }
    return tflite_RankOptions_end(B);
}

static tflite_RankOptions_ref_t tflite_RankOptions_clone(flatbuffers_builder_t *B, tflite_RankOptions_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_RankOptions_start(B)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_RankOptions_end(B));
}


static inline tflite_PowOptions_ref_t tflite_PowOptions_create(flatbuffers_builder_t *B __tflite_PowOptions_formal_args)
{
    if (tflite_PowOptions_start(B)) {
        return 0;
    }
    return tflite_PowOptions_end(B);
}

static tflite_PowOptions_ref_t tflite_PowOptions_clone(flatbuffers_builder_t *B, tflite_PowOptions_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_PowOptions_start(B)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_PowOptions_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, tflite_FakeQuantOptions_min, flatbuffers_float, float, 4, 4, 0.00000000f, tflite_FakeQuantOptions)
__flatbuffers_build_scalar_field(1, flatbuffers_, tflite_FakeQuantOptions_max, flatbuffers_float, float, 4, 4, 0.00000000f, tflite_FakeQuantOptions)
__flatbuffers_build_scalar_field(2, flatbuffers_, tflite_FakeQuantOptions_num_bits, flatbuffers_int32, int32_t, 4, 4, INT32_C(0), tflite_FakeQuantOptions)
__flatbuffers_build_scalar_field(3, flatbuffers_, tflite_FakeQuantOptions_narrow_range, flatbuffers_bool, flatbuffers_bool_t, 1, 1, UINT8_C(0), tflite_FakeQuantOptions)

static inline tflite_FakeQuantOptions_ref_t tflite_FakeQuantOptions_create(flatbuffers_builder_t *B __tflite_FakeQuantOptions_formal_args)
{
    if (tflite_FakeQuantOptions_start(B)
        || tflite_FakeQuantOptions_min_add(B, v0)
        || tflite_FakeQuantOptions_max_add(B, v1)
        || tflite_FakeQuantOptions_num_bits_add(B, v2)
        || tflite_FakeQuantOptions_narrow_range_add(B, v3)) {
        return 0;
    }
    return tflite_FakeQuantOptions_end(B);
}

static tflite_FakeQuantOptions_ref_t tflite_FakeQuantOptions_clone(flatbuffers_builder_t *B, tflite_FakeQuantOptions_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_FakeQuantOptions_start(B)
        || tflite_FakeQuantOptions_min_pick(B, t)
        || tflite_FakeQuantOptions_max_pick(B, t)
        || tflite_FakeQuantOptions_num_bits_pick(B, t)
        || tflite_FakeQuantOptions_narrow_range_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_FakeQuantOptions_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, tflite_PackOptions_values_count, flatbuffers_int32, int32_t, 4, 4, INT32_C(0), tflite_PackOptions)
__flatbuffers_build_scalar_field(1, flatbuffers_, tflite_PackOptions_axis, flatbuffers_int32, int32_t, 4, 4, INT32_C(0), tflite_PackOptions)

static inline tflite_PackOptions_ref_t tflite_PackOptions_create(flatbuffers_builder_t *B __tflite_PackOptions_formal_args)
{
    if (tflite_PackOptions_start(B)
        || tflite_PackOptions_values_count_add(B, v0)
        || tflite_PackOptions_axis_add(B, v1)) {
        return 0;
    }
    return tflite_PackOptions_end(B);
}

static tflite_PackOptions_ref_t tflite_PackOptions_clone(flatbuffers_builder_t *B, tflite_PackOptions_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_PackOptions_start(B)
        || tflite_PackOptions_values_count_pick(B, t)
        || tflite_PackOptions_axis_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_PackOptions_end(B));
}


static inline tflite_LogicalOrOptions_ref_t tflite_LogicalOrOptions_create(flatbuffers_builder_t *B __tflite_LogicalOrOptions_formal_args)
{
    if (tflite_LogicalOrOptions_start(B)) {
        return 0;
    }
    return tflite_LogicalOrOptions_end(B);
}

static tflite_LogicalOrOptions_ref_t tflite_LogicalOrOptions_clone(flatbuffers_builder_t *B, tflite_LogicalOrOptions_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_LogicalOrOptions_start(B)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_LogicalOrOptions_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, tflite_OneHotOptions_axis, flatbuffers_int32, int32_t, 4, 4, INT32_C(0), tflite_OneHotOptions)

static inline tflite_OneHotOptions_ref_t tflite_OneHotOptions_create(flatbuffers_builder_t *B __tflite_OneHotOptions_formal_args)
{
    if (tflite_OneHotOptions_start(B)
        || tflite_OneHotOptions_axis_add(B, v0)) {
        return 0;
    }
    return tflite_OneHotOptions_end(B);
}

static tflite_OneHotOptions_ref_t tflite_OneHotOptions_clone(flatbuffers_builder_t *B, tflite_OneHotOptions_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_OneHotOptions_start(B)
        || tflite_OneHotOptions_axis_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_OneHotOptions_end(B));
}


static inline tflite_AbsOptions_ref_t tflite_AbsOptions_create(flatbuffers_builder_t *B __tflite_AbsOptions_formal_args)
{
    if (tflite_AbsOptions_start(B)) {
        return 0;
    }
    return tflite_AbsOptions_end(B);
}

static tflite_AbsOptions_ref_t tflite_AbsOptions_clone(flatbuffers_builder_t *B, tflite_AbsOptions_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_AbsOptions_start(B)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_AbsOptions_end(B));
}


static inline tflite_HardSwishOptions_ref_t tflite_HardSwishOptions_create(flatbuffers_builder_t *B __tflite_HardSwishOptions_formal_args)
{
    if (tflite_HardSwishOptions_start(B)) {
        return 0;
    }
    return tflite_HardSwishOptions_end(B);
}

static tflite_HardSwishOptions_ref_t tflite_HardSwishOptions_clone(flatbuffers_builder_t *B, tflite_HardSwishOptions_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_HardSwishOptions_start(B)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_HardSwishOptions_end(B));
}


static inline tflite_LogicalAndOptions_ref_t tflite_LogicalAndOptions_create(flatbuffers_builder_t *B __tflite_LogicalAndOptions_formal_args)
{
    if (tflite_LogicalAndOptions_start(B)) {
        return 0;
    }
    return tflite_LogicalAndOptions_end(B);
}

static tflite_LogicalAndOptions_ref_t tflite_LogicalAndOptions_clone(flatbuffers_builder_t *B, tflite_LogicalAndOptions_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_LogicalAndOptions_start(B)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_LogicalAndOptions_end(B));
}


static inline tflite_LogicalNotOptions_ref_t tflite_LogicalNotOptions_create(flatbuffers_builder_t *B __tflite_LogicalNotOptions_formal_args)
{
    if (tflite_LogicalNotOptions_start(B)) {
        return 0;
    }
    return tflite_LogicalNotOptions_end(B);
}

static tflite_LogicalNotOptions_ref_t tflite_LogicalNotOptions_clone(flatbuffers_builder_t *B, tflite_LogicalNotOptions_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_LogicalNotOptions_start(B)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_LogicalNotOptions_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, tflite_UnpackOptions_num, flatbuffers_int32, int32_t, 4, 4, INT32_C(0), tflite_UnpackOptions)
__flatbuffers_build_scalar_field(1, flatbuffers_, tflite_UnpackOptions_axis, flatbuffers_int32, int32_t, 4, 4, INT32_C(0), tflite_UnpackOptions)

static inline tflite_UnpackOptions_ref_t tflite_UnpackOptions_create(flatbuffers_builder_t *B __tflite_UnpackOptions_formal_args)
{
    if (tflite_UnpackOptions_start(B)
        || tflite_UnpackOptions_num_add(B, v0)
        || tflite_UnpackOptions_axis_add(B, v1)) {
        return 0;
    }
    return tflite_UnpackOptions_end(B);
}

static tflite_UnpackOptions_ref_t tflite_UnpackOptions_clone(flatbuffers_builder_t *B, tflite_UnpackOptions_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_UnpackOptions_start(B)
        || tflite_UnpackOptions_num_pick(B, t)
        || tflite_UnpackOptions_axis_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_UnpackOptions_end(B));
}


static inline tflite_FloorDivOptions_ref_t tflite_FloorDivOptions_create(flatbuffers_builder_t *B __tflite_FloorDivOptions_formal_args)
{
    if (tflite_FloorDivOptions_start(B)) {
        return 0;
    }
    return tflite_FloorDivOptions_end(B);
}

static tflite_FloorDivOptions_ref_t tflite_FloorDivOptions_clone(flatbuffers_builder_t *B, tflite_FloorDivOptions_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_FloorDivOptions_start(B)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_FloorDivOptions_end(B));
}


static inline tflite_SquareOptions_ref_t tflite_SquareOptions_create(flatbuffers_builder_t *B __tflite_SquareOptions_formal_args)
{
    if (tflite_SquareOptions_start(B)) {
        return 0;
    }
    return tflite_SquareOptions_end(B);
}

static tflite_SquareOptions_ref_t tflite_SquareOptions_clone(flatbuffers_builder_t *B, tflite_SquareOptions_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_SquareOptions_start(B)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_SquareOptions_end(B));
}


static inline tflite_ZerosLikeOptions_ref_t tflite_ZerosLikeOptions_create(flatbuffers_builder_t *B __tflite_ZerosLikeOptions_formal_args)
{
    if (tflite_ZerosLikeOptions_start(B)) {
        return 0;
    }
    return tflite_ZerosLikeOptions_end(B);
}

static tflite_ZerosLikeOptions_ref_t tflite_ZerosLikeOptions_clone(flatbuffers_builder_t *B, tflite_ZerosLikeOptions_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_ZerosLikeOptions_start(B)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_ZerosLikeOptions_end(B));
}


static inline tflite_FillOptions_ref_t tflite_FillOptions_create(flatbuffers_builder_t *B __tflite_FillOptions_formal_args)
{
    if (tflite_FillOptions_start(B)) {
        return 0;
    }
    return tflite_FillOptions_end(B);
}

static tflite_FillOptions_ref_t tflite_FillOptions_clone(flatbuffers_builder_t *B, tflite_FillOptions_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_FillOptions_start(B)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_FillOptions_end(B));
}


static inline tflite_FloorModOptions_ref_t tflite_FloorModOptions_create(flatbuffers_builder_t *B __tflite_FloorModOptions_formal_args)
{
    if (tflite_FloorModOptions_start(B)) {
        return 0;
    }
    return tflite_FloorModOptions_end(B);
}

static tflite_FloorModOptions_ref_t tflite_FloorModOptions_clone(flatbuffers_builder_t *B, tflite_FloorModOptions_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_FloorModOptions_start(B)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_FloorModOptions_end(B));
}


static inline tflite_RangeOptions_ref_t tflite_RangeOptions_create(flatbuffers_builder_t *B __tflite_RangeOptions_formal_args)
{
    if (tflite_RangeOptions_start(B)) {
        return 0;
    }
    return tflite_RangeOptions_end(B);
}

static tflite_RangeOptions_ref_t tflite_RangeOptions_clone(flatbuffers_builder_t *B, tflite_RangeOptions_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_RangeOptions_start(B)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_RangeOptions_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, tflite_LeakyReluOptions_alpha, flatbuffers_float, float, 4, 4, 0.00000000f, tflite_LeakyReluOptions)

static inline tflite_LeakyReluOptions_ref_t tflite_LeakyReluOptions_create(flatbuffers_builder_t *B __tflite_LeakyReluOptions_formal_args)
{
    if (tflite_LeakyReluOptions_start(B)
        || tflite_LeakyReluOptions_alpha_add(B, v0)) {
        return 0;
    }
    return tflite_LeakyReluOptions_end(B);
}

static tflite_LeakyReluOptions_ref_t tflite_LeakyReluOptions_clone(flatbuffers_builder_t *B, tflite_LeakyReluOptions_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_LeakyReluOptions_start(B)
        || tflite_LeakyReluOptions_alpha_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_LeakyReluOptions_end(B));
}


static inline tflite_SquaredDifferenceOptions_ref_t tflite_SquaredDifferenceOptions_create(flatbuffers_builder_t *B __tflite_SquaredDifferenceOptions_formal_args)
{
    if (tflite_SquaredDifferenceOptions_start(B)) {
        return 0;
    }
    return tflite_SquaredDifferenceOptions_end(B);
}

static tflite_SquaredDifferenceOptions_ref_t tflite_SquaredDifferenceOptions_clone(flatbuffers_builder_t *B, tflite_SquaredDifferenceOptions_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_SquaredDifferenceOptions_start(B)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_SquaredDifferenceOptions_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, tflite_MirrorPadOptions_mode, tflite_MirrorPadMode, tflite_MirrorPadMode_enum_t, 1, 1, INT8_C(0), tflite_MirrorPadOptions)

static inline tflite_MirrorPadOptions_ref_t tflite_MirrorPadOptions_create(flatbuffers_builder_t *B __tflite_MirrorPadOptions_formal_args)
{
    if (tflite_MirrorPadOptions_start(B)
        || tflite_MirrorPadOptions_mode_add(B, v0)) {
        return 0;
    }
    return tflite_MirrorPadOptions_end(B);
}

static tflite_MirrorPadOptions_ref_t tflite_MirrorPadOptions_clone(flatbuffers_builder_t *B, tflite_MirrorPadOptions_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_MirrorPadOptions_start(B)
        || tflite_MirrorPadOptions_mode_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_MirrorPadOptions_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, tflite_UniqueOptions_idx_out_type, tflite_TensorType, tflite_TensorType_enum_t, 1, 1, INT8_C(2), tflite_UniqueOptions)

static inline tflite_UniqueOptions_ref_t tflite_UniqueOptions_create(flatbuffers_builder_t *B __tflite_UniqueOptions_formal_args)
{
    if (tflite_UniqueOptions_start(B)
        || tflite_UniqueOptions_idx_out_type_add(B, v0)) {
        return 0;
    }
    return tflite_UniqueOptions_end(B);
}

static tflite_UniqueOptions_ref_t tflite_UniqueOptions_clone(flatbuffers_builder_t *B, tflite_UniqueOptions_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_UniqueOptions_start(B)
        || tflite_UniqueOptions_idx_out_type_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_UniqueOptions_end(B));
}


static inline tflite_ReverseV2Options_ref_t tflite_ReverseV2Options_create(flatbuffers_builder_t *B __tflite_ReverseV2Options_formal_args)
{
    if (tflite_ReverseV2Options_start(B)) {
        return 0;
    }
    return tflite_ReverseV2Options_end(B);
}

static tflite_ReverseV2Options_ref_t tflite_ReverseV2Options_clone(flatbuffers_builder_t *B, tflite_ReverseV2Options_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_ReverseV2Options_start(B)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_ReverseV2Options_end(B));
}


static inline tflite_AddNOptions_ref_t tflite_AddNOptions_create(flatbuffers_builder_t *B __tflite_AddNOptions_formal_args)
{
    if (tflite_AddNOptions_start(B)) {
        return 0;
    }
    return tflite_AddNOptions_end(B);
}

static tflite_AddNOptions_ref_t tflite_AddNOptions_clone(flatbuffers_builder_t *B, tflite_AddNOptions_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_AddNOptions_start(B)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_AddNOptions_end(B));
}


static inline tflite_GatherNdOptions_ref_t tflite_GatherNdOptions_create(flatbuffers_builder_t *B __tflite_GatherNdOptions_formal_args)
{
    if (tflite_GatherNdOptions_start(B)) {
        return 0;
    }
    return tflite_GatherNdOptions_end(B);
}

static tflite_GatherNdOptions_ref_t tflite_GatherNdOptions_clone(flatbuffers_builder_t *B, tflite_GatherNdOptions_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_GatherNdOptions_start(B)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_GatherNdOptions_end(B));
}


static inline tflite_WhereOptions_ref_t tflite_WhereOptions_create(flatbuffers_builder_t *B __tflite_WhereOptions_formal_args)
{
    if (tflite_WhereOptions_start(B)) {
        return 0;
    }
    return tflite_WhereOptions_end(B);
}

static tflite_WhereOptions_ref_t tflite_WhereOptions_clone(flatbuffers_builder_t *B, tflite_WhereOptions_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_WhereOptions_start(B)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_WhereOptions_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, tflite_ReverseSequenceOptions_seq_dim, flatbuffers_int32, int32_t, 4, 4, INT32_C(0), tflite_ReverseSequenceOptions)
__flatbuffers_build_scalar_field(1, flatbuffers_, tflite_ReverseSequenceOptions_batch_dim, flatbuffers_int32, int32_t, 4, 4, INT32_C(0), tflite_ReverseSequenceOptions)

static inline tflite_ReverseSequenceOptions_ref_t tflite_ReverseSequenceOptions_create(flatbuffers_builder_t *B __tflite_ReverseSequenceOptions_formal_args)
{
    if (tflite_ReverseSequenceOptions_start(B)
        || tflite_ReverseSequenceOptions_seq_dim_add(B, v0)
        || tflite_ReverseSequenceOptions_batch_dim_add(B, v1)) {
        return 0;
    }
    return tflite_ReverseSequenceOptions_end(B);
}

static tflite_ReverseSequenceOptions_ref_t tflite_ReverseSequenceOptions_clone(flatbuffers_builder_t *B, tflite_ReverseSequenceOptions_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_ReverseSequenceOptions_start(B)
        || tflite_ReverseSequenceOptions_seq_dim_pick(B, t)
        || tflite_ReverseSequenceOptions_batch_dim_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_ReverseSequenceOptions_end(B));
}


static inline tflite_MatrixDiagOptions_ref_t tflite_MatrixDiagOptions_create(flatbuffers_builder_t *B __tflite_MatrixDiagOptions_formal_args)
{
    if (tflite_MatrixDiagOptions_start(B)) {
        return 0;
    }
    return tflite_MatrixDiagOptions_end(B);
}

static tflite_MatrixDiagOptions_ref_t tflite_MatrixDiagOptions_clone(flatbuffers_builder_t *B, tflite_MatrixDiagOptions_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_MatrixDiagOptions_start(B)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_MatrixDiagOptions_end(B));
}


static inline tflite_QuantizeOptions_ref_t tflite_QuantizeOptions_create(flatbuffers_builder_t *B __tflite_QuantizeOptions_formal_args)
{
    if (tflite_QuantizeOptions_start(B)) {
        return 0;
    }
    return tflite_QuantizeOptions_end(B);
}

static tflite_QuantizeOptions_ref_t tflite_QuantizeOptions_clone(flatbuffers_builder_t *B, tflite_QuantizeOptions_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_QuantizeOptions_start(B)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_QuantizeOptions_end(B));
}


static inline tflite_MatrixSetDiagOptions_ref_t tflite_MatrixSetDiagOptions_create(flatbuffers_builder_t *B __tflite_MatrixSetDiagOptions_formal_args)
{
    if (tflite_MatrixSetDiagOptions_start(B)) {
        return 0;
    }
    return tflite_MatrixSetDiagOptions_end(B);
}

static tflite_MatrixSetDiagOptions_ref_t tflite_MatrixSetDiagOptions_clone(flatbuffers_builder_t *B, tflite_MatrixSetDiagOptions_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_MatrixSetDiagOptions_start(B)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_MatrixSetDiagOptions_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, tflite_IfOptions_then_subgraph_index, flatbuffers_int32, int32_t, 4, 4, INT32_C(0), tflite_IfOptions)
__flatbuffers_build_scalar_field(1, flatbuffers_, tflite_IfOptions_else_subgraph_index, flatbuffers_int32, int32_t, 4, 4, INT32_C(0), tflite_IfOptions)

static inline tflite_IfOptions_ref_t tflite_IfOptions_create(flatbuffers_builder_t *B __tflite_IfOptions_formal_args)
{
    if (tflite_IfOptions_start(B)
        || tflite_IfOptions_then_subgraph_index_add(B, v0)
        || tflite_IfOptions_else_subgraph_index_add(B, v1)) {
        return 0;
    }
    return tflite_IfOptions_end(B);
}

static tflite_IfOptions_ref_t tflite_IfOptions_clone(flatbuffers_builder_t *B, tflite_IfOptions_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_IfOptions_start(B)
        || tflite_IfOptions_then_subgraph_index_pick(B, t)
        || tflite_IfOptions_else_subgraph_index_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_IfOptions_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, tflite_WhileOptions_cond_subgraph_index, flatbuffers_int32, int32_t, 4, 4, INT32_C(0), tflite_WhileOptions)
__flatbuffers_build_scalar_field(1, flatbuffers_, tflite_WhileOptions_body_subgraph_index, flatbuffers_int32, int32_t, 4, 4, INT32_C(0), tflite_WhileOptions)

static inline tflite_WhileOptions_ref_t tflite_WhileOptions_create(flatbuffers_builder_t *B __tflite_WhileOptions_formal_args)
{
    if (tflite_WhileOptions_start(B)
        || tflite_WhileOptions_cond_subgraph_index_add(B, v0)
        || tflite_WhileOptions_body_subgraph_index_add(B, v1)) {
        return 0;
    }
    return tflite_WhileOptions_end(B);
}

static tflite_WhileOptions_ref_t tflite_WhileOptions_clone(flatbuffers_builder_t *B, tflite_WhileOptions_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_WhileOptions_start(B)
        || tflite_WhileOptions_cond_subgraph_index_pick(B, t)
        || tflite_WhileOptions_body_subgraph_index_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_WhileOptions_end(B));
}


static inline tflite_NonMaxSuppressionV4Options_ref_t tflite_NonMaxSuppressionV4Options_create(flatbuffers_builder_t *B __tflite_NonMaxSuppressionV4Options_formal_args)
{
    if (tflite_NonMaxSuppressionV4Options_start(B)) {
        return 0;
    }
    return tflite_NonMaxSuppressionV4Options_end(B);
}

static tflite_NonMaxSuppressionV4Options_ref_t tflite_NonMaxSuppressionV4Options_clone(flatbuffers_builder_t *B, tflite_NonMaxSuppressionV4Options_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_NonMaxSuppressionV4Options_start(B)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_NonMaxSuppressionV4Options_end(B));
}


static inline tflite_NonMaxSuppressionV5Options_ref_t tflite_NonMaxSuppressionV5Options_create(flatbuffers_builder_t *B __tflite_NonMaxSuppressionV5Options_formal_args)
{
    if (tflite_NonMaxSuppressionV5Options_start(B)) {
        return 0;
    }
    return tflite_NonMaxSuppressionV5Options_end(B);
}

static tflite_NonMaxSuppressionV5Options_ref_t tflite_NonMaxSuppressionV5Options_clone(flatbuffers_builder_t *B, tflite_NonMaxSuppressionV5Options_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_NonMaxSuppressionV5Options_start(B)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_NonMaxSuppressionV5Options_end(B));
}


static inline tflite_ScatterNdOptions_ref_t tflite_ScatterNdOptions_create(flatbuffers_builder_t *B __tflite_ScatterNdOptions_formal_args)
{
    if (tflite_ScatterNdOptions_start(B)) {
        return 0;
    }
    return tflite_ScatterNdOptions_end(B);
}

static tflite_ScatterNdOptions_ref_t tflite_ScatterNdOptions_clone(flatbuffers_builder_t *B, tflite_ScatterNdOptions_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_ScatterNdOptions_start(B)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_ScatterNdOptions_end(B));
}


static inline tflite_SelectV2Options_ref_t tflite_SelectV2Options_create(flatbuffers_builder_t *B __tflite_SelectV2Options_formal_args)
{
    if (tflite_SelectV2Options_start(B)) {
        return 0;
    }
    return tflite_SelectV2Options_end(B);
}

static tflite_SelectV2Options_ref_t tflite_SelectV2Options_clone(flatbuffers_builder_t *B, tflite_SelectV2Options_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_SelectV2Options_start(B)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_SelectV2Options_end(B));
}


static inline tflite_DensifyOptions_ref_t tflite_DensifyOptions_create(flatbuffers_builder_t *B __tflite_DensifyOptions_formal_args)
{
    if (tflite_DensifyOptions_start(B)) {
        return 0;
    }
    return tflite_DensifyOptions_end(B);
}

static tflite_DensifyOptions_ref_t tflite_DensifyOptions_clone(flatbuffers_builder_t *B, tflite_DensifyOptions_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_DensifyOptions_start(B)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_DensifyOptions_end(B));
}


static inline tflite_SegmentSumOptions_ref_t tflite_SegmentSumOptions_create(flatbuffers_builder_t *B __tflite_SegmentSumOptions_formal_args)
{
    if (tflite_SegmentSumOptions_start(B)) {
        return 0;
    }
    return tflite_SegmentSumOptions_end(B);
}

static tflite_SegmentSumOptions_ref_t tflite_SegmentSumOptions_clone(flatbuffers_builder_t *B, tflite_SegmentSumOptions_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_SegmentSumOptions_start(B)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_SegmentSumOptions_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, tflite_OperatorCode_builtin_code, tflite_BuiltinOperator, tflite_BuiltinOperator_enum_t, 1, 1, INT8_C(0), tflite_OperatorCode)
__flatbuffers_build_string_field(1, flatbuffers_, tflite_OperatorCode_custom_code, tflite_OperatorCode)
__flatbuffers_build_scalar_field(2, flatbuffers_, tflite_OperatorCode_version, flatbuffers_int32, int32_t, 4, 4, INT32_C(1), tflite_OperatorCode)

static inline tflite_OperatorCode_ref_t tflite_OperatorCode_create(flatbuffers_builder_t *B __tflite_OperatorCode_formal_args)
{
    if (tflite_OperatorCode_start(B)
        || tflite_OperatorCode_custom_code_add(B, v1)
        || tflite_OperatorCode_version_add(B, v2)
        || tflite_OperatorCode_builtin_code_add(B, v0)) {
        return 0;
    }
    return tflite_OperatorCode_end(B);
}

static tflite_OperatorCode_ref_t tflite_OperatorCode_clone(flatbuffers_builder_t *B, tflite_OperatorCode_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_OperatorCode_start(B)
        || tflite_OperatorCode_custom_code_pick(B, t)
        || tflite_OperatorCode_version_pick(B, t)
        || tflite_OperatorCode_builtin_code_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_OperatorCode_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, tflite_Operator_opcode_index, flatbuffers_uint32, uint32_t, 4, 4, UINT32_C(0), tflite_Operator)
__flatbuffers_build_vector_field(1, flatbuffers_, tflite_Operator_inputs, flatbuffers_int32, int32_t, tflite_Operator)
__flatbuffers_build_vector_field(2, flatbuffers_, tflite_Operator_outputs, flatbuffers_int32, int32_t, tflite_Operator)
__flatbuffers_build_union_field(4, flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, tflite_Operator)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, Conv2DOptions, tflite_Conv2DOptions)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, DepthwiseConv2DOptions, tflite_DepthwiseConv2DOptions)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, ConcatEmbeddingsOptions, tflite_ConcatEmbeddingsOptions)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, LSHProjectionOptions, tflite_LSHProjectionOptions)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, Pool2DOptions, tflite_Pool2DOptions)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, SVDFOptions, tflite_SVDFOptions)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, RNNOptions, tflite_RNNOptions)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, FullyConnectedOptions, tflite_FullyConnectedOptions)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, SoftmaxOptions, tflite_SoftmaxOptions)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, ConcatenationOptions, tflite_ConcatenationOptions)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, AddOptions, tflite_AddOptions)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, L2NormOptions, tflite_L2NormOptions)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, LocalResponseNormalizationOptions, tflite_LocalResponseNormalizationOptions)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, LSTMOptions, tflite_LSTMOptions)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, ResizeBilinearOptions, tflite_ResizeBilinearOptions)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, CallOptions, tflite_CallOptions)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, ReshapeOptions, tflite_ReshapeOptions)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, SkipGramOptions, tflite_SkipGramOptions)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, SpaceToDepthOptions, tflite_SpaceToDepthOptions)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, EmbeddingLookupSparseOptions, tflite_EmbeddingLookupSparseOptions)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, MulOptions, tflite_MulOptions)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, PadOptions, tflite_PadOptions)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, GatherOptions, tflite_GatherOptions)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, BatchToSpaceNDOptions, tflite_BatchToSpaceNDOptions)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, SpaceToBatchNDOptions, tflite_SpaceToBatchNDOptions)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, TransposeOptions, tflite_TransposeOptions)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, ReducerOptions, tflite_ReducerOptions)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, SubOptions, tflite_SubOptions)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, DivOptions, tflite_DivOptions)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, SqueezeOptions, tflite_SqueezeOptions)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, SequenceRNNOptions, tflite_SequenceRNNOptions)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, StridedSliceOptions, tflite_StridedSliceOptions)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, ExpOptions, tflite_ExpOptions)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, TopKV2Options, tflite_TopKV2Options)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, SplitOptions, tflite_SplitOptions)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, LogSoftmaxOptions, tflite_LogSoftmaxOptions)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, CastOptions, tflite_CastOptions)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, DequantizeOptions, tflite_DequantizeOptions)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, MaximumMinimumOptions, tflite_MaximumMinimumOptions)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, ArgMaxOptions, tflite_ArgMaxOptions)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, LessOptions, tflite_LessOptions)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, NegOptions, tflite_NegOptions)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, PadV2Options, tflite_PadV2Options)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, GreaterOptions, tflite_GreaterOptions)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, GreaterEqualOptions, tflite_GreaterEqualOptions)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, LessEqualOptions, tflite_LessEqualOptions)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, SelectOptions, tflite_SelectOptions)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, SliceOptions, tflite_SliceOptions)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, TransposeConvOptions, tflite_TransposeConvOptions)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, SparseToDenseOptions, tflite_SparseToDenseOptions)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, TileOptions, tflite_TileOptions)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, ExpandDimsOptions, tflite_ExpandDimsOptions)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, EqualOptions, tflite_EqualOptions)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, NotEqualOptions, tflite_NotEqualOptions)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, ShapeOptions, tflite_ShapeOptions)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, PowOptions, tflite_PowOptions)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, ArgMinOptions, tflite_ArgMinOptions)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, FakeQuantOptions, tflite_FakeQuantOptions)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, PackOptions, tflite_PackOptions)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, LogicalOrOptions, tflite_LogicalOrOptions)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, OneHotOptions, tflite_OneHotOptions)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, LogicalAndOptions, tflite_LogicalAndOptions)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, LogicalNotOptions, tflite_LogicalNotOptions)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, UnpackOptions, tflite_UnpackOptions)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, FloorDivOptions, tflite_FloorDivOptions)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, SquareOptions, tflite_SquareOptions)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, ZerosLikeOptions, tflite_ZerosLikeOptions)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, FillOptions, tflite_FillOptions)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, BidirectionalSequenceLSTMOptions, tflite_BidirectionalSequenceLSTMOptions)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, BidirectionalSequenceRNNOptions, tflite_BidirectionalSequenceRNNOptions)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, UnidirectionalSequenceLSTMOptions, tflite_UnidirectionalSequenceLSTMOptions)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, FloorModOptions, tflite_FloorModOptions)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, RangeOptions, tflite_RangeOptions)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, ResizeNearestNeighborOptions, tflite_ResizeNearestNeighborOptions)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, LeakyReluOptions, tflite_LeakyReluOptions)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, SquaredDifferenceOptions, tflite_SquaredDifferenceOptions)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, MirrorPadOptions, tflite_MirrorPadOptions)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, AbsOptions, tflite_AbsOptions)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, SplitVOptions, tflite_SplitVOptions)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, UniqueOptions, tflite_UniqueOptions)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, ReverseV2Options, tflite_ReverseV2Options)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, AddNOptions, tflite_AddNOptions)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, GatherNdOptions, tflite_GatherNdOptions)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, CosOptions, tflite_CosOptions)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, WhereOptions, tflite_WhereOptions)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, RankOptions, tflite_RankOptions)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, ReverseSequenceOptions, tflite_ReverseSequenceOptions)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, MatrixDiagOptions, tflite_MatrixDiagOptions)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, QuantizeOptions, tflite_QuantizeOptions)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, MatrixSetDiagOptions, tflite_MatrixSetDiagOptions)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, HardSwishOptions, tflite_HardSwishOptions)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, IfOptions, tflite_IfOptions)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, WhileOptions, tflite_WhileOptions)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, DepthToSpaceOptions, tflite_DepthToSpaceOptions)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, NonMaxSuppressionV4Options, tflite_NonMaxSuppressionV4Options)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, NonMaxSuppressionV5Options, tflite_NonMaxSuppressionV5Options)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, ScatterNdOptions, tflite_ScatterNdOptions)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, SelectV2Options, tflite_SelectV2Options)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, DensifyOptions, tflite_DensifyOptions)
__flatbuffers_build_union_table_value_field(flatbuffers_, tflite_Operator_builtin_options, tflite_BuiltinOptions, SegmentSumOptions, tflite_SegmentSumOptions)
__flatbuffers_build_vector_field(5, flatbuffers_, tflite_Operator_custom_options, flatbuffers_uint8, uint8_t, tflite_Operator)
__flatbuffers_build_scalar_field(6, flatbuffers_, tflite_Operator_custom_options_format, tflite_CustomOptionsFormat, tflite_CustomOptionsFormat_enum_t, 1, 1, INT8_C(0), tflite_Operator)
__flatbuffers_build_vector_field(7, flatbuffers_, tflite_Operator_mutating_variable_inputs, flatbuffers_bool, flatbuffers_bool_t, tflite_Operator)
__flatbuffers_build_vector_field(8, flatbuffers_, tflite_Operator_intermediates, flatbuffers_int32, int32_t, tflite_Operator)

static inline tflite_Operator_ref_t tflite_Operator_create(flatbuffers_builder_t *B __tflite_Operator_formal_args)
{
    if (tflite_Operator_start(B)
        || tflite_Operator_opcode_index_add(B, v0)
        || tflite_Operator_inputs_add(B, v1)
        || tflite_Operator_outputs_add(B, v2)
        || tflite_Operator_builtin_options_add_value(B, v4)
        || tflite_Operator_custom_options_add(B, v5)
        || tflite_Operator_mutating_variable_inputs_add(B, v7)
        || tflite_Operator_intermediates_add(B, v8)
        || tflite_Operator_custom_options_format_add(B, v6)
        || tflite_Operator_builtin_options_add_type(B, v4.type)) {
        return 0;
    }
    return tflite_Operator_end(B);
}

static tflite_Operator_ref_t tflite_Operator_clone(flatbuffers_builder_t *B, tflite_Operator_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_Operator_start(B)
        || tflite_Operator_opcode_index_pick(B, t)
        || tflite_Operator_inputs_pick(B, t)
        || tflite_Operator_outputs_pick(B, t)
        || tflite_Operator_builtin_options_pick(B, t)
        || tflite_Operator_custom_options_pick(B, t)
        || tflite_Operator_mutating_variable_inputs_pick(B, t)
        || tflite_Operator_intermediates_pick(B, t)
        || tflite_Operator_custom_options_format_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_Operator_end(B));
}

__flatbuffers_build_table_vector_field(0, flatbuffers_, tflite_SubGraph_tensors, tflite_Tensor, tflite_SubGraph)
__flatbuffers_build_vector_field(1, flatbuffers_, tflite_SubGraph_inputs, flatbuffers_int32, int32_t, tflite_SubGraph)
__flatbuffers_build_vector_field(2, flatbuffers_, tflite_SubGraph_outputs, flatbuffers_int32, int32_t, tflite_SubGraph)
__flatbuffers_build_table_vector_field(3, flatbuffers_, tflite_SubGraph_operators, tflite_Operator, tflite_SubGraph)
__flatbuffers_build_string_field(4, flatbuffers_, tflite_SubGraph_name, tflite_SubGraph)

static inline tflite_SubGraph_ref_t tflite_SubGraph_create(flatbuffers_builder_t *B __tflite_SubGraph_formal_args)
{
    if (tflite_SubGraph_start(B)
        || tflite_SubGraph_tensors_add(B, v0)
        || tflite_SubGraph_inputs_add(B, v1)
        || tflite_SubGraph_outputs_add(B, v2)
        || tflite_SubGraph_operators_add(B, v3)
        || tflite_SubGraph_name_add(B, v4)) {
        return 0;
    }
    return tflite_SubGraph_end(B);
}

static tflite_SubGraph_ref_t tflite_SubGraph_clone(flatbuffers_builder_t *B, tflite_SubGraph_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_SubGraph_start(B)
        || tflite_SubGraph_tensors_pick(B, t)
        || tflite_SubGraph_inputs_pick(B, t)
        || tflite_SubGraph_outputs_pick(B, t)
        || tflite_SubGraph_operators_pick(B, t)
        || tflite_SubGraph_name_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_SubGraph_end(B));
}

__flatbuffers_build_vector_field(0, flatbuffers_, tflite_Buffer_data, flatbuffers_uint8, uint8_t, tflite_Buffer)

static inline tflite_Buffer_ref_t tflite_Buffer_create(flatbuffers_builder_t *B __tflite_Buffer_formal_args)
{
    if (tflite_Buffer_start(B)
        || tflite_Buffer_data_add(B, v0)) {
        return 0;
    }
    return tflite_Buffer_end(B);
}

static tflite_Buffer_ref_t tflite_Buffer_clone(flatbuffers_builder_t *B, tflite_Buffer_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_Buffer_start(B)
        || tflite_Buffer_data_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_Buffer_end(B));
}

__flatbuffers_build_string_field(0, flatbuffers_, tflite_Metadata_name, tflite_Metadata)
__flatbuffers_build_scalar_field(1, flatbuffers_, tflite_Metadata_buffer, flatbuffers_uint32, uint32_t, 4, 4, UINT32_C(0), tflite_Metadata)

static inline tflite_Metadata_ref_t tflite_Metadata_create(flatbuffers_builder_t *B __tflite_Metadata_formal_args)
{
    if (tflite_Metadata_start(B)
        || tflite_Metadata_name_add(B, v0)
        || tflite_Metadata_buffer_add(B, v1)) {
        return 0;
    }
    return tflite_Metadata_end(B);
}

static tflite_Metadata_ref_t tflite_Metadata_clone(flatbuffers_builder_t *B, tflite_Metadata_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_Metadata_start(B)
        || tflite_Metadata_name_pick(B, t)
        || tflite_Metadata_buffer_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_Metadata_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, tflite_Model_version, flatbuffers_uint32, uint32_t, 4, 4, UINT32_C(0), tflite_Model)
__flatbuffers_build_table_vector_field(1, flatbuffers_, tflite_Model_operator_codes, tflite_OperatorCode, tflite_Model)
__flatbuffers_build_table_vector_field(2, flatbuffers_, tflite_Model_subgraphs, tflite_SubGraph, tflite_Model)
__flatbuffers_build_string_field(3, flatbuffers_, tflite_Model_description, tflite_Model)
__flatbuffers_build_table_vector_field(4, flatbuffers_, tflite_Model_buffers, tflite_Buffer, tflite_Model)
__flatbuffers_build_vector_field(5, flatbuffers_, tflite_Model_metadata_buffer, flatbuffers_int32, int32_t, tflite_Model)
__flatbuffers_build_table_vector_field(6, flatbuffers_, tflite_Model_metadata, tflite_Metadata, tflite_Model)

static inline tflite_Model_ref_t tflite_Model_create(flatbuffers_builder_t *B __tflite_Model_formal_args)
{
    if (tflite_Model_start(B)
        || tflite_Model_version_add(B, v0)
        || tflite_Model_operator_codes_add(B, v1)
        || tflite_Model_subgraphs_add(B, v2)
        || tflite_Model_description_add(B, v3)
        || tflite_Model_buffers_add(B, v4)
        || tflite_Model_metadata_buffer_add(B, v5)
        || tflite_Model_metadata_add(B, v6)) {
        return 0;
    }
    return tflite_Model_end(B);
}

static tflite_Model_ref_t tflite_Model_clone(flatbuffers_builder_t *B, tflite_Model_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (tflite_Model_start(B)
        || tflite_Model_version_pick(B, t)
        || tflite_Model_operator_codes_pick(B, t)
        || tflite_Model_subgraphs_pick(B, t)
        || tflite_Model_description_pick(B, t)
        || tflite_Model_buffers_pick(B, t)
        || tflite_Model_metadata_buffer_pick(B, t)
        || tflite_Model_metadata_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, tflite_Model_end(B));
}

#include "flatcc/flatcc_epilogue.h"
#endif /* SCHEMA_NO_FORCE_ALIGN_BUILDER_H */
#ifndef SCHEMA_NO_FORCE_ALIGN_VERIFIER_H
#define SCHEMA_NO_FORCE_ALIGN_VERIFIER_H

/* Generated by flatcc 0.6.1-dev FlatBuffers schema compiler for C by dvide.com */

#ifndef SCHEMA_NO_FORCE_ALIGN_READER_H
#include "schema_no_force_align_reader.h"
#endif
#include "flatcc/flatcc_verifier.h"
#include "flatcc/flatcc_prologue.h"

static int tflite_CustomQuantization_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_QuantizationParameters_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_Int32Vector_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_Uint16Vector_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_Uint8Vector_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_DimensionMetadata_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_SparsityParameters_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_Tensor_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_Conv2DOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_Pool2DOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_DepthwiseConv2DOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_ConcatEmbeddingsOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_LSHProjectionOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_SVDFOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_RNNOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_SequenceRNNOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_BidirectionalSequenceRNNOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_FullyConnectedOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_SoftmaxOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_ConcatenationOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_AddOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_MulOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_L2NormOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_LocalResponseNormalizationOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_LSTMOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_UnidirectionalSequenceLSTMOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_BidirectionalSequenceLSTMOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_ResizeBilinearOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_ResizeNearestNeighborOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_CallOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_PadOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_PadV2Options_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_ReshapeOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_SpaceToBatchNDOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_BatchToSpaceNDOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_SkipGramOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_SpaceToDepthOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_DepthToSpaceOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_SubOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_DivOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_TopKV2Options_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_EmbeddingLookupSparseOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_GatherOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_TransposeOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_ExpOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_CosOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_ReducerOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_SqueezeOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_SplitOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_SplitVOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_StridedSliceOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_LogSoftmaxOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_CastOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_DequantizeOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_MaximumMinimumOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_TileOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_ArgMaxOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_ArgMinOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_GreaterOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_GreaterEqualOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_LessOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_LessEqualOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_NegOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_SelectOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_SliceOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_TransposeConvOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_ExpandDimsOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_SparseToDenseOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_EqualOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_NotEqualOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_ShapeOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_RankOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_PowOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_FakeQuantOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_PackOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_LogicalOrOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_OneHotOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_AbsOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_HardSwishOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_LogicalAndOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_LogicalNotOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_UnpackOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_FloorDivOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_SquareOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_ZerosLikeOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_FillOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_FloorModOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_RangeOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_LeakyReluOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_SquaredDifferenceOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_MirrorPadOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_UniqueOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_ReverseV2Options_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_AddNOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_GatherNdOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_WhereOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_ReverseSequenceOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_MatrixDiagOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_QuantizeOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_MatrixSetDiagOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_IfOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_WhileOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_NonMaxSuppressionV4Options_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_NonMaxSuppressionV5Options_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_ScatterNdOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_SelectV2Options_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_DensifyOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_SegmentSumOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_OperatorCode_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_Operator_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_SubGraph_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_Buffer_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_Metadata_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_Model_verify_table(flatcc_table_verifier_descriptor_t *td);

static int tflite_QuantizationDetails_union_verifier(flatcc_union_verifier_descriptor_t *ud)
{
    switch (ud->type) {
    case 1: return flatcc_verify_union_table(ud, tflite_CustomQuantization_verify_table); /* CustomQuantization */
    default: return flatcc_verify_ok;
    }
}

static int tflite_SparseIndexVector_union_verifier(flatcc_union_verifier_descriptor_t *ud)
{
    switch (ud->type) {
    case 1: return flatcc_verify_union_table(ud, tflite_Int32Vector_verify_table); /* Int32Vector */
    case 2: return flatcc_verify_union_table(ud, tflite_Uint16Vector_verify_table); /* Uint16Vector */
    case 3: return flatcc_verify_union_table(ud, tflite_Uint8Vector_verify_table); /* Uint8Vector */
    default: return flatcc_verify_ok;
    }
}

static int tflite_BuiltinOptions_union_verifier(flatcc_union_verifier_descriptor_t *ud)
{
    switch (ud->type) {
    case 1: return flatcc_verify_union_table(ud, tflite_Conv2DOptions_verify_table); /* Conv2DOptions */
    case 2: return flatcc_verify_union_table(ud, tflite_DepthwiseConv2DOptions_verify_table); /* DepthwiseConv2DOptions */
    case 3: return flatcc_verify_union_table(ud, tflite_ConcatEmbeddingsOptions_verify_table); /* ConcatEmbeddingsOptions */
    case 4: return flatcc_verify_union_table(ud, tflite_LSHProjectionOptions_verify_table); /* LSHProjectionOptions */
    case 5: return flatcc_verify_union_table(ud, tflite_Pool2DOptions_verify_table); /* Pool2DOptions */
    case 6: return flatcc_verify_union_table(ud, tflite_SVDFOptions_verify_table); /* SVDFOptions */
    case 7: return flatcc_verify_union_table(ud, tflite_RNNOptions_verify_table); /* RNNOptions */
    case 8: return flatcc_verify_union_table(ud, tflite_FullyConnectedOptions_verify_table); /* FullyConnectedOptions */
    case 9: return flatcc_verify_union_table(ud, tflite_SoftmaxOptions_verify_table); /* SoftmaxOptions */
    case 10: return flatcc_verify_union_table(ud, tflite_ConcatenationOptions_verify_table); /* ConcatenationOptions */
    case 11: return flatcc_verify_union_table(ud, tflite_AddOptions_verify_table); /* AddOptions */
    case 12: return flatcc_verify_union_table(ud, tflite_L2NormOptions_verify_table); /* L2NormOptions */
    case 13: return flatcc_verify_union_table(ud, tflite_LocalResponseNormalizationOptions_verify_table); /* LocalResponseNormalizationOptions */
    case 14: return flatcc_verify_union_table(ud, tflite_LSTMOptions_verify_table); /* LSTMOptions */
    case 15: return flatcc_verify_union_table(ud, tflite_ResizeBilinearOptions_verify_table); /* ResizeBilinearOptions */
    case 16: return flatcc_verify_union_table(ud, tflite_CallOptions_verify_table); /* CallOptions */
    case 17: return flatcc_verify_union_table(ud, tflite_ReshapeOptions_verify_table); /* ReshapeOptions */
    case 18: return flatcc_verify_union_table(ud, tflite_SkipGramOptions_verify_table); /* SkipGramOptions */
    case 19: return flatcc_verify_union_table(ud, tflite_SpaceToDepthOptions_verify_table); /* SpaceToDepthOptions */
    case 20: return flatcc_verify_union_table(ud, tflite_EmbeddingLookupSparseOptions_verify_table); /* EmbeddingLookupSparseOptions */
    case 21: return flatcc_verify_union_table(ud, tflite_MulOptions_verify_table); /* MulOptions */
    case 22: return flatcc_verify_union_table(ud, tflite_PadOptions_verify_table); /* PadOptions */
    case 23: return flatcc_verify_union_table(ud, tflite_GatherOptions_verify_table); /* GatherOptions */
    case 24: return flatcc_verify_union_table(ud, tflite_BatchToSpaceNDOptions_verify_table); /* BatchToSpaceNDOptions */
    case 25: return flatcc_verify_union_table(ud, tflite_SpaceToBatchNDOptions_verify_table); /* SpaceToBatchNDOptions */
    case 26: return flatcc_verify_union_table(ud, tflite_TransposeOptions_verify_table); /* TransposeOptions */
    case 27: return flatcc_verify_union_table(ud, tflite_ReducerOptions_verify_table); /* ReducerOptions */
    case 28: return flatcc_verify_union_table(ud, tflite_SubOptions_verify_table); /* SubOptions */
    case 29: return flatcc_verify_union_table(ud, tflite_DivOptions_verify_table); /* DivOptions */
    case 30: return flatcc_verify_union_table(ud, tflite_SqueezeOptions_verify_table); /* SqueezeOptions */
    case 31: return flatcc_verify_union_table(ud, tflite_SequenceRNNOptions_verify_table); /* SequenceRNNOptions */
    case 32: return flatcc_verify_union_table(ud, tflite_StridedSliceOptions_verify_table); /* StridedSliceOptions */
    case 33: return flatcc_verify_union_table(ud, tflite_ExpOptions_verify_table); /* ExpOptions */
    case 34: return flatcc_verify_union_table(ud, tflite_TopKV2Options_verify_table); /* TopKV2Options */
    case 35: return flatcc_verify_union_table(ud, tflite_SplitOptions_verify_table); /* SplitOptions */
    case 36: return flatcc_verify_union_table(ud, tflite_LogSoftmaxOptions_verify_table); /* LogSoftmaxOptions */
    case 37: return flatcc_verify_union_table(ud, tflite_CastOptions_verify_table); /* CastOptions */
    case 38: return flatcc_verify_union_table(ud, tflite_DequantizeOptions_verify_table); /* DequantizeOptions */
    case 39: return flatcc_verify_union_table(ud, tflite_MaximumMinimumOptions_verify_table); /* MaximumMinimumOptions */
    case 40: return flatcc_verify_union_table(ud, tflite_ArgMaxOptions_verify_table); /* ArgMaxOptions */
    case 41: return flatcc_verify_union_table(ud, tflite_LessOptions_verify_table); /* LessOptions */
    case 42: return flatcc_verify_union_table(ud, tflite_NegOptions_verify_table); /* NegOptions */
    case 43: return flatcc_verify_union_table(ud, tflite_PadV2Options_verify_table); /* PadV2Options */
    case 44: return flatcc_verify_union_table(ud, tflite_GreaterOptions_verify_table); /* GreaterOptions */
    case 45: return flatcc_verify_union_table(ud, tflite_GreaterEqualOptions_verify_table); /* GreaterEqualOptions */
    case 46: return flatcc_verify_union_table(ud, tflite_LessEqualOptions_verify_table); /* LessEqualOptions */
    case 47: return flatcc_verify_union_table(ud, tflite_SelectOptions_verify_table); /* SelectOptions */
    case 48: return flatcc_verify_union_table(ud, tflite_SliceOptions_verify_table); /* SliceOptions */
    case 49: return flatcc_verify_union_table(ud, tflite_TransposeConvOptions_verify_table); /* TransposeConvOptions */
    case 50: return flatcc_verify_union_table(ud, tflite_SparseToDenseOptions_verify_table); /* SparseToDenseOptions */
    case 51: return flatcc_verify_union_table(ud, tflite_TileOptions_verify_table); /* TileOptions */
    case 52: return flatcc_verify_union_table(ud, tflite_ExpandDimsOptions_verify_table); /* ExpandDimsOptions */
    case 53: return flatcc_verify_union_table(ud, tflite_EqualOptions_verify_table); /* EqualOptions */
    case 54: return flatcc_verify_union_table(ud, tflite_NotEqualOptions_verify_table); /* NotEqualOptions */
    case 55: return flatcc_verify_union_table(ud, tflite_ShapeOptions_verify_table); /* ShapeOptions */
    case 56: return flatcc_verify_union_table(ud, tflite_PowOptions_verify_table); /* PowOptions */
    case 57: return flatcc_verify_union_table(ud, tflite_ArgMinOptions_verify_table); /* ArgMinOptions */
    case 58: return flatcc_verify_union_table(ud, tflite_FakeQuantOptions_verify_table); /* FakeQuantOptions */
    case 59: return flatcc_verify_union_table(ud, tflite_PackOptions_verify_table); /* PackOptions */
    case 60: return flatcc_verify_union_table(ud, tflite_LogicalOrOptions_verify_table); /* LogicalOrOptions */
    case 61: return flatcc_verify_union_table(ud, tflite_OneHotOptions_verify_table); /* OneHotOptions */
    case 62: return flatcc_verify_union_table(ud, tflite_LogicalAndOptions_verify_table); /* LogicalAndOptions */
    case 63: return flatcc_verify_union_table(ud, tflite_LogicalNotOptions_verify_table); /* LogicalNotOptions */
    case 64: return flatcc_verify_union_table(ud, tflite_UnpackOptions_verify_table); /* UnpackOptions */
    case 65: return flatcc_verify_union_table(ud, tflite_FloorDivOptions_verify_table); /* FloorDivOptions */
    case 66: return flatcc_verify_union_table(ud, tflite_SquareOptions_verify_table); /* SquareOptions */
    case 67: return flatcc_verify_union_table(ud, tflite_ZerosLikeOptions_verify_table); /* ZerosLikeOptions */
    case 68: return flatcc_verify_union_table(ud, tflite_FillOptions_verify_table); /* FillOptions */
    case 69: return flatcc_verify_union_table(ud, tflite_BidirectionalSequenceLSTMOptions_verify_table); /* BidirectionalSequenceLSTMOptions */
    case 70: return flatcc_verify_union_table(ud, tflite_BidirectionalSequenceRNNOptions_verify_table); /* BidirectionalSequenceRNNOptions */
    case 71: return flatcc_verify_union_table(ud, tflite_UnidirectionalSequenceLSTMOptions_verify_table); /* UnidirectionalSequenceLSTMOptions */
    case 72: return flatcc_verify_union_table(ud, tflite_FloorModOptions_verify_table); /* FloorModOptions */
    case 73: return flatcc_verify_union_table(ud, tflite_RangeOptions_verify_table); /* RangeOptions */
    case 74: return flatcc_verify_union_table(ud, tflite_ResizeNearestNeighborOptions_verify_table); /* ResizeNearestNeighborOptions */
    case 75: return flatcc_verify_union_table(ud, tflite_LeakyReluOptions_verify_table); /* LeakyReluOptions */
    case 76: return flatcc_verify_union_table(ud, tflite_SquaredDifferenceOptions_verify_table); /* SquaredDifferenceOptions */
    case 77: return flatcc_verify_union_table(ud, tflite_MirrorPadOptions_verify_table); /* MirrorPadOptions */
    case 78: return flatcc_verify_union_table(ud, tflite_AbsOptions_verify_table); /* AbsOptions */
    case 79: return flatcc_verify_union_table(ud, tflite_SplitVOptions_verify_table); /* SplitVOptions */
    case 80: return flatcc_verify_union_table(ud, tflite_UniqueOptions_verify_table); /* UniqueOptions */
    case 81: return flatcc_verify_union_table(ud, tflite_ReverseV2Options_verify_table); /* ReverseV2Options */
    case 82: return flatcc_verify_union_table(ud, tflite_AddNOptions_verify_table); /* AddNOptions */
    case 83: return flatcc_verify_union_table(ud, tflite_GatherNdOptions_verify_table); /* GatherNdOptions */
    case 84: return flatcc_verify_union_table(ud, tflite_CosOptions_verify_table); /* CosOptions */
    case 85: return flatcc_verify_union_table(ud, tflite_WhereOptions_verify_table); /* WhereOptions */
    case 86: return flatcc_verify_union_table(ud, tflite_RankOptions_verify_table); /* RankOptions */
    case 87: return flatcc_verify_union_table(ud, tflite_ReverseSequenceOptions_verify_table); /* ReverseSequenceOptions */
    case 88: return flatcc_verify_union_table(ud, tflite_MatrixDiagOptions_verify_table); /* MatrixDiagOptions */
    case 89: return flatcc_verify_union_table(ud, tflite_QuantizeOptions_verify_table); /* QuantizeOptions */
    case 90: return flatcc_verify_union_table(ud, tflite_MatrixSetDiagOptions_verify_table); /* MatrixSetDiagOptions */
    case 91: return flatcc_verify_union_table(ud, tflite_HardSwishOptions_verify_table); /* HardSwishOptions */
    case 92: return flatcc_verify_union_table(ud, tflite_IfOptions_verify_table); /* IfOptions */
    case 93: return flatcc_verify_union_table(ud, tflite_WhileOptions_verify_table); /* WhileOptions */
    case 94: return flatcc_verify_union_table(ud, tflite_DepthToSpaceOptions_verify_table); /* DepthToSpaceOptions */
    case 95: return flatcc_verify_union_table(ud, tflite_NonMaxSuppressionV4Options_verify_table); /* NonMaxSuppressionV4Options */
    case 96: return flatcc_verify_union_table(ud, tflite_NonMaxSuppressionV5Options_verify_table); /* NonMaxSuppressionV5Options */
    case 97: return flatcc_verify_union_table(ud, tflite_ScatterNdOptions_verify_table); /* ScatterNdOptions */
    case 98: return flatcc_verify_union_table(ud, tflite_SelectV2Options_verify_table); /* SelectV2Options */
    case 99: return flatcc_verify_union_table(ud, tflite_DensifyOptions_verify_table); /* DensifyOptions */
    case 100: return flatcc_verify_union_table(ud, tflite_SegmentSumOptions_verify_table); /* SegmentSumOptions */
    default: return flatcc_verify_ok;
    }
}

static int tflite_CustomQuantization_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_vector_field(td, 0, 0, 1, 1, INT64_C(4294967295)) /* custom */)) return ret;
    return flatcc_verify_ok;
}

static inline int tflite_CustomQuantization_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_CustomQuantization_identifier, &tflite_CustomQuantization_verify_table);
}

static inline int tflite_CustomQuantization_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_CustomQuantization_type_identifier, &tflite_CustomQuantization_verify_table);
}

static inline int tflite_CustomQuantization_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_CustomQuantization_verify_table);
}

static inline int tflite_CustomQuantization_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_CustomQuantization_verify_table);
}

static int tflite_QuantizationParameters_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_vector_field(td, 0, 0, 4, 4, INT64_C(1073741823)) /* min */)) return ret;
    if ((ret = flatcc_verify_vector_field(td, 1, 0, 4, 4, INT64_C(1073741823)) /* max */)) return ret;
    if ((ret = flatcc_verify_vector_field(td, 2, 0, 4, 4, INT64_C(1073741823)) /* scale */)) return ret;
    if ((ret = flatcc_verify_vector_field(td, 3, 0, 8, 8, INT64_C(536870911)) /* zero_point */)) return ret;
    if ((ret = flatcc_verify_union_field(td, 5, 0, &tflite_QuantizationDetails_union_verifier) /* details */)) return ret;
    if ((ret = flatcc_verify_field(td, 6, 4, 4) /* quantized_dimension */)) return ret;
    return flatcc_verify_ok;
}

static inline int tflite_QuantizationParameters_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_QuantizationParameters_identifier, &tflite_QuantizationParameters_verify_table);
}

static inline int tflite_QuantizationParameters_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_QuantizationParameters_type_identifier, &tflite_QuantizationParameters_verify_table);
}

static inline int tflite_QuantizationParameters_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_QuantizationParameters_verify_table);
}

static inline int tflite_QuantizationParameters_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_QuantizationParameters_verify_table);
}

static int tflite_Int32Vector_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_vector_field(td, 0, 0, 4, 4, INT64_C(1073741823)) /* values */)) return ret;
    return flatcc_verify_ok;
}

static inline int tflite_Int32Vector_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_Int32Vector_identifier, &tflite_Int32Vector_verify_table);
}

static inline int tflite_Int32Vector_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_Int32Vector_type_identifier, &tflite_Int32Vector_verify_table);
}

static inline int tflite_Int32Vector_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_Int32Vector_verify_table);
}

static inline int tflite_Int32Vector_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_Int32Vector_verify_table);
}

static int tflite_Uint16Vector_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_vector_field(td, 0, 0, 2, 2, INT64_C(2147483647)) /* values */)) return ret;
    return flatcc_verify_ok;
}

static inline int tflite_Uint16Vector_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_Uint16Vector_identifier, &tflite_Uint16Vector_verify_table);
}

static inline int tflite_Uint16Vector_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_Uint16Vector_type_identifier, &tflite_Uint16Vector_verify_table);
}

static inline int tflite_Uint16Vector_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_Uint16Vector_verify_table);
}

static inline int tflite_Uint16Vector_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_Uint16Vector_verify_table);
}

static int tflite_Uint8Vector_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_vector_field(td, 0, 0, 1, 1, INT64_C(4294967295)) /* values */)) return ret;
    return flatcc_verify_ok;
}

static inline int tflite_Uint8Vector_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_Uint8Vector_identifier, &tflite_Uint8Vector_verify_table);
}

static inline int tflite_Uint8Vector_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_Uint8Vector_type_identifier, &tflite_Uint8Vector_verify_table);
}

static inline int tflite_Uint8Vector_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_Uint8Vector_verify_table);
}

static inline int tflite_Uint8Vector_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_Uint8Vector_verify_table);
}

static int tflite_DimensionMetadata_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 1, 1) /* format */)) return ret;
    if ((ret = flatcc_verify_field(td, 1, 4, 4) /* dense_size */)) return ret;
    if ((ret = flatcc_verify_union_field(td, 3, 0, &tflite_SparseIndexVector_union_verifier) /* array_segments */)) return ret;
    if ((ret = flatcc_verify_union_field(td, 5, 0, &tflite_SparseIndexVector_union_verifier) /* array_indices */)) return ret;
    return flatcc_verify_ok;
}

static inline int tflite_DimensionMetadata_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_DimensionMetadata_identifier, &tflite_DimensionMetadata_verify_table);
}

static inline int tflite_DimensionMetadata_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_DimensionMetadata_type_identifier, &tflite_DimensionMetadata_verify_table);
}

static inline int tflite_DimensionMetadata_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_DimensionMetadata_verify_table);
}

static inline int tflite_DimensionMetadata_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_DimensionMetadata_verify_table);
}

static int tflite_SparsityParameters_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_vector_field(td, 0, 0, 4, 4, INT64_C(1073741823)) /* traversal_order */)) return ret;
    if ((ret = flatcc_verify_vector_field(td, 1, 0, 4, 4, INT64_C(1073741823)) /* block_map */)) return ret;
    if ((ret = flatcc_verify_table_vector_field(td, 2, 0, &tflite_DimensionMetadata_verify_table) /* dim_metadata */)) return ret;
    return flatcc_verify_ok;
}

static inline int tflite_SparsityParameters_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_SparsityParameters_identifier, &tflite_SparsityParameters_verify_table);
}

static inline int tflite_SparsityParameters_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_SparsityParameters_type_identifier, &tflite_SparsityParameters_verify_table);
}

static inline int tflite_SparsityParameters_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_SparsityParameters_verify_table);
}

static inline int tflite_SparsityParameters_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_SparsityParameters_verify_table);
}

static int tflite_Tensor_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_vector_field(td, 0, 0, 4, 4, INT64_C(1073741823)) /* shape */)) return ret;
    if ((ret = flatcc_verify_field(td, 1, 1, 1) /* type */)) return ret;
    if ((ret = flatcc_verify_field(td, 2, 4, 4) /* buffer */)) return ret;
    if ((ret = flatcc_verify_string_field(td, 3, 0) /* name */)) return ret;
    if ((ret = flatcc_verify_table_field(td, 4, 0, &tflite_QuantizationParameters_verify_table) /* quantization */)) return ret;
    if ((ret = flatcc_verify_field(td, 5, 1, 1) /* is_variable */)) return ret;
    if ((ret = flatcc_verify_table_field(td, 6, 0, &tflite_SparsityParameters_verify_table) /* sparsity */)) return ret;
    if ((ret = flatcc_verify_vector_field(td, 7, 0, 4, 4, INT64_C(1073741823)) /* shape_signature */)) return ret;
    return flatcc_verify_ok;
}

static inline int tflite_Tensor_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_Tensor_identifier, &tflite_Tensor_verify_table);
}

static inline int tflite_Tensor_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_Tensor_type_identifier, &tflite_Tensor_verify_table);
}

static inline int tflite_Tensor_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_Tensor_verify_table);
}

static inline int tflite_Tensor_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_Tensor_verify_table);
}

static int tflite_Conv2DOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 1, 1) /* padding */)) return ret;
    if ((ret = flatcc_verify_field(td, 1, 4, 4) /* stride_w */)) return ret;
    if ((ret = flatcc_verify_field(td, 2, 4, 4) /* stride_h */)) return ret;
    if ((ret = flatcc_verify_field(td, 3, 1, 1) /* fused_activation_function */)) return ret;
    if ((ret = flatcc_verify_field(td, 4, 4, 4) /* dilation_w_factor */)) return ret;
    if ((ret = flatcc_verify_field(td, 5, 4, 4) /* dilation_h_factor */)) return ret;
    return flatcc_verify_ok;
}

static inline int tflite_Conv2DOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_Conv2DOptions_identifier, &tflite_Conv2DOptions_verify_table);
}

static inline int tflite_Conv2DOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_Conv2DOptions_type_identifier, &tflite_Conv2DOptions_verify_table);
}

static inline int tflite_Conv2DOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_Conv2DOptions_verify_table);
}

static inline int tflite_Conv2DOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_Conv2DOptions_verify_table);
}

static int tflite_Pool2DOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 1, 1) /* padding */)) return ret;
    if ((ret = flatcc_verify_field(td, 1, 4, 4) /* stride_w */)) return ret;
    if ((ret = flatcc_verify_field(td, 2, 4, 4) /* stride_h */)) return ret;
    if ((ret = flatcc_verify_field(td, 3, 4, 4) /* filter_width */)) return ret;
    if ((ret = flatcc_verify_field(td, 4, 4, 4) /* filter_height */)) return ret;
    if ((ret = flatcc_verify_field(td, 5, 1, 1) /* fused_activation_function */)) return ret;
    return flatcc_verify_ok;
}

static inline int tflite_Pool2DOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_Pool2DOptions_identifier, &tflite_Pool2DOptions_verify_table);
}

static inline int tflite_Pool2DOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_Pool2DOptions_type_identifier, &tflite_Pool2DOptions_verify_table);
}

static inline int tflite_Pool2DOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_Pool2DOptions_verify_table);
}

static inline int tflite_Pool2DOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_Pool2DOptions_verify_table);
}

static int tflite_DepthwiseConv2DOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 1, 1) /* padding */)) return ret;
    if ((ret = flatcc_verify_field(td, 1, 4, 4) /* stride_w */)) return ret;
    if ((ret = flatcc_verify_field(td, 2, 4, 4) /* stride_h */)) return ret;
    if ((ret = flatcc_verify_field(td, 3, 4, 4) /* depth_multiplier */)) return ret;
    if ((ret = flatcc_verify_field(td, 4, 1, 1) /* fused_activation_function */)) return ret;
    if ((ret = flatcc_verify_field(td, 5, 4, 4) /* dilation_w_factor */)) return ret;
    if ((ret = flatcc_verify_field(td, 6, 4, 4) /* dilation_h_factor */)) return ret;
    return flatcc_verify_ok;
}

static inline int tflite_DepthwiseConv2DOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_DepthwiseConv2DOptions_identifier, &tflite_DepthwiseConv2DOptions_verify_table);
}

static inline int tflite_DepthwiseConv2DOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_DepthwiseConv2DOptions_type_identifier, &tflite_DepthwiseConv2DOptions_verify_table);
}

static inline int tflite_DepthwiseConv2DOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_DepthwiseConv2DOptions_verify_table);
}

static inline int tflite_DepthwiseConv2DOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_DepthwiseConv2DOptions_verify_table);
}

static int tflite_ConcatEmbeddingsOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 4, 4) /* num_channels */)) return ret;
    if ((ret = flatcc_verify_vector_field(td, 1, 0, 4, 4, INT64_C(1073741823)) /* num_columns_per_channel */)) return ret;
    if ((ret = flatcc_verify_vector_field(td, 2, 0, 4, 4, INT64_C(1073741823)) /* embedding_dim_per_channel */)) return ret;
    return flatcc_verify_ok;
}

static inline int tflite_ConcatEmbeddingsOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_ConcatEmbeddingsOptions_identifier, &tflite_ConcatEmbeddingsOptions_verify_table);
}

static inline int tflite_ConcatEmbeddingsOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_ConcatEmbeddingsOptions_type_identifier, &tflite_ConcatEmbeddingsOptions_verify_table);
}

static inline int tflite_ConcatEmbeddingsOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_ConcatEmbeddingsOptions_verify_table);
}

static inline int tflite_ConcatEmbeddingsOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_ConcatEmbeddingsOptions_verify_table);
}

static int tflite_LSHProjectionOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 1, 1) /* type */)) return ret;
    return flatcc_verify_ok;
}

static inline int tflite_LSHProjectionOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_LSHProjectionOptions_identifier, &tflite_LSHProjectionOptions_verify_table);
}

static inline int tflite_LSHProjectionOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_LSHProjectionOptions_type_identifier, &tflite_LSHProjectionOptions_verify_table);
}

static inline int tflite_LSHProjectionOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_LSHProjectionOptions_verify_table);
}

static inline int tflite_LSHProjectionOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_LSHProjectionOptions_verify_table);
}

static int tflite_SVDFOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 4, 4) /* rank */)) return ret;
    if ((ret = flatcc_verify_field(td, 1, 1, 1) /* fused_activation_function */)) return ret;
    return flatcc_verify_ok;
}

static inline int tflite_SVDFOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_SVDFOptions_identifier, &tflite_SVDFOptions_verify_table);
}

static inline int tflite_SVDFOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_SVDFOptions_type_identifier, &tflite_SVDFOptions_verify_table);
}

static inline int tflite_SVDFOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_SVDFOptions_verify_table);
}

static inline int tflite_SVDFOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_SVDFOptions_verify_table);
}

static int tflite_RNNOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 1, 1) /* fused_activation_function */)) return ret;
    return flatcc_verify_ok;
}

static inline int tflite_RNNOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_RNNOptions_identifier, &tflite_RNNOptions_verify_table);
}

static inline int tflite_RNNOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_RNNOptions_type_identifier, &tflite_RNNOptions_verify_table);
}

static inline int tflite_RNNOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_RNNOptions_verify_table);
}

static inline int tflite_RNNOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_RNNOptions_verify_table);
}

static int tflite_SequenceRNNOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 1, 1) /* time_major */)) return ret;
    if ((ret = flatcc_verify_field(td, 1, 1, 1) /* fused_activation_function */)) return ret;
    return flatcc_verify_ok;
}

static inline int tflite_SequenceRNNOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_SequenceRNNOptions_identifier, &tflite_SequenceRNNOptions_verify_table);
}

static inline int tflite_SequenceRNNOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_SequenceRNNOptions_type_identifier, &tflite_SequenceRNNOptions_verify_table);
}

static inline int tflite_SequenceRNNOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_SequenceRNNOptions_verify_table);
}

static inline int tflite_SequenceRNNOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_SequenceRNNOptions_verify_table);
}

static int tflite_BidirectionalSequenceRNNOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 1, 1) /* time_major */)) return ret;
    if ((ret = flatcc_verify_field(td, 1, 1, 1) /* fused_activation_function */)) return ret;
    if ((ret = flatcc_verify_field(td, 2, 1, 1) /* merge_outputs */)) return ret;
    return flatcc_verify_ok;
}

static inline int tflite_BidirectionalSequenceRNNOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_BidirectionalSequenceRNNOptions_identifier, &tflite_BidirectionalSequenceRNNOptions_verify_table);
}

static inline int tflite_BidirectionalSequenceRNNOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_BidirectionalSequenceRNNOptions_type_identifier, &tflite_BidirectionalSequenceRNNOptions_verify_table);
}

static inline int tflite_BidirectionalSequenceRNNOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_BidirectionalSequenceRNNOptions_verify_table);
}

static inline int tflite_BidirectionalSequenceRNNOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_BidirectionalSequenceRNNOptions_verify_table);
}

static int tflite_FullyConnectedOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 1, 1) /* fused_activation_function */)) return ret;
    if ((ret = flatcc_verify_field(td, 1, 1, 1) /* weights_format */)) return ret;
    if ((ret = flatcc_verify_field(td, 2, 1, 1) /* keep_num_dims */)) return ret;
    return flatcc_verify_ok;
}

static inline int tflite_FullyConnectedOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_FullyConnectedOptions_identifier, &tflite_FullyConnectedOptions_verify_table);
}

static inline int tflite_FullyConnectedOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_FullyConnectedOptions_type_identifier, &tflite_FullyConnectedOptions_verify_table);
}

static inline int tflite_FullyConnectedOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_FullyConnectedOptions_verify_table);
}

static inline int tflite_FullyConnectedOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_FullyConnectedOptions_verify_table);
}

static int tflite_SoftmaxOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 4, 4) /* beta */)) return ret;
    return flatcc_verify_ok;
}

static inline int tflite_SoftmaxOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_SoftmaxOptions_identifier, &tflite_SoftmaxOptions_verify_table);
}

static inline int tflite_SoftmaxOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_SoftmaxOptions_type_identifier, &tflite_SoftmaxOptions_verify_table);
}

static inline int tflite_SoftmaxOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_SoftmaxOptions_verify_table);
}

static inline int tflite_SoftmaxOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_SoftmaxOptions_verify_table);
}

static int tflite_ConcatenationOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 4, 4) /* axis */)) return ret;
    if ((ret = flatcc_verify_field(td, 1, 1, 1) /* fused_activation_function */)) return ret;
    return flatcc_verify_ok;
}

static inline int tflite_ConcatenationOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_ConcatenationOptions_identifier, &tflite_ConcatenationOptions_verify_table);
}

static inline int tflite_ConcatenationOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_ConcatenationOptions_type_identifier, &tflite_ConcatenationOptions_verify_table);
}

static inline int tflite_ConcatenationOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_ConcatenationOptions_verify_table);
}

static inline int tflite_ConcatenationOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_ConcatenationOptions_verify_table);
}

static int tflite_AddOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 1, 1) /* fused_activation_function */)) return ret;
    return flatcc_verify_ok;
}

static inline int tflite_AddOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_AddOptions_identifier, &tflite_AddOptions_verify_table);
}

static inline int tflite_AddOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_AddOptions_type_identifier, &tflite_AddOptions_verify_table);
}

static inline int tflite_AddOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_AddOptions_verify_table);
}

static inline int tflite_AddOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_AddOptions_verify_table);
}

static int tflite_MulOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 1, 1) /* fused_activation_function */)) return ret;
    return flatcc_verify_ok;
}

static inline int tflite_MulOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_MulOptions_identifier, &tflite_MulOptions_verify_table);
}

static inline int tflite_MulOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_MulOptions_type_identifier, &tflite_MulOptions_verify_table);
}

static inline int tflite_MulOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_MulOptions_verify_table);
}

static inline int tflite_MulOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_MulOptions_verify_table);
}

static int tflite_L2NormOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 1, 1) /* fused_activation_function */)) return ret;
    return flatcc_verify_ok;
}

static inline int tflite_L2NormOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_L2NormOptions_identifier, &tflite_L2NormOptions_verify_table);
}

static inline int tflite_L2NormOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_L2NormOptions_type_identifier, &tflite_L2NormOptions_verify_table);
}

static inline int tflite_L2NormOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_L2NormOptions_verify_table);
}

static inline int tflite_L2NormOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_L2NormOptions_verify_table);
}

static int tflite_LocalResponseNormalizationOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 4, 4) /* radius */)) return ret;
    if ((ret = flatcc_verify_field(td, 1, 4, 4) /* bias */)) return ret;
    if ((ret = flatcc_verify_field(td, 2, 4, 4) /* alpha */)) return ret;
    if ((ret = flatcc_verify_field(td, 3, 4, 4) /* beta */)) return ret;
    return flatcc_verify_ok;
}

static inline int tflite_LocalResponseNormalizationOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_LocalResponseNormalizationOptions_identifier, &tflite_LocalResponseNormalizationOptions_verify_table);
}

static inline int tflite_LocalResponseNormalizationOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_LocalResponseNormalizationOptions_type_identifier, &tflite_LocalResponseNormalizationOptions_verify_table);
}

static inline int tflite_LocalResponseNormalizationOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_LocalResponseNormalizationOptions_verify_table);
}

static inline int tflite_LocalResponseNormalizationOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_LocalResponseNormalizationOptions_verify_table);
}

static int tflite_LSTMOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 1, 1) /* fused_activation_function */)) return ret;
    if ((ret = flatcc_verify_field(td, 1, 4, 4) /* cell_clip */)) return ret;
    if ((ret = flatcc_verify_field(td, 2, 4, 4) /* proj_clip */)) return ret;
    if ((ret = flatcc_verify_field(td, 3, 1, 1) /* kernel_type */)) return ret;
    return flatcc_verify_ok;
}

static inline int tflite_LSTMOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_LSTMOptions_identifier, &tflite_LSTMOptions_verify_table);
}

static inline int tflite_LSTMOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_LSTMOptions_type_identifier, &tflite_LSTMOptions_verify_table);
}

static inline int tflite_LSTMOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_LSTMOptions_verify_table);
}

static inline int tflite_LSTMOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_LSTMOptions_verify_table);
}

static int tflite_UnidirectionalSequenceLSTMOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 1, 1) /* fused_activation_function */)) return ret;
    if ((ret = flatcc_verify_field(td, 1, 4, 4) /* cell_clip */)) return ret;
    if ((ret = flatcc_verify_field(td, 2, 4, 4) /* proj_clip */)) return ret;
    if ((ret = flatcc_verify_field(td, 3, 1, 1) /* time_major */)) return ret;
    return flatcc_verify_ok;
}

static inline int tflite_UnidirectionalSequenceLSTMOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_UnidirectionalSequenceLSTMOptions_identifier, &tflite_UnidirectionalSequenceLSTMOptions_verify_table);
}

static inline int tflite_UnidirectionalSequenceLSTMOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_UnidirectionalSequenceLSTMOptions_type_identifier, &tflite_UnidirectionalSequenceLSTMOptions_verify_table);
}

static inline int tflite_UnidirectionalSequenceLSTMOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_UnidirectionalSequenceLSTMOptions_verify_table);
}

static inline int tflite_UnidirectionalSequenceLSTMOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_UnidirectionalSequenceLSTMOptions_verify_table);
}

static int tflite_BidirectionalSequenceLSTMOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 1, 1) /* fused_activation_function */)) return ret;
    if ((ret = flatcc_verify_field(td, 1, 4, 4) /* cell_clip */)) return ret;
    if ((ret = flatcc_verify_field(td, 2, 4, 4) /* proj_clip */)) return ret;
    if ((ret = flatcc_verify_field(td, 3, 1, 1) /* merge_outputs */)) return ret;
    if ((ret = flatcc_verify_field(td, 4, 1, 1) /* time_major */)) return ret;
    return flatcc_verify_ok;
}

static inline int tflite_BidirectionalSequenceLSTMOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_BidirectionalSequenceLSTMOptions_identifier, &tflite_BidirectionalSequenceLSTMOptions_verify_table);
}

static inline int tflite_BidirectionalSequenceLSTMOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_BidirectionalSequenceLSTMOptions_type_identifier, &tflite_BidirectionalSequenceLSTMOptions_verify_table);
}

static inline int tflite_BidirectionalSequenceLSTMOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_BidirectionalSequenceLSTMOptions_verify_table);
}

static inline int tflite_BidirectionalSequenceLSTMOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_BidirectionalSequenceLSTMOptions_verify_table);
}

static int tflite_ResizeBilinearOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 2, 1, 1) /* align_corners */)) return ret;
    if ((ret = flatcc_verify_field(td, 3, 1, 1) /* half_pixel_centers */)) return ret;
    return flatcc_verify_ok;
}

static inline int tflite_ResizeBilinearOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_ResizeBilinearOptions_identifier, &tflite_ResizeBilinearOptions_verify_table);
}

static inline int tflite_ResizeBilinearOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_ResizeBilinearOptions_type_identifier, &tflite_ResizeBilinearOptions_verify_table);
}

static inline int tflite_ResizeBilinearOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_ResizeBilinearOptions_verify_table);
}

static inline int tflite_ResizeBilinearOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_ResizeBilinearOptions_verify_table);
}

static int tflite_ResizeNearestNeighborOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 1, 1) /* align_corners */)) return ret;
    return flatcc_verify_ok;
}

static inline int tflite_ResizeNearestNeighborOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_ResizeNearestNeighborOptions_identifier, &tflite_ResizeNearestNeighborOptions_verify_table);
}

static inline int tflite_ResizeNearestNeighborOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_ResizeNearestNeighborOptions_type_identifier, &tflite_ResizeNearestNeighborOptions_verify_table);
}

static inline int tflite_ResizeNearestNeighborOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_ResizeNearestNeighborOptions_verify_table);
}

static inline int tflite_ResizeNearestNeighborOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_ResizeNearestNeighborOptions_verify_table);
}

static int tflite_CallOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 4, 4) /* subgraph */)) return ret;
    return flatcc_verify_ok;
}

static inline int tflite_CallOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_CallOptions_identifier, &tflite_CallOptions_verify_table);
}

static inline int tflite_CallOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_CallOptions_type_identifier, &tflite_CallOptions_verify_table);
}

static inline int tflite_CallOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_CallOptions_verify_table);
}

static inline int tflite_CallOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_CallOptions_verify_table);
}

static int tflite_PadOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    return flatcc_verify_ok;
}

static inline int tflite_PadOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_PadOptions_identifier, &tflite_PadOptions_verify_table);
}

static inline int tflite_PadOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_PadOptions_type_identifier, &tflite_PadOptions_verify_table);
}

static inline int tflite_PadOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_PadOptions_verify_table);
}

static inline int tflite_PadOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_PadOptions_verify_table);
}

static int tflite_PadV2Options_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    return flatcc_verify_ok;
}

static inline int tflite_PadV2Options_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_PadV2Options_identifier, &tflite_PadV2Options_verify_table);
}

static inline int tflite_PadV2Options_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_PadV2Options_type_identifier, &tflite_PadV2Options_verify_table);
}

static inline int tflite_PadV2Options_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_PadV2Options_verify_table);
}

static inline int tflite_PadV2Options_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_PadV2Options_verify_table);
}

static int tflite_ReshapeOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_vector_field(td, 0, 0, 4, 4, INT64_C(1073741823)) /* new_shape */)) return ret;
    return flatcc_verify_ok;
}

static inline int tflite_ReshapeOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_ReshapeOptions_identifier, &tflite_ReshapeOptions_verify_table);
}

static inline int tflite_ReshapeOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_ReshapeOptions_type_identifier, &tflite_ReshapeOptions_verify_table);
}

static inline int tflite_ReshapeOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_ReshapeOptions_verify_table);
}

static inline int tflite_ReshapeOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_ReshapeOptions_verify_table);
}

static int tflite_SpaceToBatchNDOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    return flatcc_verify_ok;
}

static inline int tflite_SpaceToBatchNDOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_SpaceToBatchNDOptions_identifier, &tflite_SpaceToBatchNDOptions_verify_table);
}

static inline int tflite_SpaceToBatchNDOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_SpaceToBatchNDOptions_type_identifier, &tflite_SpaceToBatchNDOptions_verify_table);
}

static inline int tflite_SpaceToBatchNDOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_SpaceToBatchNDOptions_verify_table);
}

static inline int tflite_SpaceToBatchNDOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_SpaceToBatchNDOptions_verify_table);
}

static int tflite_BatchToSpaceNDOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    return flatcc_verify_ok;
}

static inline int tflite_BatchToSpaceNDOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_BatchToSpaceNDOptions_identifier, &tflite_BatchToSpaceNDOptions_verify_table);
}

static inline int tflite_BatchToSpaceNDOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_BatchToSpaceNDOptions_type_identifier, &tflite_BatchToSpaceNDOptions_verify_table);
}

static inline int tflite_BatchToSpaceNDOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_BatchToSpaceNDOptions_verify_table);
}

static inline int tflite_BatchToSpaceNDOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_BatchToSpaceNDOptions_verify_table);
}

static int tflite_SkipGramOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 4, 4) /* ngram_size */)) return ret;
    if ((ret = flatcc_verify_field(td, 1, 4, 4) /* max_skip_size */)) return ret;
    if ((ret = flatcc_verify_field(td, 2, 1, 1) /* include_all_ngrams */)) return ret;
    return flatcc_verify_ok;
}

static inline int tflite_SkipGramOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_SkipGramOptions_identifier, &tflite_SkipGramOptions_verify_table);
}

static inline int tflite_SkipGramOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_SkipGramOptions_type_identifier, &tflite_SkipGramOptions_verify_table);
}

static inline int tflite_SkipGramOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_SkipGramOptions_verify_table);
}

static inline int tflite_SkipGramOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_SkipGramOptions_verify_table);
}

static int tflite_SpaceToDepthOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 4, 4) /* block_size */)) return ret;
    return flatcc_verify_ok;
}

static inline int tflite_SpaceToDepthOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_SpaceToDepthOptions_identifier, &tflite_SpaceToDepthOptions_verify_table);
}

static inline int tflite_SpaceToDepthOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_SpaceToDepthOptions_type_identifier, &tflite_SpaceToDepthOptions_verify_table);
}

static inline int tflite_SpaceToDepthOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_SpaceToDepthOptions_verify_table);
}

static inline int tflite_SpaceToDepthOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_SpaceToDepthOptions_verify_table);
}

static int tflite_DepthToSpaceOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 4, 4) /* block_size */)) return ret;
    return flatcc_verify_ok;
}

static inline int tflite_DepthToSpaceOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_DepthToSpaceOptions_identifier, &tflite_DepthToSpaceOptions_verify_table);
}

static inline int tflite_DepthToSpaceOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_DepthToSpaceOptions_type_identifier, &tflite_DepthToSpaceOptions_verify_table);
}

static inline int tflite_DepthToSpaceOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_DepthToSpaceOptions_verify_table);
}

static inline int tflite_DepthToSpaceOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_DepthToSpaceOptions_verify_table);
}

static int tflite_SubOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 1, 1) /* fused_activation_function */)) return ret;
    return flatcc_verify_ok;
}

static inline int tflite_SubOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_SubOptions_identifier, &tflite_SubOptions_verify_table);
}

static inline int tflite_SubOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_SubOptions_type_identifier, &tflite_SubOptions_verify_table);
}

static inline int tflite_SubOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_SubOptions_verify_table);
}

static inline int tflite_SubOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_SubOptions_verify_table);
}

static int tflite_DivOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 1, 1) /* fused_activation_function */)) return ret;
    return flatcc_verify_ok;
}

static inline int tflite_DivOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_DivOptions_identifier, &tflite_DivOptions_verify_table);
}

static inline int tflite_DivOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_DivOptions_type_identifier, &tflite_DivOptions_verify_table);
}

static inline int tflite_DivOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_DivOptions_verify_table);
}

static inline int tflite_DivOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_DivOptions_verify_table);
}

static int tflite_TopKV2Options_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    return flatcc_verify_ok;
}

static inline int tflite_TopKV2Options_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_TopKV2Options_identifier, &tflite_TopKV2Options_verify_table);
}

static inline int tflite_TopKV2Options_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_TopKV2Options_type_identifier, &tflite_TopKV2Options_verify_table);
}

static inline int tflite_TopKV2Options_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_TopKV2Options_verify_table);
}

static inline int tflite_TopKV2Options_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_TopKV2Options_verify_table);
}

static int tflite_EmbeddingLookupSparseOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 1, 1) /* combiner */)) return ret;
    return flatcc_verify_ok;
}

static inline int tflite_EmbeddingLookupSparseOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_EmbeddingLookupSparseOptions_identifier, &tflite_EmbeddingLookupSparseOptions_verify_table);
}

static inline int tflite_EmbeddingLookupSparseOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_EmbeddingLookupSparseOptions_type_identifier, &tflite_EmbeddingLookupSparseOptions_verify_table);
}

static inline int tflite_EmbeddingLookupSparseOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_EmbeddingLookupSparseOptions_verify_table);
}

static inline int tflite_EmbeddingLookupSparseOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_EmbeddingLookupSparseOptions_verify_table);
}

static int tflite_GatherOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 4, 4) /* axis */)) return ret;
    return flatcc_verify_ok;
}

static inline int tflite_GatherOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_GatherOptions_identifier, &tflite_GatherOptions_verify_table);
}

static inline int tflite_GatherOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_GatherOptions_type_identifier, &tflite_GatherOptions_verify_table);
}

static inline int tflite_GatherOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_GatherOptions_verify_table);
}

static inline int tflite_GatherOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_GatherOptions_verify_table);
}

static int tflite_TransposeOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    return flatcc_verify_ok;
}

static inline int tflite_TransposeOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_TransposeOptions_identifier, &tflite_TransposeOptions_verify_table);
}

static inline int tflite_TransposeOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_TransposeOptions_type_identifier, &tflite_TransposeOptions_verify_table);
}

static inline int tflite_TransposeOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_TransposeOptions_verify_table);
}

static inline int tflite_TransposeOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_TransposeOptions_verify_table);
}

static int tflite_ExpOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    return flatcc_verify_ok;
}

static inline int tflite_ExpOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_ExpOptions_identifier, &tflite_ExpOptions_verify_table);
}

static inline int tflite_ExpOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_ExpOptions_type_identifier, &tflite_ExpOptions_verify_table);
}

static inline int tflite_ExpOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_ExpOptions_verify_table);
}

static inline int tflite_ExpOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_ExpOptions_verify_table);
}

static int tflite_CosOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    return flatcc_verify_ok;
}

static inline int tflite_CosOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_CosOptions_identifier, &tflite_CosOptions_verify_table);
}

static inline int tflite_CosOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_CosOptions_type_identifier, &tflite_CosOptions_verify_table);
}

static inline int tflite_CosOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_CosOptions_verify_table);
}

static inline int tflite_CosOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_CosOptions_verify_table);
}

static int tflite_ReducerOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 1, 1) /* keep_dims */)) return ret;
    return flatcc_verify_ok;
}

static inline int tflite_ReducerOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_ReducerOptions_identifier, &tflite_ReducerOptions_verify_table);
}

static inline int tflite_ReducerOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_ReducerOptions_type_identifier, &tflite_ReducerOptions_verify_table);
}

static inline int tflite_ReducerOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_ReducerOptions_verify_table);
}

static inline int tflite_ReducerOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_ReducerOptions_verify_table);
}

static int tflite_SqueezeOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_vector_field(td, 0, 0, 4, 4, INT64_C(1073741823)) /* squeeze_dims */)) return ret;
    return flatcc_verify_ok;
}

static inline int tflite_SqueezeOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_SqueezeOptions_identifier, &tflite_SqueezeOptions_verify_table);
}

static inline int tflite_SqueezeOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_SqueezeOptions_type_identifier, &tflite_SqueezeOptions_verify_table);
}

static inline int tflite_SqueezeOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_SqueezeOptions_verify_table);
}

static inline int tflite_SqueezeOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_SqueezeOptions_verify_table);
}

static int tflite_SplitOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 4, 4) /* num_splits */)) return ret;
    return flatcc_verify_ok;
}

static inline int tflite_SplitOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_SplitOptions_identifier, &tflite_SplitOptions_verify_table);
}

static inline int tflite_SplitOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_SplitOptions_type_identifier, &tflite_SplitOptions_verify_table);
}

static inline int tflite_SplitOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_SplitOptions_verify_table);
}

static inline int tflite_SplitOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_SplitOptions_verify_table);
}

static int tflite_SplitVOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 4, 4) /* num_splits */)) return ret;
    return flatcc_verify_ok;
}

static inline int tflite_SplitVOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_SplitVOptions_identifier, &tflite_SplitVOptions_verify_table);
}

static inline int tflite_SplitVOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_SplitVOptions_type_identifier, &tflite_SplitVOptions_verify_table);
}

static inline int tflite_SplitVOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_SplitVOptions_verify_table);
}

static inline int tflite_SplitVOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_SplitVOptions_verify_table);
}

static int tflite_StridedSliceOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 4, 4) /* begin_mask */)) return ret;
    if ((ret = flatcc_verify_field(td, 1, 4, 4) /* end_mask */)) return ret;
    if ((ret = flatcc_verify_field(td, 2, 4, 4) /* ellipsis_mask */)) return ret;
    if ((ret = flatcc_verify_field(td, 3, 4, 4) /* new_axis_mask */)) return ret;
    if ((ret = flatcc_verify_field(td, 4, 4, 4) /* shrink_axis_mask */)) return ret;
    return flatcc_verify_ok;
}

static inline int tflite_StridedSliceOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_StridedSliceOptions_identifier, &tflite_StridedSliceOptions_verify_table);
}

static inline int tflite_StridedSliceOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_StridedSliceOptions_type_identifier, &tflite_StridedSliceOptions_verify_table);
}

static inline int tflite_StridedSliceOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_StridedSliceOptions_verify_table);
}

static inline int tflite_StridedSliceOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_StridedSliceOptions_verify_table);
}

static int tflite_LogSoftmaxOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    return flatcc_verify_ok;
}

static inline int tflite_LogSoftmaxOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_LogSoftmaxOptions_identifier, &tflite_LogSoftmaxOptions_verify_table);
}

static inline int tflite_LogSoftmaxOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_LogSoftmaxOptions_type_identifier, &tflite_LogSoftmaxOptions_verify_table);
}

static inline int tflite_LogSoftmaxOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_LogSoftmaxOptions_verify_table);
}

static inline int tflite_LogSoftmaxOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_LogSoftmaxOptions_verify_table);
}

static int tflite_CastOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 1, 1) /* in_data_type */)) return ret;
    if ((ret = flatcc_verify_field(td, 1, 1, 1) /* out_data_type */)) return ret;
    return flatcc_verify_ok;
}

static inline int tflite_CastOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_CastOptions_identifier, &tflite_CastOptions_verify_table);
}

static inline int tflite_CastOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_CastOptions_type_identifier, &tflite_CastOptions_verify_table);
}

static inline int tflite_CastOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_CastOptions_verify_table);
}

static inline int tflite_CastOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_CastOptions_verify_table);
}

static int tflite_DequantizeOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    return flatcc_verify_ok;
}

static inline int tflite_DequantizeOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_DequantizeOptions_identifier, &tflite_DequantizeOptions_verify_table);
}

static inline int tflite_DequantizeOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_DequantizeOptions_type_identifier, &tflite_DequantizeOptions_verify_table);
}

static inline int tflite_DequantizeOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_DequantizeOptions_verify_table);
}

static inline int tflite_DequantizeOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_DequantizeOptions_verify_table);
}

static int tflite_MaximumMinimumOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    return flatcc_verify_ok;
}

static inline int tflite_MaximumMinimumOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_MaximumMinimumOptions_identifier, &tflite_MaximumMinimumOptions_verify_table);
}

static inline int tflite_MaximumMinimumOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_MaximumMinimumOptions_type_identifier, &tflite_MaximumMinimumOptions_verify_table);
}

static inline int tflite_MaximumMinimumOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_MaximumMinimumOptions_verify_table);
}

static inline int tflite_MaximumMinimumOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_MaximumMinimumOptions_verify_table);
}

static int tflite_TileOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    return flatcc_verify_ok;
}

static inline int tflite_TileOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_TileOptions_identifier, &tflite_TileOptions_verify_table);
}

static inline int tflite_TileOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_TileOptions_type_identifier, &tflite_TileOptions_verify_table);
}

static inline int tflite_TileOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_TileOptions_verify_table);
}

static inline int tflite_TileOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_TileOptions_verify_table);
}

static int tflite_ArgMaxOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 1, 1) /* output_type */)) return ret;
    return flatcc_verify_ok;
}

static inline int tflite_ArgMaxOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_ArgMaxOptions_identifier, &tflite_ArgMaxOptions_verify_table);
}

static inline int tflite_ArgMaxOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_ArgMaxOptions_type_identifier, &tflite_ArgMaxOptions_verify_table);
}

static inline int tflite_ArgMaxOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_ArgMaxOptions_verify_table);
}

static inline int tflite_ArgMaxOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_ArgMaxOptions_verify_table);
}

static int tflite_ArgMinOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 1, 1) /* output_type */)) return ret;
    return flatcc_verify_ok;
}

static inline int tflite_ArgMinOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_ArgMinOptions_identifier, &tflite_ArgMinOptions_verify_table);
}

static inline int tflite_ArgMinOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_ArgMinOptions_type_identifier, &tflite_ArgMinOptions_verify_table);
}

static inline int tflite_ArgMinOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_ArgMinOptions_verify_table);
}

static inline int tflite_ArgMinOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_ArgMinOptions_verify_table);
}

static int tflite_GreaterOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    return flatcc_verify_ok;
}

static inline int tflite_GreaterOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_GreaterOptions_identifier, &tflite_GreaterOptions_verify_table);
}

static inline int tflite_GreaterOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_GreaterOptions_type_identifier, &tflite_GreaterOptions_verify_table);
}

static inline int tflite_GreaterOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_GreaterOptions_verify_table);
}

static inline int tflite_GreaterOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_GreaterOptions_verify_table);
}

static int tflite_GreaterEqualOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    return flatcc_verify_ok;
}

static inline int tflite_GreaterEqualOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_GreaterEqualOptions_identifier, &tflite_GreaterEqualOptions_verify_table);
}

static inline int tflite_GreaterEqualOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_GreaterEqualOptions_type_identifier, &tflite_GreaterEqualOptions_verify_table);
}

static inline int tflite_GreaterEqualOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_GreaterEqualOptions_verify_table);
}

static inline int tflite_GreaterEqualOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_GreaterEqualOptions_verify_table);
}

static int tflite_LessOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    return flatcc_verify_ok;
}

static inline int tflite_LessOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_LessOptions_identifier, &tflite_LessOptions_verify_table);
}

static inline int tflite_LessOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_LessOptions_type_identifier, &tflite_LessOptions_verify_table);
}

static inline int tflite_LessOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_LessOptions_verify_table);
}

static inline int tflite_LessOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_LessOptions_verify_table);
}

static int tflite_LessEqualOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    return flatcc_verify_ok;
}

static inline int tflite_LessEqualOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_LessEqualOptions_identifier, &tflite_LessEqualOptions_verify_table);
}

static inline int tflite_LessEqualOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_LessEqualOptions_type_identifier, &tflite_LessEqualOptions_verify_table);
}

static inline int tflite_LessEqualOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_LessEqualOptions_verify_table);
}

static inline int tflite_LessEqualOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_LessEqualOptions_verify_table);
}

static int tflite_NegOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    return flatcc_verify_ok;
}

static inline int tflite_NegOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_NegOptions_identifier, &tflite_NegOptions_verify_table);
}

static inline int tflite_NegOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_NegOptions_type_identifier, &tflite_NegOptions_verify_table);
}

static inline int tflite_NegOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_NegOptions_verify_table);
}

static inline int tflite_NegOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_NegOptions_verify_table);
}

static int tflite_SelectOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    return flatcc_verify_ok;
}

static inline int tflite_SelectOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_SelectOptions_identifier, &tflite_SelectOptions_verify_table);
}

static inline int tflite_SelectOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_SelectOptions_type_identifier, &tflite_SelectOptions_verify_table);
}

static inline int tflite_SelectOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_SelectOptions_verify_table);
}

static inline int tflite_SelectOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_SelectOptions_verify_table);
}

static int tflite_SliceOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    return flatcc_verify_ok;
}

static inline int tflite_SliceOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_SliceOptions_identifier, &tflite_SliceOptions_verify_table);
}

static inline int tflite_SliceOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_SliceOptions_type_identifier, &tflite_SliceOptions_verify_table);
}

static inline int tflite_SliceOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_SliceOptions_verify_table);
}

static inline int tflite_SliceOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_SliceOptions_verify_table);
}

static int tflite_TransposeConvOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 1, 1) /* padding */)) return ret;
    if ((ret = flatcc_verify_field(td, 1, 4, 4) /* stride_w */)) return ret;
    if ((ret = flatcc_verify_field(td, 2, 4, 4) /* stride_h */)) return ret;
    return flatcc_verify_ok;
}

static inline int tflite_TransposeConvOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_TransposeConvOptions_identifier, &tflite_TransposeConvOptions_verify_table);
}

static inline int tflite_TransposeConvOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_TransposeConvOptions_type_identifier, &tflite_TransposeConvOptions_verify_table);
}

static inline int tflite_TransposeConvOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_TransposeConvOptions_verify_table);
}

static inline int tflite_TransposeConvOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_TransposeConvOptions_verify_table);
}

static int tflite_ExpandDimsOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    return flatcc_verify_ok;
}

static inline int tflite_ExpandDimsOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_ExpandDimsOptions_identifier, &tflite_ExpandDimsOptions_verify_table);
}

static inline int tflite_ExpandDimsOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_ExpandDimsOptions_type_identifier, &tflite_ExpandDimsOptions_verify_table);
}

static inline int tflite_ExpandDimsOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_ExpandDimsOptions_verify_table);
}

static inline int tflite_ExpandDimsOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_ExpandDimsOptions_verify_table);
}

static int tflite_SparseToDenseOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 1, 1) /* validate_indices */)) return ret;
    return flatcc_verify_ok;
}

static inline int tflite_SparseToDenseOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_SparseToDenseOptions_identifier, &tflite_SparseToDenseOptions_verify_table);
}

static inline int tflite_SparseToDenseOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_SparseToDenseOptions_type_identifier, &tflite_SparseToDenseOptions_verify_table);
}

static inline int tflite_SparseToDenseOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_SparseToDenseOptions_verify_table);
}

static inline int tflite_SparseToDenseOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_SparseToDenseOptions_verify_table);
}

static int tflite_EqualOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    return flatcc_verify_ok;
}

static inline int tflite_EqualOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_EqualOptions_identifier, &tflite_EqualOptions_verify_table);
}

static inline int tflite_EqualOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_EqualOptions_type_identifier, &tflite_EqualOptions_verify_table);
}

static inline int tflite_EqualOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_EqualOptions_verify_table);
}

static inline int tflite_EqualOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_EqualOptions_verify_table);
}

static int tflite_NotEqualOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    return flatcc_verify_ok;
}

static inline int tflite_NotEqualOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_NotEqualOptions_identifier, &tflite_NotEqualOptions_verify_table);
}

static inline int tflite_NotEqualOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_NotEqualOptions_type_identifier, &tflite_NotEqualOptions_verify_table);
}

static inline int tflite_NotEqualOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_NotEqualOptions_verify_table);
}

static inline int tflite_NotEqualOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_NotEqualOptions_verify_table);
}

static int tflite_ShapeOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 1, 1) /* out_type */)) return ret;
    return flatcc_verify_ok;
}

static inline int tflite_ShapeOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_ShapeOptions_identifier, &tflite_ShapeOptions_verify_table);
}

static inline int tflite_ShapeOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_ShapeOptions_type_identifier, &tflite_ShapeOptions_verify_table);
}

static inline int tflite_ShapeOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_ShapeOptions_verify_table);
}

static inline int tflite_ShapeOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_ShapeOptions_verify_table);
}

static int tflite_RankOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    return flatcc_verify_ok;
}

static inline int tflite_RankOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_RankOptions_identifier, &tflite_RankOptions_verify_table);
}

static inline int tflite_RankOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_RankOptions_type_identifier, &tflite_RankOptions_verify_table);
}

static inline int tflite_RankOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_RankOptions_verify_table);
}

static inline int tflite_RankOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_RankOptions_verify_table);
}

static int tflite_PowOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    return flatcc_verify_ok;
}

static inline int tflite_PowOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_PowOptions_identifier, &tflite_PowOptions_verify_table);
}

static inline int tflite_PowOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_PowOptions_type_identifier, &tflite_PowOptions_verify_table);
}

static inline int tflite_PowOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_PowOptions_verify_table);
}

static inline int tflite_PowOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_PowOptions_verify_table);
}

static int tflite_FakeQuantOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 4, 4) /* min */)) return ret;
    if ((ret = flatcc_verify_field(td, 1, 4, 4) /* max */)) return ret;
    if ((ret = flatcc_verify_field(td, 2, 4, 4) /* num_bits */)) return ret;
    if ((ret = flatcc_verify_field(td, 3, 1, 1) /* narrow_range */)) return ret;
    return flatcc_verify_ok;
}

static inline int tflite_FakeQuantOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_FakeQuantOptions_identifier, &tflite_FakeQuantOptions_verify_table);
}

static inline int tflite_FakeQuantOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_FakeQuantOptions_type_identifier, &tflite_FakeQuantOptions_verify_table);
}

static inline int tflite_FakeQuantOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_FakeQuantOptions_verify_table);
}

static inline int tflite_FakeQuantOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_FakeQuantOptions_verify_table);
}

static int tflite_PackOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 4, 4) /* values_count */)) return ret;
    if ((ret = flatcc_verify_field(td, 1, 4, 4) /* axis */)) return ret;
    return flatcc_verify_ok;
}

static inline int tflite_PackOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_PackOptions_identifier, &tflite_PackOptions_verify_table);
}

static inline int tflite_PackOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_PackOptions_type_identifier, &tflite_PackOptions_verify_table);
}

static inline int tflite_PackOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_PackOptions_verify_table);
}

static inline int tflite_PackOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_PackOptions_verify_table);
}

static int tflite_LogicalOrOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    return flatcc_verify_ok;
}

static inline int tflite_LogicalOrOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_LogicalOrOptions_identifier, &tflite_LogicalOrOptions_verify_table);
}

static inline int tflite_LogicalOrOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_LogicalOrOptions_type_identifier, &tflite_LogicalOrOptions_verify_table);
}

static inline int tflite_LogicalOrOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_LogicalOrOptions_verify_table);
}

static inline int tflite_LogicalOrOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_LogicalOrOptions_verify_table);
}

static int tflite_OneHotOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 4, 4) /* axis */)) return ret;
    return flatcc_verify_ok;
}

static inline int tflite_OneHotOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_OneHotOptions_identifier, &tflite_OneHotOptions_verify_table);
}

static inline int tflite_OneHotOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_OneHotOptions_type_identifier, &tflite_OneHotOptions_verify_table);
}

static inline int tflite_OneHotOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_OneHotOptions_verify_table);
}

static inline int tflite_OneHotOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_OneHotOptions_verify_table);
}

static int tflite_AbsOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    return flatcc_verify_ok;
}

static inline int tflite_AbsOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_AbsOptions_identifier, &tflite_AbsOptions_verify_table);
}

static inline int tflite_AbsOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_AbsOptions_type_identifier, &tflite_AbsOptions_verify_table);
}

static inline int tflite_AbsOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_AbsOptions_verify_table);
}

static inline int tflite_AbsOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_AbsOptions_verify_table);
}

static int tflite_HardSwishOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    return flatcc_verify_ok;
}

static inline int tflite_HardSwishOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_HardSwishOptions_identifier, &tflite_HardSwishOptions_verify_table);
}

static inline int tflite_HardSwishOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_HardSwishOptions_type_identifier, &tflite_HardSwishOptions_verify_table);
}

static inline int tflite_HardSwishOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_HardSwishOptions_verify_table);
}

static inline int tflite_HardSwishOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_HardSwishOptions_verify_table);
}

static int tflite_LogicalAndOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    return flatcc_verify_ok;
}

static inline int tflite_LogicalAndOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_LogicalAndOptions_identifier, &tflite_LogicalAndOptions_verify_table);
}

static inline int tflite_LogicalAndOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_LogicalAndOptions_type_identifier, &tflite_LogicalAndOptions_verify_table);
}

static inline int tflite_LogicalAndOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_LogicalAndOptions_verify_table);
}

static inline int tflite_LogicalAndOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_LogicalAndOptions_verify_table);
}

static int tflite_LogicalNotOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    return flatcc_verify_ok;
}

static inline int tflite_LogicalNotOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_LogicalNotOptions_identifier, &tflite_LogicalNotOptions_verify_table);
}

static inline int tflite_LogicalNotOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_LogicalNotOptions_type_identifier, &tflite_LogicalNotOptions_verify_table);
}

static inline int tflite_LogicalNotOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_LogicalNotOptions_verify_table);
}

static inline int tflite_LogicalNotOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_LogicalNotOptions_verify_table);
}

static int tflite_UnpackOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 4, 4) /* num */)) return ret;
    if ((ret = flatcc_verify_field(td, 1, 4, 4) /* axis */)) return ret;
    return flatcc_verify_ok;
}

static inline int tflite_UnpackOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_UnpackOptions_identifier, &tflite_UnpackOptions_verify_table);
}

static inline int tflite_UnpackOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_UnpackOptions_type_identifier, &tflite_UnpackOptions_verify_table);
}

static inline int tflite_UnpackOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_UnpackOptions_verify_table);
}

static inline int tflite_UnpackOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_UnpackOptions_verify_table);
}

static int tflite_FloorDivOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    return flatcc_verify_ok;
}

static inline int tflite_FloorDivOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_FloorDivOptions_identifier, &tflite_FloorDivOptions_verify_table);
}

static inline int tflite_FloorDivOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_FloorDivOptions_type_identifier, &tflite_FloorDivOptions_verify_table);
}

static inline int tflite_FloorDivOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_FloorDivOptions_verify_table);
}

static inline int tflite_FloorDivOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_FloorDivOptions_verify_table);
}

static int tflite_SquareOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    return flatcc_verify_ok;
}

static inline int tflite_SquareOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_SquareOptions_identifier, &tflite_SquareOptions_verify_table);
}

static inline int tflite_SquareOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_SquareOptions_type_identifier, &tflite_SquareOptions_verify_table);
}

static inline int tflite_SquareOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_SquareOptions_verify_table);
}

static inline int tflite_SquareOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_SquareOptions_verify_table);
}

static int tflite_ZerosLikeOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    return flatcc_verify_ok;
}

static inline int tflite_ZerosLikeOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_ZerosLikeOptions_identifier, &tflite_ZerosLikeOptions_verify_table);
}

static inline int tflite_ZerosLikeOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_ZerosLikeOptions_type_identifier, &tflite_ZerosLikeOptions_verify_table);
}

static inline int tflite_ZerosLikeOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_ZerosLikeOptions_verify_table);
}

static inline int tflite_ZerosLikeOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_ZerosLikeOptions_verify_table);
}

static int tflite_FillOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    return flatcc_verify_ok;
}

static inline int tflite_FillOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_FillOptions_identifier, &tflite_FillOptions_verify_table);
}

static inline int tflite_FillOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_FillOptions_type_identifier, &tflite_FillOptions_verify_table);
}

static inline int tflite_FillOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_FillOptions_verify_table);
}

static inline int tflite_FillOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_FillOptions_verify_table);
}

static int tflite_FloorModOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    return flatcc_verify_ok;
}

static inline int tflite_FloorModOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_FloorModOptions_identifier, &tflite_FloorModOptions_verify_table);
}

static inline int tflite_FloorModOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_FloorModOptions_type_identifier, &tflite_FloorModOptions_verify_table);
}

static inline int tflite_FloorModOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_FloorModOptions_verify_table);
}

static inline int tflite_FloorModOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_FloorModOptions_verify_table);
}

static int tflite_RangeOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    return flatcc_verify_ok;
}

static inline int tflite_RangeOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_RangeOptions_identifier, &tflite_RangeOptions_verify_table);
}

static inline int tflite_RangeOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_RangeOptions_type_identifier, &tflite_RangeOptions_verify_table);
}

static inline int tflite_RangeOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_RangeOptions_verify_table);
}

static inline int tflite_RangeOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_RangeOptions_verify_table);
}

static int tflite_LeakyReluOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 4, 4) /* alpha */)) return ret;
    return flatcc_verify_ok;
}

static inline int tflite_LeakyReluOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_LeakyReluOptions_identifier, &tflite_LeakyReluOptions_verify_table);
}

static inline int tflite_LeakyReluOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_LeakyReluOptions_type_identifier, &tflite_LeakyReluOptions_verify_table);
}

static inline int tflite_LeakyReluOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_LeakyReluOptions_verify_table);
}

static inline int tflite_LeakyReluOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_LeakyReluOptions_verify_table);
}

static int tflite_SquaredDifferenceOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    return flatcc_verify_ok;
}

static inline int tflite_SquaredDifferenceOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_SquaredDifferenceOptions_identifier, &tflite_SquaredDifferenceOptions_verify_table);
}

static inline int tflite_SquaredDifferenceOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_SquaredDifferenceOptions_type_identifier, &tflite_SquaredDifferenceOptions_verify_table);
}

static inline int tflite_SquaredDifferenceOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_SquaredDifferenceOptions_verify_table);
}

static inline int tflite_SquaredDifferenceOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_SquaredDifferenceOptions_verify_table);
}

static int tflite_MirrorPadOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 1, 1) /* mode */)) return ret;
    return flatcc_verify_ok;
}

static inline int tflite_MirrorPadOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_MirrorPadOptions_identifier, &tflite_MirrorPadOptions_verify_table);
}

static inline int tflite_MirrorPadOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_MirrorPadOptions_type_identifier, &tflite_MirrorPadOptions_verify_table);
}

static inline int tflite_MirrorPadOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_MirrorPadOptions_verify_table);
}

static inline int tflite_MirrorPadOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_MirrorPadOptions_verify_table);
}

static int tflite_UniqueOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 1, 1) /* idx_out_type */)) return ret;
    return flatcc_verify_ok;
}

static inline int tflite_UniqueOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_UniqueOptions_identifier, &tflite_UniqueOptions_verify_table);
}

static inline int tflite_UniqueOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_UniqueOptions_type_identifier, &tflite_UniqueOptions_verify_table);
}

static inline int tflite_UniqueOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_UniqueOptions_verify_table);
}

static inline int tflite_UniqueOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_UniqueOptions_verify_table);
}

static int tflite_ReverseV2Options_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    return flatcc_verify_ok;
}

static inline int tflite_ReverseV2Options_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_ReverseV2Options_identifier, &tflite_ReverseV2Options_verify_table);
}

static inline int tflite_ReverseV2Options_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_ReverseV2Options_type_identifier, &tflite_ReverseV2Options_verify_table);
}

static inline int tflite_ReverseV2Options_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_ReverseV2Options_verify_table);
}

static inline int tflite_ReverseV2Options_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_ReverseV2Options_verify_table);
}

static int tflite_AddNOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    return flatcc_verify_ok;
}

static inline int tflite_AddNOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_AddNOptions_identifier, &tflite_AddNOptions_verify_table);
}

static inline int tflite_AddNOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_AddNOptions_type_identifier, &tflite_AddNOptions_verify_table);
}

static inline int tflite_AddNOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_AddNOptions_verify_table);
}

static inline int tflite_AddNOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_AddNOptions_verify_table);
}

static int tflite_GatherNdOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    return flatcc_verify_ok;
}

static inline int tflite_GatherNdOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_GatherNdOptions_identifier, &tflite_GatherNdOptions_verify_table);
}

static inline int tflite_GatherNdOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_GatherNdOptions_type_identifier, &tflite_GatherNdOptions_verify_table);
}

static inline int tflite_GatherNdOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_GatherNdOptions_verify_table);
}

static inline int tflite_GatherNdOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_GatherNdOptions_verify_table);
}

static int tflite_WhereOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    return flatcc_verify_ok;
}

static inline int tflite_WhereOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_WhereOptions_identifier, &tflite_WhereOptions_verify_table);
}

static inline int tflite_WhereOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_WhereOptions_type_identifier, &tflite_WhereOptions_verify_table);
}

static inline int tflite_WhereOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_WhereOptions_verify_table);
}

static inline int tflite_WhereOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_WhereOptions_verify_table);
}

static int tflite_ReverseSequenceOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 4, 4) /* seq_dim */)) return ret;
    if ((ret = flatcc_verify_field(td, 1, 4, 4) /* batch_dim */)) return ret;
    return flatcc_verify_ok;
}

static inline int tflite_ReverseSequenceOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_ReverseSequenceOptions_identifier, &tflite_ReverseSequenceOptions_verify_table);
}

static inline int tflite_ReverseSequenceOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_ReverseSequenceOptions_type_identifier, &tflite_ReverseSequenceOptions_verify_table);
}

static inline int tflite_ReverseSequenceOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_ReverseSequenceOptions_verify_table);
}

static inline int tflite_ReverseSequenceOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_ReverseSequenceOptions_verify_table);
}

static int tflite_MatrixDiagOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    return flatcc_verify_ok;
}

static inline int tflite_MatrixDiagOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_MatrixDiagOptions_identifier, &tflite_MatrixDiagOptions_verify_table);
}

static inline int tflite_MatrixDiagOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_MatrixDiagOptions_type_identifier, &tflite_MatrixDiagOptions_verify_table);
}

static inline int tflite_MatrixDiagOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_MatrixDiagOptions_verify_table);
}

static inline int tflite_MatrixDiagOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_MatrixDiagOptions_verify_table);
}

static int tflite_QuantizeOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    return flatcc_verify_ok;
}

static inline int tflite_QuantizeOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_QuantizeOptions_identifier, &tflite_QuantizeOptions_verify_table);
}

static inline int tflite_QuantizeOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_QuantizeOptions_type_identifier, &tflite_QuantizeOptions_verify_table);
}

static inline int tflite_QuantizeOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_QuantizeOptions_verify_table);
}

static inline int tflite_QuantizeOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_QuantizeOptions_verify_table);
}

static int tflite_MatrixSetDiagOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    return flatcc_verify_ok;
}

static inline int tflite_MatrixSetDiagOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_MatrixSetDiagOptions_identifier, &tflite_MatrixSetDiagOptions_verify_table);
}

static inline int tflite_MatrixSetDiagOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_MatrixSetDiagOptions_type_identifier, &tflite_MatrixSetDiagOptions_verify_table);
}

static inline int tflite_MatrixSetDiagOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_MatrixSetDiagOptions_verify_table);
}

static inline int tflite_MatrixSetDiagOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_MatrixSetDiagOptions_verify_table);
}

static int tflite_IfOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 4, 4) /* then_subgraph_index */)) return ret;
    if ((ret = flatcc_verify_field(td, 1, 4, 4) /* else_subgraph_index */)) return ret;
    return flatcc_verify_ok;
}

static inline int tflite_IfOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_IfOptions_identifier, &tflite_IfOptions_verify_table);
}

static inline int tflite_IfOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_IfOptions_type_identifier, &tflite_IfOptions_verify_table);
}

static inline int tflite_IfOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_IfOptions_verify_table);
}

static inline int tflite_IfOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_IfOptions_verify_table);
}

static int tflite_WhileOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 4, 4) /* cond_subgraph_index */)) return ret;
    if ((ret = flatcc_verify_field(td, 1, 4, 4) /* body_subgraph_index */)) return ret;
    return flatcc_verify_ok;
}

static inline int tflite_WhileOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_WhileOptions_identifier, &tflite_WhileOptions_verify_table);
}

static inline int tflite_WhileOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_WhileOptions_type_identifier, &tflite_WhileOptions_verify_table);
}

static inline int tflite_WhileOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_WhileOptions_verify_table);
}

static inline int tflite_WhileOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_WhileOptions_verify_table);
}

static int tflite_NonMaxSuppressionV4Options_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    return flatcc_verify_ok;
}

static inline int tflite_NonMaxSuppressionV4Options_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_NonMaxSuppressionV4Options_identifier, &tflite_NonMaxSuppressionV4Options_verify_table);
}

static inline int tflite_NonMaxSuppressionV4Options_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_NonMaxSuppressionV4Options_type_identifier, &tflite_NonMaxSuppressionV4Options_verify_table);
}

static inline int tflite_NonMaxSuppressionV4Options_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_NonMaxSuppressionV4Options_verify_table);
}

static inline int tflite_NonMaxSuppressionV4Options_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_NonMaxSuppressionV4Options_verify_table);
}

static int tflite_NonMaxSuppressionV5Options_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    return flatcc_verify_ok;
}

static inline int tflite_NonMaxSuppressionV5Options_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_NonMaxSuppressionV5Options_identifier, &tflite_NonMaxSuppressionV5Options_verify_table);
}

static inline int tflite_NonMaxSuppressionV5Options_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_NonMaxSuppressionV5Options_type_identifier, &tflite_NonMaxSuppressionV5Options_verify_table);
}

static inline int tflite_NonMaxSuppressionV5Options_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_NonMaxSuppressionV5Options_verify_table);
}

static inline int tflite_NonMaxSuppressionV5Options_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_NonMaxSuppressionV5Options_verify_table);
}

static int tflite_ScatterNdOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    return flatcc_verify_ok;
}

static inline int tflite_ScatterNdOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_ScatterNdOptions_identifier, &tflite_ScatterNdOptions_verify_table);
}

static inline int tflite_ScatterNdOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_ScatterNdOptions_type_identifier, &tflite_ScatterNdOptions_verify_table);
}

static inline int tflite_ScatterNdOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_ScatterNdOptions_verify_table);
}

static inline int tflite_ScatterNdOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_ScatterNdOptions_verify_table);
}

static int tflite_SelectV2Options_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    return flatcc_verify_ok;
}

static inline int tflite_SelectV2Options_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_SelectV2Options_identifier, &tflite_SelectV2Options_verify_table);
}

static inline int tflite_SelectV2Options_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_SelectV2Options_type_identifier, &tflite_SelectV2Options_verify_table);
}

static inline int tflite_SelectV2Options_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_SelectV2Options_verify_table);
}

static inline int tflite_SelectV2Options_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_SelectV2Options_verify_table);
}

static int tflite_DensifyOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    return flatcc_verify_ok;
}

static inline int tflite_DensifyOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_DensifyOptions_identifier, &tflite_DensifyOptions_verify_table);
}

static inline int tflite_DensifyOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_DensifyOptions_type_identifier, &tflite_DensifyOptions_verify_table);
}

static inline int tflite_DensifyOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_DensifyOptions_verify_table);
}

static inline int tflite_DensifyOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_DensifyOptions_verify_table);
}

static int tflite_SegmentSumOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    return flatcc_verify_ok;
}

static inline int tflite_SegmentSumOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_SegmentSumOptions_identifier, &tflite_SegmentSumOptions_verify_table);
}

static inline int tflite_SegmentSumOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_SegmentSumOptions_type_identifier, &tflite_SegmentSumOptions_verify_table);
}

static inline int tflite_SegmentSumOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_SegmentSumOptions_verify_table);
}

static inline int tflite_SegmentSumOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_SegmentSumOptions_verify_table);
}

static int tflite_OperatorCode_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 1, 1) /* builtin_code */)) return ret;
    if ((ret = flatcc_verify_string_field(td, 1, 0) /* custom_code */)) return ret;
    if ((ret = flatcc_verify_field(td, 2, 4, 4) /* version */)) return ret;
    return flatcc_verify_ok;
}

static inline int tflite_OperatorCode_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_OperatorCode_identifier, &tflite_OperatorCode_verify_table);
}

static inline int tflite_OperatorCode_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_OperatorCode_type_identifier, &tflite_OperatorCode_verify_table);
}

static inline int tflite_OperatorCode_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_OperatorCode_verify_table);
}

static inline int tflite_OperatorCode_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_OperatorCode_verify_table);
}

static int tflite_Operator_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 4, 4) /* opcode_index */)) return ret;
    if ((ret = flatcc_verify_vector_field(td, 1, 0, 4, 4, INT64_C(1073741823)) /* inputs */)) return ret;
    if ((ret = flatcc_verify_vector_field(td, 2, 0, 4, 4, INT64_C(1073741823)) /* outputs */)) return ret;
    if ((ret = flatcc_verify_union_field(td, 4, 0, &tflite_BuiltinOptions_union_verifier) /* builtin_options */)) return ret;
    if ((ret = flatcc_verify_vector_field(td, 5, 0, 1, 1, INT64_C(4294967295)) /* custom_options */)) return ret;
    if ((ret = flatcc_verify_field(td, 6, 1, 1) /* custom_options_format */)) return ret;
    if ((ret = flatcc_verify_vector_field(td, 7, 0, 1, 1, INT64_C(4294967295)) /* mutating_variable_inputs */)) return ret;
    if ((ret = flatcc_verify_vector_field(td, 8, 0, 4, 4, INT64_C(1073741823)) /* intermediates */)) return ret;
    return flatcc_verify_ok;
}

static inline int tflite_Operator_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_Operator_identifier, &tflite_Operator_verify_table);
}

static inline int tflite_Operator_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_Operator_type_identifier, &tflite_Operator_verify_table);
}

static inline int tflite_Operator_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_Operator_verify_table);
}

static inline int tflite_Operator_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_Operator_verify_table);
}

static int tflite_SubGraph_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_table_vector_field(td, 0, 0, &tflite_Tensor_verify_table) /* tensors */)) return ret;
    if ((ret = flatcc_verify_vector_field(td, 1, 0, 4, 4, INT64_C(1073741823)) /* inputs */)) return ret;
    if ((ret = flatcc_verify_vector_field(td, 2, 0, 4, 4, INT64_C(1073741823)) /* outputs */)) return ret;
    if ((ret = flatcc_verify_table_vector_field(td, 3, 0, &tflite_Operator_verify_table) /* operators */)) return ret;
    if ((ret = flatcc_verify_string_field(td, 4, 0) /* name */)) return ret;
    return flatcc_verify_ok;
}

static inline int tflite_SubGraph_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_SubGraph_identifier, &tflite_SubGraph_verify_table);
}

static inline int tflite_SubGraph_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_SubGraph_type_identifier, &tflite_SubGraph_verify_table);
}

static inline int tflite_SubGraph_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_SubGraph_verify_table);
}

static inline int tflite_SubGraph_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_SubGraph_verify_table);
}

static int tflite_Buffer_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_vector_field(td, 0, 0, 1, 1, INT64_C(4294967295)) /* data */)) return ret;
    return flatcc_verify_ok;
}

static inline int tflite_Buffer_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_Buffer_identifier, &tflite_Buffer_verify_table);
}

static inline int tflite_Buffer_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_Buffer_type_identifier, &tflite_Buffer_verify_table);
}

static inline int tflite_Buffer_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_Buffer_verify_table);
}

static inline int tflite_Buffer_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_Buffer_verify_table);
}

static int tflite_Metadata_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_string_field(td, 0, 0) /* name */)) return ret;
    if ((ret = flatcc_verify_field(td, 1, 4, 4) /* buffer */)) return ret;
    return flatcc_verify_ok;
}

static inline int tflite_Metadata_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_Metadata_identifier, &tflite_Metadata_verify_table);
}

static inline int tflite_Metadata_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_Metadata_type_identifier, &tflite_Metadata_verify_table);
}

static inline int tflite_Metadata_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_Metadata_verify_table);
}

static inline int tflite_Metadata_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_Metadata_verify_table);
}

static int tflite_Model_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 4, 4) /* version */)) return ret;
    if ((ret = flatcc_verify_table_vector_field(td, 1, 0, &tflite_OperatorCode_verify_table) /* operator_codes */)) return ret;
    if ((ret = flatcc_verify_table_vector_field(td, 2, 0, &tflite_SubGraph_verify_table) /* subgraphs */)) return ret;
    if ((ret = flatcc_verify_string_field(td, 3, 0) /* description */)) return ret;
    if ((ret = flatcc_verify_table_vector_field(td, 4, 0, &tflite_Buffer_verify_table) /* buffers */)) return ret;
    if ((ret = flatcc_verify_vector_field(td, 5, 0, 4, 4, INT64_C(1073741823)) /* metadata_buffer */)) return ret;
    if ((ret = flatcc_verify_table_vector_field(td, 6, 0, &tflite_Metadata_verify_table) /* metadata */)) return ret;
    return flatcc_verify_ok;
}

static inline int tflite_Model_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_Model_identifier, &tflite_Model_verify_table);
}

static inline int tflite_Model_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_Model_type_identifier, &tflite_Model_verify_table);
}

static inline int tflite_Model_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_Model_verify_table);
}

static inline int tflite_Model_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_Model_verify_table);
}

#include "flatcc/flatcc_epilogue.h"
#endif /* SCHEMA_NO_FORCE_ALIGN_VERIFIER_H */
