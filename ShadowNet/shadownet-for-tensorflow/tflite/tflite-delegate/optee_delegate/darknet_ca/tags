!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ACTIVATION	include/darknet.h	/^} ACTIVATION;$/;"	t	typeref:enum:__anon6
ACTIVATIONS_H	activations.h	2;"	d
ACTIVATION_LAYER_H	activation_layer.h	2;"	d
ACTIVE	include/darknet.h	/^    ACTIVE,$/;"	e	enum:__anon9
ADD	include/darknet.h	/^    MULT, ADD, SUB, DIV$/;"	e	enum:__anon8
ADD_MASK	include/darknet.h	/^    ADD_MASK,$/;"	e	enum:__anon9
ADD_MASK_LAYER_H	add_mask_layer.h	2;"	d
AVGPOOL	include/darknet.h	/^    AVGPOOL,$/;"	e	enum:__anon9
AVGPOOL_LAYER_H	avgpool_layer.h	2;"	d
B1	include/darknet.h	/^    float B1;$/;"	m	struct:__anon11
B1	include/darknet.h	/^    float B1;$/;"	m	struct:network
B2	include/darknet.h	/^    float B2;$/;"	m	struct:__anon11
B2	include/darknet.h	/^    float B2;$/;"	m	struct:network
BATCHNORM	include/darknet.h	/^    BATCHNORM,$/;"	e	enum:__anon9
BATCHNORM_LAYER_H	batchnorm_layer.h	2;"	d
BINARY_ACTIVATION	include/darknet.h	/^} BINARY_ACTIVATION;$/;"	t	typeref:enum:__anon8
BLANK	include/darknet.h	/^    BLANK$/;"	e	enum:__anon9
BLAS_H	blas.h	2;"	d
BLOCK	include/darknet.h	9;"	d
BMP	include/darknet.h	/^    PNG, BMP, TGA, JPG$/;"	e	enum:__anon7
CAPTCHA_DATA	include/darknet.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA, LETTERBOX_DATA, REGRESSION_DATA, SEGMENTATION_DATA, INSTANCE_DATA, ISEG_DATA$/;"	e	enum:__anon17
CLASSIFICATION_DATA	include/darknet.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA, LETTERBOX_DATA, REGRESSION_DATA, SEGMENTATION_DATA, INSTANCE_DATA, ISEG_DATA$/;"	e	enum:__anon17
COMPARE_DATA	include/darknet.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA, LETTERBOX_DATA, REGRESSION_DATA, SEGMENTATION_DATA, INSTANCE_DATA, ISEG_DATA$/;"	e	enum:__anon17
CONNECTED	include/darknet.h	/^    CONNECTED,$/;"	e	enum:__anon9
CONSTANT	include/darknet.h	/^    CONSTANT, STEP, EXP, POLY, STEPS, SIG, RANDOM$/;"	e	enum:__anon12
CONVOLUTIONAL	include/darknet.h	/^    CONVOLUTIONAL,$/;"	e	enum:__anon9
COST	include/darknet.h	/^    COST,$/;"	e	enum:__anon9
COST_TYPE	include/darknet.h	/^} COST_TYPE;$/;"	t	typeref:enum:__anon10
CRNN	include/darknet.h	/^    CRNN,$/;"	e	enum:__anon9
CROP	include/darknet.h	/^    CROP,$/;"	e	enum:__anon9
DARKNET_API	include/darknet.h	2;"	d
DECONVOLUTIONAL	include/darknet.h	/^    DECONVOLUTIONAL,$/;"	e	enum:__anon9
DETECTION	include/darknet.h	/^    DETECTION,$/;"	e	enum:__anon9
DETECTION_DATA	include/darknet.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA, LETTERBOX_DATA, REGRESSION_DATA, SEGMENTATION_DATA, INSTANCE_DATA, ISEG_DATA$/;"	e	enum:__anon17
DET_DATA	include/darknet.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA, LETTERBOX_DATA, REGRESSION_DATA, SEGMENTATION_DATA, INSTANCE_DATA, ISEG_DATA$/;"	e	enum:__anon17
DIV	include/darknet.h	/^    MULT, ADD, SUB, DIV$/;"	e	enum:__anon8
DROPOUT	include/darknet.h	/^    DROPOUT,$/;"	e	enum:__anon9
DROPOUT_LAYER_H	dropout_layer.h	2;"	d
DUMPW4	utils.h	35;"	d
DUMPW4	utils.h	45;"	d
DUMPW4F	utils.h	12;"	d
DUMPW4F	utils.h	42;"	d
DUMPW4I	utils.h	18;"	d
DUMPW4I	utils.h	43;"	d
DUMPW8	utils.h	25;"	d
DUMPW8	utils.h	44;"	d
ELU	include/darknet.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN, SELU,NOACT, RELU6$/;"	e	enum:__anon6
EXP	include/darknet.h	/^    CONSTANT, STEP, EXP, POLY, STEPS, SIG, RANDOM$/;"	e	enum:__anon12
GRU	include/darknet.h	/^    GRU,$/;"	e	enum:__anon9
HARDTAN	include/darknet.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN, SELU,NOACT, RELU6$/;"	e	enum:__anon6
IMAGE_DATA	include/darknet.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA, LETTERBOX_DATA, REGRESSION_DATA, SEGMENTATION_DATA, INSTANCE_DATA, ISEG_DATA$/;"	e	enum:__anon17
IMTYPE	include/darknet.h	/^} IMTYPE;$/;"	t	typeref:enum:__anon7
INSTANCE_DATA	include/darknet.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA, LETTERBOX_DATA, REGRESSION_DATA, SEGMENTATION_DATA, INSTANCE_DATA, ISEG_DATA$/;"	e	enum:__anon17
ISEG	include/darknet.h	/^    ISEG,$/;"	e	enum:__anon9
ISEG_DATA	include/darknet.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA, LETTERBOX_DATA, REGRESSION_DATA, SEGMENTATION_DATA, INSTANCE_DATA, ISEG_DATA$/;"	e	enum:__anon17
JPG	include/darknet.h	/^    PNG, BMP, TGA, JPG$/;"	e	enum:__anon7
L1	include/darknet.h	/^    SSE, MASKED, L1, SEG, SMOOTH,WGAN$/;"	e	enum:__anon10
L2NORM	include/darknet.h	/^    L2NORM,$/;"	e	enum:__anon9
LAYER_TYPE	include/darknet.h	/^} LAYER_TYPE;$/;"	t	typeref:enum:__anon9
LEAKY	include/darknet.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN, SELU,NOACT, RELU6$/;"	e	enum:__anon6
LETTERBOX_DATA	include/darknet.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA, LETTERBOX_DATA, REGRESSION_DATA, SEGMENTATION_DATA, INSTANCE_DATA, ISEG_DATA$/;"	e	enum:__anon17
LHTAN	include/darknet.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN, SELU,NOACT, RELU6$/;"	e	enum:__anon6
LINEAR	include/darknet.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN, SELU,NOACT, RELU6$/;"	e	enum:__anon6
LINEAR_TRANSFORM	include/darknet.h	/^    LINEAR_TRANSFORM,$/;"	e	enum:__anon9
LINEAR_TRANSFORM_LAYER_H	linear_transform_layer.h	2;"	d
LIST_H	list.h	2;"	d
LOCAL	include/darknet.h	/^    LOCAL,$/;"	e	enum:__anon9
LOGGY	include/darknet.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN, SELU,NOACT, RELU6$/;"	e	enum:__anon6
LOGISTIC	include/darknet.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN, SELU,NOACT, RELU6$/;"	e	enum:__anon6
LOGXENT	include/darknet.h	/^    LOGXENT,$/;"	e	enum:__anon9
LSTM	include/darknet.h	/^    LSTM,$/;"	e	enum:__anon9
MASKED	include/darknet.h	/^    SSE, MASKED, L1, SEG, SMOOTH,WGAN$/;"	e	enum:__anon10
MAXPOOL	include/darknet.h	/^    MAXPOOL,$/;"	e	enum:__anon9
MULT	include/darknet.h	/^    MULT, ADD, SUB, DIV$/;"	e	enum:__anon8
NETWORK	include/darknet.h	/^    NETWORK,$/;"	e	enum:__anon9
NETWORK_H	network.h	3;"	d
NOACT	include/darknet.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN, SELU,NOACT, RELU6$/;"	e	enum:__anon6
NORMALIZATION	include/darknet.h	/^    NORMALIZATION,$/;"	e	enum:__anon9
OLD_CLASSIFICATION_DATA	include/darknet.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA, LETTERBOX_DATA, REGRESSION_DATA, SEGMENTATION_DATA, INSTANCE_DATA, ISEG_DATA$/;"	e	enum:__anon17
OPTION_LIST_H	option_list.h	2;"	d
PARSER_H	parser.h	2;"	d
PLSE	include/darknet.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN, SELU,NOACT, RELU6$/;"	e	enum:__anon6
PNG	include/darknet.h	/^    PNG, BMP, TGA, JPG$/;"	e	enum:__anon7
POLY	include/darknet.h	/^    CONSTANT, STEP, EXP, POLY, STEPS, SIG, RANDOM$/;"	e	enum:__anon12
RAMP	include/darknet.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN, SELU,NOACT, RELU6$/;"	e	enum:__anon6
RANDOM	include/darknet.h	/^    CONSTANT, STEP, EXP, POLY, STEPS, SIG, RANDOM$/;"	e	enum:__anon12
REGION	include/darknet.h	/^    REGION,$/;"	e	enum:__anon9
REGION_DATA	include/darknet.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA, LETTERBOX_DATA, REGRESSION_DATA, SEGMENTATION_DATA, INSTANCE_DATA, ISEG_DATA$/;"	e	enum:__anon17
REGRESSION_DATA	include/darknet.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA, LETTERBOX_DATA, REGRESSION_DATA, SEGMENTATION_DATA, INSTANCE_DATA, ISEG_DATA$/;"	e	enum:__anon17
RELIE	include/darknet.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN, SELU,NOACT, RELU6$/;"	e	enum:__anon6
RELU	include/darknet.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN, SELU,NOACT, RELU6$/;"	e	enum:__anon6
RELU6	include/darknet.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN, SELU,NOACT, RELU6$/;"	e	enum:__anon6
REORG	include/darknet.h	/^    REORG,$/;"	e	enum:__anon9
RNN	include/darknet.h	/^    RNN,$/;"	e	enum:__anon9
ROUTE	include/darknet.h	/^    ROUTE,$/;"	e	enum:__anon9
SECRET_NUM	include/darknet.h	24;"	d
SEG	include/darknet.h	/^    SSE, MASKED, L1, SEG, SMOOTH,WGAN$/;"	e	enum:__anon10
SEGMENTATION_DATA	include/darknet.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA, LETTERBOX_DATA, REGRESSION_DATA, SEGMENTATION_DATA, INSTANCE_DATA, ISEG_DATA$/;"	e	enum:__anon17
SELU	include/darknet.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN, SELU,NOACT, RELU6$/;"	e	enum:__anon6
SHORTCUT	include/darknet.h	/^    SHORTCUT,$/;"	e	enum:__anon9
SHUFFLE_CHANNEL	include/darknet.h	/^    SHUFFLE_CHANNEL,$/;"	e	enum:__anon9
SHUFFLE_CHANNEL_LAYER_H	shuffle_channel_layer.h	2;"	d
SIG	include/darknet.h	/^    CONSTANT, STEP, EXP, POLY, STEPS, SIG, RANDOM$/;"	e	enum:__anon12
SMOOTH	include/darknet.h	/^    SSE, MASKED, L1, SEG, SMOOTH,WGAN$/;"	e	enum:__anon10
SOFTMAX	include/darknet.h	/^    SOFTMAX,$/;"	e	enum:__anon9
SOFTMAX_LAYER_H	softmax_layer.h	2;"	d
SSE	include/darknet.h	/^    SSE, MASKED, L1, SEG, SMOOTH,WGAN$/;"	e	enum:__anon10
STAIR	include/darknet.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN, SELU,NOACT, RELU6$/;"	e	enum:__anon6
STEP	include/darknet.h	/^    CONSTANT, STEP, EXP, POLY, STEPS, SIG, RANDOM$/;"	e	enum:__anon12
STEPS	include/darknet.h	/^    CONSTANT, STEP, EXP, POLY, STEPS, SIG, RANDOM$/;"	e	enum:__anon12
STUDY_DATA	include/darknet.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA, LETTERBOX_DATA, REGRESSION_DATA, SEGMENTATION_DATA, INSTANCE_DATA, ISEG_DATA$/;"	e	enum:__anon17
SUB	include/darknet.h	/^    MULT, ADD, SUB, DIV$/;"	e	enum:__anon8
SUPER_DATA	include/darknet.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA, LETTERBOX_DATA, REGRESSION_DATA, SEGMENTATION_DATA, INSTANCE_DATA, ISEG_DATA$/;"	e	enum:__anon17
SWAG_DATA	include/darknet.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA, LETTERBOX_DATA, REGRESSION_DATA, SEGMENTATION_DATA, INSTANCE_DATA, ISEG_DATA$/;"	e	enum:__anon17
TAG_DATA	include/darknet.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA, LETTERBOX_DATA, REGRESSION_DATA, SEGMENTATION_DATA, INSTANCE_DATA, ISEG_DATA$/;"	e	enum:__anon17
TANH	include/darknet.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN, SELU,NOACT, RELU6$/;"	e	enum:__anon6
TGA	include/darknet.h	/^    PNG, BMP, TGA, JPG$/;"	e	enum:__anon7
TIME	utils.h	49;"	d
TWO_PI	utils.h	56;"	d
UPSAMPLE	include/darknet.h	/^    UPSAMPLE,$/;"	e	enum:__anon9
UTILS_H	utils.h	2;"	d
WGAN	include/darknet.h	/^    SSE, MASKED, L1, SEG, SMOOTH,WGAN$/;"	e	enum:__anon10
WRITING_DATA	include/darknet.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA, LETTERBOX_DATA, REGRESSION_DATA, SEGMENTATION_DATA, INSTANCE_DATA, ISEG_DATA$/;"	e	enum:__anon17
X	include/darknet.h	/^    matrix X;$/;"	m	struct:__anon16
XNOR	include/darknet.h	/^    XNOR,$/;"	e	enum:__anon9
YOLO	include/darknet.h	/^    YOLO,$/;"	e	enum:__anon9
absolute	include/darknet.h	/^    int absolute;$/;"	m	struct:layer
activate	activations.c	/^float activate(float x, ACTIVATION a)$/;"	f
activate_array	activations.c	/^void activate_array(float *x, const int n, const ACTIVATION a)$/;"	f
activation	include/darknet.h	/^    ACTIVATION activation;$/;"	m	struct:layer
adam	include/darknet.h	/^    int adam;$/;"	m	struct:__anon11
adam	include/darknet.h	/^    int adam;$/;"	m	struct:network
alpha	include/darknet.h	/^    float alpha;$/;"	m	struct:layer
alphanum_to_int	utils.c	/^int alphanum_to_int(char c)$/;"	f
angle	include/darknet.h	/^    float angle;$/;"	m	struct:layer
angle	include/darknet.h	/^    float angle;$/;"	m	struct:load_args
angle	include/darknet.h	/^    float angle;$/;"	m	struct:network
aspect	include/darknet.h	/^    float aspect;$/;"	m	struct:__anon13
aspect	include/darknet.h	/^    float aspect;$/;"	m	struct:load_args
aspect	include/darknet.h	/^    float aspect;$/;"	m	struct:network
augment_args	include/darknet.h	/^} augment_args;$/;"	t	typeref:struct:__anon13
avgpool_layer	avgpool_layer.h	/^typedef layer avgpool_layer;$/;"	t
axpy_cpu	blas.c	/^void axpy_cpu(int N, float ALPHA, float *X, int INCX, float *Y, int INCY)$/;"	f
back	include/darknet.h	/^    node *back;$/;"	m	struct:list
background	include/darknet.h	/^    int background;$/;"	m	struct:layer
background	include/darknet.h	/^    int background;$/;"	m	struct:load_args
backward	include/darknet.h	/^    void (*backward)  (struct layer, struct network);$/;"	m	struct:layer
backward_activation_layer	activation_layer.c	/^void backward_activation_layer(layer l, network net)$/;"	f
backward_activation_layer_gpu	activation_layer.c	/^void backward_activation_layer_gpu(layer l, network net)$/;"	f
backward_avgpool_layer	avgpool_layer.c	/^void backward_avgpool_layer(const avgpool_layer l, network net)$/;"	f
backward_batchnorm_layer	batchnorm_layer.c	/^void backward_batchnorm_layer(layer l, network net)$/;"	f
backward_batchnorm_layer_gpu	batchnorm_layer.c	/^void backward_batchnorm_layer_gpu(layer l, network net)$/;"	f
backward_dropout_layer	dropout_layer.c	/^void backward_dropout_layer(dropout_layer l, network net)$/;"	f
backward_gpu	include/darknet.h	/^    void (*backward_gpu)  (struct layer, struct network);$/;"	m	struct:layer
backward_network	network.c	/^void backward_network(network *netp)$/;"	f
backward_network_gpu	network.c	/^void backward_network_gpu(network *netp)$/;"	f
backward_scale_cpu	batchnorm_layer.c	/^void backward_scale_cpu(float *x_norm, float *delta, int batch, int n, int size, float *scale_updates)$/;"	f
backward_softmax_layer	softmax_layer.c	/^void backward_softmax_layer(const softmax_layer l, network net)$/;"	f
backward_softmax_layer_gpu	softmax_layer.c	/^void backward_softmax_layer_gpu(const softmax_layer layer, network net)$/;"	f
basecfg	utils.c	/^char *basecfg(char *cfgfile)$/;"	f
batch	include/darknet.h	/^    int batch;$/;"	m	struct:__anon11
batch	include/darknet.h	/^    int batch;$/;"	m	struct:layer
batch	include/darknet.h	/^    int batch;$/;"	m	struct:network
batch	parser.c	/^    int batch;$/;"	m	struct:size_params	file:
batch_normalize	include/darknet.h	/^    int batch_normalize;$/;"	m	struct:layer
bbox	include/darknet.h	/^    box bbox;$/;"	m	struct:detection
bd_algo	include/darknet.h	/^    cudnnConvolutionBwdDataAlgo_t bd_algo;$/;"	m	struct:layer
beta	include/darknet.h	/^    float beta;$/;"	m	struct:layer
bf_algo	include/darknet.h	/^    cudnnConvolutionBwdFilterAlgo_t bf_algo;$/;"	m	struct:layer
bias_change_gpu	include/darknet.h	/^    float * bias_change_gpu;$/;"	m	struct:layer
bias_m	include/darknet.h	/^    float * bias_m;$/;"	m	struct:layer
bias_m_gpu	include/darknet.h	/^    float *bias_m_gpu;$/;"	m	struct:layer
bias_match	include/darknet.h	/^    int bias_match;$/;"	m	struct:layer
bias_updates	include/darknet.h	/^    float * bias_updates;$/;"	m	struct:layer
bias_updates_gpu	include/darknet.h	/^    float * bias_updates_gpu;$/;"	m	struct:layer
bias_v	include/darknet.h	/^    float * bias_v;$/;"	m	struct:layer
bias_v_gpu	include/darknet.h	/^    float *bias_v_gpu;$/;"	m	struct:layer
biases	include/darknet.h	/^    float * biases;$/;"	m	struct:layer
biases_gpu	include/darknet.h	/^    float * biases_gpu;$/;"	m	struct:layer
binary	include/darknet.h	/^    int binary;$/;"	m	struct:layer
binary_input	include/darknet.h	/^    float * binary_input;$/;"	m	struct:layer
binary_input_gpu	include/darknet.h	/^    float * binary_input_gpu;$/;"	m	struct:layer
binary_weights	include/darknet.h	/^    float * binary_weights;$/;"	m	struct:layer
binary_weights_gpu	include/darknet.h	/^    float * binary_weights_gpu;$/;"	m	struct:layer
bn_bias	include/darknet.h	/^    int bn_bias;$/;"	m	struct:layer
bottom	include/darknet.h	/^    float left, right, top, bottom;$/;"	m	struct:__anon18
box	include/darknet.h	/^} box;$/;"	t	typeref:struct:__anon15
box_label	include/darknet.h	/^} box_label;$/;"	t	typeref:struct:__anon18
boxes	include/darknet.h	/^    box **boxes;$/;"	m	struct:__anon16
burn_in	include/darknet.h	/^    int burn_in;$/;"	m	struct:network
c	include/darknet.h	/^    int c;$/;"	m	struct:__anon14
c	include/darknet.h	/^    int h, w, c;$/;"	m	struct:network
c	include/darknet.h	/^    int h,w,c;$/;"	m	struct:layer
c	parser.c	/^    int c;$/;"	m	struct:size_params	file:
c_cpu	include/darknet.h	/^    float *c_cpu;$/;"	m	struct:layer
c_gpu	include/darknet.h	/^    float *c_gpu;$/;"	m	struct:layer
calc_network_cost	network.c	/^void calc_network_cost(network *netp)$/;"	f
cell_cpu	include/darknet.h	/^    float *cell_cpu;$/;"	m	struct:layer
cell_gpu	include/darknet.h	/^    float *cell_gpu;$/;"	m	struct:layer
center	include/darknet.h	/^    int center;$/;"	m	struct:load_args
center	include/darknet.h	/^    int center;$/;"	m	struct:network
child	include/darknet.h	/^    int *child;$/;"	m	struct:__anon5
class_scale	include/darknet.h	/^    float class_scale;$/;"	m	struct:layer
classes	include/darknet.h	/^    int classes;$/;"	m	struct:__anon4
classes	include/darknet.h	/^    int classes;$/;"	m	struct:detection
classes	include/darknet.h	/^    int classes;$/;"	m	struct:layer
classes	include/darknet.h	/^    int classes;$/;"	m	struct:load_args
classfix	include/darknet.h	/^    int classfix;$/;"	m	struct:layer
clip	include/darknet.h	/^    float clip;$/;"	m	struct:layer
clip	include/darknet.h	/^    float clip;$/;"	m	struct:network
cols	include/darknet.h	/^    int rows, cols;$/;"	m	struct:matrix
combine_cpu	include/darknet.h	/^    float * combine_cpu;$/;"	m	struct:layer
combine_delta_cpu	include/darknet.h	/^    float * combine_delta_cpu;$/;"	m	struct:layer
combine_delta_gpu	include/darknet.h	/^    float * combine_delta_gpu;$/;"	m	struct:layer
combine_gpu	include/darknet.h	/^    float * combine_gpu;$/;"	m	struct:layer
compare_networks	network.c	/^void compare_networks(network *n1, network *n2, data test)$/;"	f
concat	include/darknet.h	/^    float * concat;$/;"	m	struct:layer
concat_delta	include/darknet.h	/^    float * concat_delta;$/;"	m	struct:layer
concat_delta_gpu	include/darknet.h	/^    float * concat_delta_gpu;$/;"	m	struct:layer
concat_gpu	include/darknet.h	/^    float * concat_gpu;$/;"	m	struct:layer
const_cpu	blas.c	/^void const_cpu(int N, float ALPHA, float *X, int INCX)$/;"	f
constrain	utils.c	/^float constrain(float min, float max, float a)$/;"	f
constrain_int	utils.c	/^int constrain_int(int a, int min, int max)$/;"	f
convDesc	include/darknet.h	/^    cudnnConvolutionDescriptor_t convDesc;$/;"	m	struct:layer
coord_scale	include/darknet.h	/^    float coord_scale;$/;"	m	struct:layer
coords	include/darknet.h	/^    int coords;$/;"	m	struct:layer
coords	include/darknet.h	/^    int coords;$/;"	m	struct:load_args
copy_cpu	blas.c	/^void copy_cpu(int N, float *X, int INCX, float *Y, int INCY)$/;"	f
copy_string	utils.c	/^char *copy_string(char *s)$/;"	f
cost	include/darknet.h	/^    float * cost;$/;"	m	struct:layer
cost	include/darknet.h	/^    float *cost;$/;"	m	struct:network
cost_type	include/darknet.h	/^    COST_TYPE cost_type;$/;"	m	struct:layer
count_fields	utils.c	/^int count_fields(char *line)$/;"	f
counts	include/darknet.h	/^    int   * counts;$/;"	m	struct:layer
cweights	include/darknet.h	/^    char  * cweights;$/;"	m	struct:layer
d	include/darknet.h	/^    data *d;$/;"	m	struct:load_args
d	network.c	/^    data d;$/;"	m	struct:__anon1	file:
data	include/darknet.h	/^    float *data;$/;"	m	struct:__anon14
data	include/darknet.h	/^} data;$/;"	t	typeref:struct:__anon16
data_type	include/darknet.h	/^} data_type;$/;"	t	typeref:enum:__anon17
dc_cpu	include/darknet.h	/^    float *dc_cpu; $/;"	m	struct:layer
dc_gpu	include/darknet.h	/^    float *dc_gpu; $/;"	m	struct:layer
ddstTensorDesc	include/darknet.h	/^    cudnnTensorDescriptor_t dsrcTensorDesc, ddstTensorDesc;$/;"	m	struct:layer
decay	include/darknet.h	/^    float decay;$/;"	m	struct:__anon11
decay	include/darknet.h	/^    float decay;$/;"	m	struct:network
deinter_cpu	blas.c	/^void deinter_cpu(int NX, float *X, int NY, float *Y, int B, float *OUT)$/;"	f
del_arg	utils.c	/^void del_arg(int argc, char **argv, int index)$/;"	f
delta	include/darknet.h	/^    float * delta;$/;"	m	struct:layer
delta	include/darknet.h	/^    float *delta;$/;"	m	struct:network
delta_gpu	include/darknet.h	/^    float * delta_gpu;$/;"	m	struct:layer
delta_gpu	include/darknet.h	/^    float *delta_gpu;$/;"	m	struct:network
detection	include/darknet.h	/^typedef struct detection{$/;"	s
detection	include/darknet.h	/^} detection;$/;"	t	typeref:struct:detection
dh_cpu	include/darknet.h	/^    float *dh_cpu;$/;"	m	struct:layer
dh_gpu	include/darknet.h	/^    float *dh_gpu;$/;"	m	struct:layer
dist_array	utils.c	/^float dist_array(float *a, float *b, int n, int sub)$/;"	f
distribute_weights	network.c	/^void distribute_weights(layer l, layer base)$/;"	f
dontload	include/darknet.h	/^    int dontload;$/;"	m	struct:layer
dontloadscales	include/darknet.h	/^    int dontloadscales;$/;"	m	struct:layer
dontsave	include/darknet.h	/^    int dontsave;$/;"	m	struct:layer
dot	include/darknet.h	/^    float dot;$/;"	m	struct:layer
dot_cpu	blas.c	/^float dot_cpu(int N, float *X, int INCX, float *Y, int INCY)$/;"	f
dropout_layer	dropout_layer.h	/^typedef layer dropout_layer;$/;"	t
dsrcTensorDesc	include/darknet.h	/^    cudnnTensorDescriptor_t dsrcTensorDesc, ddstTensorDesc;$/;"	m	struct:layer
dstTensorDesc	include/darknet.h	/^    cudnnTensorDescriptor_t srcTensorDesc, dstTensorDesc;$/;"	m	struct:layer
dweightDesc	include/darknet.h	/^    cudnnFilterDescriptor_t dweightDesc;$/;"	m	struct:layer
dx	include/darknet.h	/^    float dx;$/;"	m	struct:__anon13
dy	include/darknet.h	/^    float dy;$/;"	m	struct:__anon13
elu_activate	activations.h	/^static inline float elu_activate(float x){return (x >= 0)*x + (x < 0)*(exp(x)-1);}$/;"	f
elu_gradient	activations.h	/^static inline float elu_gradient(float x){return (x >= 0) + (x < 0)*(x + 1);}$/;"	f
epoch	include/darknet.h	/^    float epoch;$/;"	m	struct:network
eps	include/darknet.h	/^    float eps;$/;"	m	struct:__anon11
eps	include/darknet.h	/^    float eps;$/;"	m	struct:network
err	network.c	/^    float *err;$/;"	m	struct:__anon1	file:
error	utils.c	/^void error(const char *s)$/;"	f
exposure	include/darknet.h	/^    float exposure;$/;"	m	struct:layer
exposure	include/darknet.h	/^    float exposure;$/;"	m	struct:load_args
exposure	include/darknet.h	/^    float exposure;$/;"	m	struct:network
extra	include/darknet.h	/^    int extra;$/;"	m	struct:layer
f_cpu	include/darknet.h	/^    float *f_cpu;$/;"	m	struct:layer
f_gpu	include/darknet.h	/^    float *f_gpu;$/;"	m	struct:layer
fgetl	utils.c	/^char *fgetl(FILE *fp)$/;"	f
file_error	utils.c	/^void file_error(char *s)$/;"	f
fill_cpu	blas.c	/^void fill_cpu(int N, float ALPHA, float *X, int INCX)$/;"	f
fill_network_boxes	network.c	/^void fill_network_boxes(network *net, int w, int h, float thresh, float hier, int *map, int relative, detection *dets)$/;"	f
find_arg	utils.c	/^int find_arg(int argc, char* argv[], char *arg)$/;"	f
find_char_arg	utils.c	/^char *find_char_arg(int argc, char **argv, char *arg, char *def)$/;"	f
find_float_arg	utils.c	/^float find_float_arg(int argc, char **argv, char *arg, float def)$/;"	f
find_int_arg	utils.c	/^int find_int_arg(int argc, char **argv, char *arg, int def)$/;"	f
find_replace	utils.c	/^void find_replace(char *str, char *orig, char *rep, char *output)$/;"	f
flatten	blas.c	/^void flatten(float *x, int size, int layers, int batch, int forward)$/;"	f
flatten	include/darknet.h	/^    int flatten;$/;"	m	struct:layer
flip	include/darknet.h	/^    int flip;$/;"	m	struct:layer
flipped	include/darknet.h	/^    int flipped;$/;"	m	struct:layer
focus	include/darknet.h	/^    float focus;$/;"	m	struct:layer
forced	include/darknet.h	/^    int forced;$/;"	m	struct:layer
forgot_delta	include/darknet.h	/^    float * forgot_delta;$/;"	m	struct:layer
forgot_delta_gpu	include/darknet.h	/^    float * forgot_delta_gpu;$/;"	m	struct:layer
forgot_state	include/darknet.h	/^    float * forgot_state;$/;"	m	struct:layer
forgot_state_gpu	include/darknet.h	/^    float * forgot_state_gpu;$/;"	m	struct:layer
forward	include/darknet.h	/^    void (*forward)   (struct layer, struct network);$/;"	m	struct:layer
forward_activation_layer	activation_layer.c	/^void forward_activation_layer(layer l, network net)$/;"	f
forward_activation_layer_gpu	activation_layer.c	/^void forward_activation_layer_gpu(layer l, network net)$/;"	f
forward_add_mask_layer	add_mask_layer.c	/^void forward_add_mask_layer(layer l, network net)$/;"	f
forward_avgpool_layer	avgpool_layer.c	/^void forward_avgpool_layer(const avgpool_layer l, network net)$/;"	f
forward_batchnorm_layer	batchnorm_layer.c	/^void forward_batchnorm_layer(layer l, network net)$/;"	f
forward_batchnorm_layer_gpu	batchnorm_layer.c	/^void forward_batchnorm_layer_gpu(layer l, network net)$/;"	f
forward_dropout_layer	dropout_layer.c	/^void forward_dropout_layer(dropout_layer l, network net)$/;"	f
forward_gpu	include/darknet.h	/^    void (*forward_gpu)   (struct layer, struct network);$/;"	m	struct:layer
forward_linear_transform_layer	linear_transform_layer.c	/^void forward_linear_transform_layer(layer l, network net)$/;"	f
forward_network	network.c	/^void forward_network(network *netp)$/;"	f
forward_network_gpu	network.c	/^void forward_network_gpu(network *netp)$/;"	f
forward_shuffle_channel_layer	shuffle_channel_layer.c	/^void forward_shuffle_channel_layer(layer l, network net)$/;"	f
forward_softmax_layer	softmax_layer.c	/^void forward_softmax_layer(const softmax_layer l, network net)$/;"	f
forward_softmax_layer_gpu	softmax_layer.c	/^void forward_softmax_layer_gpu(const softmax_layer l, network net)$/;"	f
free_detections	network.c	/^void free_detections(detection *dets, int n)$/;"	f
free_layer	layer.c	/^void free_layer(layer l)$/;"	f
free_list	list.c	/^void free_list(list *l)$/;"	f
free_list_contents	list.c	/^void free_list_contents(list *l)$/;"	f
free_network	network.c	/^void free_network(network *net)$/;"	f
free_node	list.c	/^void free_node(node *n)$/;"	f
free_ptrs	utils.c	/^void free_ptrs(void **ptrs, int n)$/;"	f
free_section	parser.c	/^void free_section(section *s)$/;"	f
front	include/darknet.h	/^    node *front;$/;"	m	struct:list
fw_algo	include/darknet.h	/^    cudnnConvolutionFwdAlgo_t fw_algo;$/;"	m	struct:layer
g_cpu	include/darknet.h	/^    float *g_cpu;$/;"	m	struct:layer
g_gpu	include/darknet.h	/^    float *g_gpu;$/;"	m	struct:layer
gamma	include/darknet.h	/^    float gamma;$/;"	m	struct:network
gate_delta_gpu	include/darknet.h	/^    float * gate_delta_gpu;$/;"	m	struct:layer
gate_gpu	include/darknet.h	/^    float * gate_gpu;$/;"	m	struct:layer
get_activation	activations.c	/^ACTIVATION get_activation(char *s)$/;"	f
get_activation_string	activations.c	/^char *get_activation_string(ACTIVATION a)$/;"	f
get_base_args	network.c	/^load_args get_base_args(network *net)$/;"	f
get_current_batch	network.c	/^size_t get_current_batch(network *net)$/;"	f
get_current_rate	network.c	/^float get_current_rate(network *net)$/;"	f
get_layer_string	network.c	/^char *get_layer_string(LAYER_TYPE a)$/;"	f
get_metadata	option_list.c	/^metadata get_metadata(char *file)$/;"	f
get_network_boxes	network.c	/^detection *get_network_boxes(network *net, int w, int h, float thresh, float hier, int *map, int relative, int *num)$/;"	f
get_network_detection_layer	network.c	/^layer get_network_detection_layer(network *net)$/;"	f
get_network_image	network.c	/^image get_network_image(network *net)$/;"	f
get_network_image_layer	network.c	/^image get_network_image_layer(network *net, int i)$/;"	f
get_network_output_layer	network.c	/^layer get_network_output_layer(network *net)$/;"	f
get_policy	parser.c	/^learning_rate_policy get_policy(char *s)$/;"	f
get_predicted_class_network	network.c	/^int get_predicted_class_network(network *net)$/;"	f
gpu_index	include/darknet.h	/^    int gpu_index;$/;"	m	struct:network
gradient	activations.c	/^float gradient(float x, ACTIVATION a)$/;"	f
gradient_array	activations.c	/^void gradient_array(const float *x, const int n, const ACTIVATION a, float *delta)$/;"	f
group	include/darknet.h	/^    int *group;$/;"	m	struct:__anon5
group_offset	include/darknet.h	/^    int *group_offset;$/;"	m	struct:__anon5
group_size	include/darknet.h	/^    int *group_size;$/;"	m	struct:__anon5
groups	include/darknet.h	/^    int groups;$/;"	m	struct:__anon5
groups	include/darknet.h	/^    int groups;$/;"	m	struct:layer
h	include/darknet.h	/^    float x, y, w, h;$/;"	m	struct:__anon15
h	include/darknet.h	/^    float x,y,w,h;$/;"	m	struct:__anon18
h	include/darknet.h	/^    int h, w, c;$/;"	m	struct:network
h	include/darknet.h	/^    int h,w,c;$/;"	m	struct:layer
h	include/darknet.h	/^    int h;$/;"	m	struct:__anon13
h	include/darknet.h	/^    int h;$/;"	m	struct:__anon14
h	include/darknet.h	/^    int h;$/;"	m	struct:load_args
h	include/darknet.h	/^    int w, h;$/;"	m	struct:__anon16
h	parser.c	/^    int h;$/;"	m	struct:size_params	file:
h_cpu	include/darknet.h	/^    float *h_cpu;$/;"	m	struct:layer
h_gpu	include/darknet.h	/^    float *h_gpu;$/;"	m	struct:layer
hardtan_activate	activations.h	/^static inline float hardtan_activate(float x)$/;"	f
hardtan_gradient	activations.h	/^static inline float hardtan_gradient(float x)$/;"	f
harmless_update_network_gpu	network.c	/^void harmless_update_network_gpu(network *netp)$/;"	f
hh_cpu	include/darknet.h	/^    float *hh_cpu;$/;"	m	struct:layer
hh_gpu	include/darknet.h	/^    float *hh_gpu;$/;"	m	struct:layer
hidden	include/darknet.h	/^    int hidden;$/;"	m	struct:layer
hierarchy	include/darknet.h	/^    tree *hierarchy;$/;"	m	struct:load_args
hierarchy	include/darknet.h	/^    tree *hierarchy;$/;"	m	struct:network
hue	include/darknet.h	/^    float hue;$/;"	m	struct:load_args
hue	include/darknet.h	/^    float hue;$/;"	m	struct:network
i_cpu	include/darknet.h	/^    float *i_cpu;$/;"	m	struct:layer
i_gpu	include/darknet.h	/^    float *i_gpu;$/;"	m	struct:layer
id	include/darknet.h	/^    int id;$/;"	m	struct:__anon18
ignore_thresh	include/darknet.h	/^    float ignore_thresh;$/;"	m	struct:layer
im	include/darknet.h	/^    image *im;$/;"	m	struct:load_args
image	include/darknet.h	/^} image;$/;"	t	typeref:struct:__anon14
index	include/darknet.h	/^    int index;$/;"	m	struct:layer
index	include/darknet.h	/^    int index;$/;"	m	struct:network
index	parser.c	/^    int index;$/;"	m	struct:size_params	file:
indexes	include/darknet.h	/^    int   * indexes;$/;"	m	struct:layer
indexes_gpu	include/darknet.h	/^    int *indexes_gpu;$/;"	m	struct:layer
input	include/darknet.h	/^    float *input;$/;"	m	struct:network
input_gate_layer	include/darknet.h	/^    struct layer *input_gate_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
input_gpu	include/darknet.h	/^    float *input_gpu;$/;"	m	struct:network
input_h_layer	include/darknet.h	/^    struct layer *input_h_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
input_layer	include/darknet.h	/^    struct layer *input_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
input_layers	include/darknet.h	/^    int   * input_layers;$/;"	m	struct:layer
input_r_layer	include/darknet.h	/^    struct layer *input_r_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
input_save_layer	include/darknet.h	/^    struct layer *input_save_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
input_sizes	include/darknet.h	/^    int   * input_sizes;$/;"	m	struct:layer
input_state_layer	include/darknet.h	/^    struct layer *input_state_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
input_z_layer	include/darknet.h	/^    struct layer *input_z_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
inputs	include/darknet.h	/^    int inputs;$/;"	m	struct:layer
inputs	include/darknet.h	/^    int inputs;$/;"	m	struct:network
inputs	parser.c	/^    int inputs;$/;"	m	struct:size_params	file:
int_index	utils.c	/^int int_index(int *a, int val, int n)$/;"	f
int_to_alphanum	utils.c	/^char int_to_alphanum(int i)$/;"	f
inter_cpu	blas.c	/^void inter_cpu(int NX, float *X, int NY, float *Y, int B, float *OUT)$/;"	f
is_network	parser.c	/^int is_network(section *s)$/;"	f
j	network.c	/^    int j;$/;"	m	struct:__anon2	file:
jitter	include/darknet.h	/^    float jitter;$/;"	m	struct:layer
jitter	include/darknet.h	/^    float jitter;$/;"	m	struct:load_args
joint	include/darknet.h	/^    int joint;$/;"	m	struct:layer
kappa	include/darknet.h	/^    float kappa;$/;"	m	struct:layer
key	option_list.h	/^    char *key;$/;"	m	struct:__anon19
kvp	option_list.h	/^} kvp;$/;"	t	typeref:struct:__anon19
l1_cpu	blas.c	/^void l1_cpu(int n, float *pred, float *truth, float *delta, float *error)$/;"	f
l2_cpu	blas.c	/^void l2_cpu(int n, float *pred, float *truth, float *delta, float *error)$/;"	f
l2normalize_cpu	blas.c	/^void l2normalize_cpu(float *x, float *dx, int batch, int filters, int spatial)$/;"	f
labels	include/darknet.h	/^    char **labels;$/;"	m	struct:load_args
layer	include/darknet.h	/^struct layer{$/;"	s
layer	include/darknet.h	/^typedef struct layer layer;$/;"	t	typeref:struct:layer
layers	include/darknet.h	/^    layer *layers;$/;"	m	struct:network
leaf	include/darknet.h	/^    int *leaf;$/;"	m	struct:__anon5
leaky_activate	activations.h	/^static inline float leaky_activate(float x){return (x>0) ? x : .1*x;}$/;"	f
leaky_gradient	activations.h	/^static inline float leaky_gradient(float x){return (x>0) ? 1 : .1;}$/;"	f
learning_rate	include/darknet.h	/^    float learning_rate;$/;"	m	struct:__anon11
learning_rate	include/darknet.h	/^    float learning_rate;$/;"	m	struct:network
learning_rate_policy	include/darknet.h	/^} learning_rate_policy;$/;"	t	typeref:enum:__anon12
learning_rate_scale	include/darknet.h	/^    float learning_rate_scale;$/;"	m	struct:layer
left	include/darknet.h	/^    float left, right, top, bottom;$/;"	m	struct:__anon18
lhtan_activate	activations.h	/^static inline float lhtan_activate(float x)$/;"	f
lhtan_gradient	activations.h	/^static inline float lhtan_gradient(float x)$/;"	f
linear_activate	activations.h	/^static inline float linear_activate(float x){return x;}$/;"	f
linear_gradient	activations.h	/^static inline float linear_gradient(float x){return 1;}$/;"	f
list	include/darknet.h	/^typedef struct list{$/;"	s
list	include/darknet.h	/^} list;$/;"	t	typeref:struct:list
list_insert	list.c	/^void list_insert(list *l, void *val)$/;"	f
list_pop	list.c	/^void *list_pop(list *l){$/;"	f
list_to_array	list.c	/^void **list_to_array(list *l)$/;"	f
load_add_mask_weights	parser.c	/^void load_add_mask_weights(layer l, FILE *fp)$/;"	f
load_args	include/darknet.h	/^typedef struct load_args{$/;"	s
load_args	include/darknet.h	/^} load_args;$/;"	t	typeref:struct:load_args
load_batchnorm_weights	parser.c	/^void load_batchnorm_weights(layer l, FILE *fp)$/;"	f
load_connected_weights	parser.c	/^void load_connected_weights(layer l, FILE *fp, int transpose)$/;"	f
load_convolutional_weights	parser.c	/^void load_convolutional_weights(layer l, FILE *fp)$/;"	f
load_convolutional_weights_binary	parser.c	/^void load_convolutional_weights_binary(layer l, FILE *fp)$/;"	f
load_linear_transform_weights	parser.c	/^void load_linear_transform_weights(layer l, FILE *fp)$/;"	f
load_network	network.c	/^network *load_network(char *cfg, char *weights, int clear)$/;"	f
load_shuffle_channel_weights	parser.c	/^void load_shuffle_channel_weights(layer l, FILE *fp)$/;"	f
load_weights	parser.c	/^void load_weights(network *net, char *filename)$/;"	f
load_weights_upto	parser.c	/^void load_weights_upto(network *net, char *filename, int start, int cutoff)$/;"	f
log	include/darknet.h	/^    int log;$/;"	m	struct:layer
loggy_activate	activations.h	/^static inline float loggy_activate(float x){return 2.\/(1. + exp(-x)) - 1;}$/;"	f
loggy_gradient	activations.h	/^static inline float loggy_gradient(float x)$/;"	f
logistic_activate	activations.h	/^static inline float logistic_activate(float x){return 1.\/(1. + exp(-x));}$/;"	f
logistic_gradient	activations.h	/^static inline float logistic_gradient(float x){return (1-x)*x;}$/;"	f
logistic_x_ent_cpu	blas.c	/^void logistic_x_ent_cpu(int n, float *pred, float *truth, float *delta, float *error)$/;"	f
loss	include/darknet.h	/^    float * loss;$/;"	m	struct:layer
loss_gpu	include/darknet.h	/^    float * loss_gpu;$/;"	m	struct:layer
m	include/darknet.h	/^    float * m;$/;"	m	struct:layer
m	include/darknet.h	/^    int m;$/;"	m	struct:load_args
m_gpu	include/darknet.h	/^    float *m_gpu;$/;"	m	struct:layer
mag_array	utils.c	/^float mag_array(float *a, int n)$/;"	f
make_activation_layer	activation_layer.c	/^layer make_activation_layer(int batch, int inputs, ACTIVATION activation)$/;"	f
make_add_mask_layer	add_mask_layer.c	/^layer make_add_mask_layer(int batch, int h, int w, int c)$/;"	f
make_avgpool_layer	avgpool_layer.c	/^avgpool_layer make_avgpool_layer(int batch, int w, int h, int c)$/;"	f
make_batchnorm_layer	batchnorm_layer.c	/^layer make_batchnorm_layer(int batch, int w, int h, int c)$/;"	f
make_dropout_layer	dropout_layer.c	/^dropout_layer make_dropout_layer(int batch, int inputs, float probability)$/;"	f
make_linear_transform_layer	linear_transform_layer.c	/^layer make_linear_transform_layer(int batch, int h, int w, int c, int units)$/;"	f
make_list	list.c	/^list *make_list()$/;"	f
make_network	network.c	/^network *make_network(int n)$/;"	f
make_network_boxes	network.c	/^detection *make_network_boxes(network *net, float thresh, int *num)$/;"	f
make_shuffle_channel_layer	shuffle_channel_layer.c	/^layer make_shuffle_channel_layer(int batch, int h, int w, int c)$/;"	f
make_softmax_layer	softmax_layer.c	/^softmax_layer make_softmax_layer(int batch, int inputs, int groups)$/;"	f
malloc_error	utils.c	/^void malloc_error()$/;"	f
map	include/darknet.h	/^    int   * map;$/;"	m	struct:layer
mask	include/darknet.h	/^    float *mask;$/;"	m	struct:detection
mask	include/darknet.h	/^    int *mask;$/;"	m	struct:layer
mask_scale	include/darknet.h	/^    float mask_scale;$/;"	m	struct:layer
matrix	include/darknet.h	/^typedef struct matrix{$/;"	s
matrix	include/darknet.h	/^} matrix;$/;"	t	typeref:struct:matrix
max	include/darknet.h	/^    int min, max, size;$/;"	m	struct:load_args
max_batches	include/darknet.h	/^    int max_batches;$/;"	m	struct:network
max_boxes	include/darknet.h	/^    int max_boxes;$/;"	m	struct:layer
max_crop	include/darknet.h	/^    int max_crop;$/;"	m	struct:network
max_index	utils.c	/^int max_index(float *a, int n)$/;"	f
max_int_index	utils.c	/^int max_int_index(int *a, int n)$/;"	f
max_ratio	include/darknet.h	/^    float max_ratio;$/;"	m	struct:network
mean	include/darknet.h	/^    float * mean;$/;"	m	struct:layer
mean_array	utils.c	/^float mean_array(float *a, int n)$/;"	f
mean_arrays	utils.c	/^void mean_arrays(float **a, int n, int els, float *avg)$/;"	f
mean_cpu	blas.c	/^void mean_cpu(float *x, int batch, int filters, int spatial, float *mean)$/;"	f
mean_delta	include/darknet.h	/^    float * mean_delta;$/;"	m	struct:layer
mean_delta_cpu	batchnorm_layer.c	/^void mean_delta_cpu(float *delta, float *variance, int batch, int filters, int spatial, float *mean_delta)$/;"	f
mean_delta_gpu	include/darknet.h	/^    float * mean_delta_gpu;$/;"	m	struct:layer
mean_gpu	include/darknet.h	/^    float * mean_gpu;$/;"	m	struct:layer
merge_weights	network.c	/^void merge_weights(layer l, layer base)$/;"	f
metadata	include/darknet.h	/^} metadata;$/;"	t	typeref:struct:__anon4
min	include/darknet.h	/^    int min, max, size;$/;"	m	struct:load_args
min_crop	include/darknet.h	/^    int min_crop;$/;"	m	struct:network
min_ratio	include/darknet.h	/^    float min_ratio;$/;"	m	struct:network
momentum	include/darknet.h	/^    float momentum;$/;"	m	struct:__anon11
momentum	include/darknet.h	/^    float momentum;$/;"	m	struct:network
mse_array	utils.c	/^float mse_array(float *a, int n)$/;"	f
mul_cpu	blas.c	/^void mul_cpu(int N, float *X, int INCX, float *Y, int INCY)$/;"	f
mult_add_into_cpu	blas.c	/^void mult_add_into_cpu(int N, float *X, float *Y, float *Z)$/;"	f
n	include/darknet.h	/^    int n;$/;"	m	struct:__anon5
n	include/darknet.h	/^    int n;$/;"	m	struct:layer
n	include/darknet.h	/^    int n;$/;"	m	struct:load_args
n	include/darknet.h	/^    int n;$/;"	m	struct:network
n	network.c	/^    int n;$/;"	m	struct:__anon2	file:
name	include/darknet.h	/^    char **name;$/;"	m	struct:__anon5
names	include/darknet.h	/^    char **names;$/;"	m	struct:__anon4
nbiases	include/darknet.h	/^    int nbiases;$/;"	m	struct:layer
net	network.c	/^    network *net;$/;"	m	struct:__anon1	file:
net	parser.c	/^    network *net;$/;"	m	struct:size_params	file:
nets	network.c	/^    network **nets;$/;"	m	struct:__anon2	file:
network	include/darknet.h	/^typedef struct network network;$/;"	t	typeref:struct:network
network	include/darknet.h	/^typedef struct network{$/;"	s
network	include/darknet.h	/^} network;$/;"	t	typeref:struct:network
network_accuracies	network.c	/^float *network_accuracies(network *net, data d, int n)$/;"	f
network_accuracy	network.c	/^float network_accuracy(network *net, data d)$/;"	f
network_accuracy_multi	network.c	/^float network_accuracy_multi(network *net, data d, int n)$/;"	f
network_height	network.c	/^int network_height(network *net){return net->h;}$/;"	f
network_inputs	network.c	/^int network_inputs(network *net)$/;"	f
network_output	network.c	/^float *network_output(network *net)$/;"	f
network_output_layer	network.c	/^layer network_output_layer(network *net)$/;"	f
network_outputs	network.c	/^int network_outputs(network *net)$/;"	f
network_predict	network.c	/^float *network_predict(network *net, float *input)$/;"	f
network_predict_data	network.c	/^matrix network_predict_data(network *net, data test)$/;"	f
network_predict_data_multi	network.c	/^matrix network_predict_data_multi(network *net, data test, int n)$/;"	f
network_predict_image	network.c	/^float *network_predict_image(network *net, image im)$/;"	f
network_width	network.c	/^int network_width(network *net){return net->w;}$/;"	f
next	include/darknet.h	/^    struct node *next;$/;"	m	struct:node	typeref:struct:node::node
nh	include/darknet.h	/^    int nh;$/;"	m	struct:load_args
nhwc	include/darknet.h	/^    int nhwc;$/;"	m	struct:layer
noact_activate	activations.h	/^static inline float noact_activate(float x){return x;}$/;"	f
noact_gradient	activations.h	/^static inline float noact_gradient(float x){return 1;}$/;"	f
noadjust	include/darknet.h	/^    int noadjust;$/;"	m	struct:layer
node	include/darknet.h	/^typedef struct node{$/;"	s
node	include/darknet.h	/^} node;$/;"	t	typeref:struct:node
noloss	include/darknet.h	/^    int noloss;$/;"	m	struct:layer
noobject_scale	include/darknet.h	/^    float noobject_scale;$/;"	m	struct:layer
normTensorDesc	include/darknet.h	/^    cudnnTensorDescriptor_t normTensorDesc;$/;"	m	struct:layer
normalize_array	utils.c	/^void normalize_array(float *a, int n)$/;"	f
normalize_cpu	blas.c	/^void normalize_cpu(float *x, float *mean, float *variance, int batch, int filters, int spatial)$/;"	f
normalize_cpu_nhwc	blas.c	/^void normalize_cpu_nhwc(float *x, float *mean, float *variance, int batch, int filters, int spatial)$/;"	f
normalize_delta_cpu	batchnorm_layer.c	/^void normalize_delta_cpu(float *x, float *mean, float *variance, float *mean_delta, float *variance_delta, int batch, int filters, int spatial, float *delta)$/;"	f
norms	include/darknet.h	/^    float * norms;$/;"	m	struct:layer
norms_gpu	include/darknet.h	/^    float * norms_gpu;$/;"	m	struct:layer
notruth	include/darknet.h	/^    int notruth;$/;"	m	struct:network
num_boxes	include/darknet.h	/^    int *num_boxes;$/;"	m	struct:__anon16
num_boxes	include/darknet.h	/^    int num_boxes;$/;"	m	struct:load_args
num_detections	network.c	/^int num_detections(network *net, float thresh)$/;"	f
num_steps	include/darknet.h	/^    int num_steps;$/;"	m	struct:network
numload	include/darknet.h	/^    int numload;$/;"	m	struct:layer
nw	include/darknet.h	/^    int nw;$/;"	m	struct:load_args
nweights	include/darknet.h	/^    int nweights;$/;"	m	struct:layer
o_cpu	include/darknet.h	/^    float *o_cpu;$/;"	m	struct:layer
o_gpu	include/darknet.h	/^    float *o_gpu;$/;"	m	struct:layer
obfweights	include/darknet.h	/^    int *obfweights;$/;"	m	struct:layer
object_scale	include/darknet.h	/^    float object_scale;$/;"	m	struct:layer
objectness	include/darknet.h	/^    float objectness;$/;"	m	struct:detection
objectness	include/darknet.h	/^    int objectness;$/;"	m	struct:layer
one_hot_encode	utils.c	/^float **one_hot_encode(float *a, int n, int k)$/;"	f
onlyforward	include/darknet.h	/^    int onlyforward;$/;"	m	struct:layer
option_find	option_list.c	/^char *option_find(list *l, char *key)$/;"	f
option_find_float	option_list.c	/^float option_find_float(list *l, char *key, float def)$/;"	f
option_find_float_quiet	option_list.c	/^float option_find_float_quiet(list *l, char *key, float def)$/;"	f
option_find_int	option_list.c	/^int option_find_int(list *l, char *key, int def)$/;"	f
option_find_int_quiet	option_list.c	/^int option_find_int_quiet(list *l, char *key, int def)$/;"	f
option_find_str	option_list.c	/^char *option_find_str(list *l, char *key, char *def)$/;"	f
option_insert	option_list.c	/^void option_insert(list *l, char *key, char *val)$/;"	f
option_unused	option_list.c	/^void option_unused(list *l)$/;"	f
options	parser.c	/^    list *options;$/;"	m	struct:__anon3	file:
out_c	include/darknet.h	/^    int out_h, out_w, out_c;$/;"	m	struct:layer
out_h	include/darknet.h	/^    int out_h, out_w, out_c;$/;"	m	struct:layer
out_h	include/darknet.h	/^    int out_h;$/;"	m	struct:load_args
out_w	include/darknet.h	/^    int out_h, out_w, out_c;$/;"	m	struct:layer
out_w	include/darknet.h	/^    int out_w;$/;"	m	struct:load_args
output	include/darknet.h	/^    float * output;$/;"	m	struct:layer
output	include/darknet.h	/^    float *output;$/;"	m	struct:network
output_gpu	include/darknet.h	/^    float * output_gpu;$/;"	m	struct:layer
output_gpu	include/darknet.h	/^    float *output_gpu;$/;"	m	struct:network
output_layer	include/darknet.h	/^    struct layer *output_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
outputs	include/darknet.h	/^    int outputs;$/;"	m	struct:layer
outputs	include/darknet.h	/^    int outputs;$/;"	m	struct:network
pad	include/darknet.h	/^    int pad;$/;"	m	struct:layer
parent	include/darknet.h	/^    int *parent;$/;"	m	struct:__anon5
parse_activation	parser.c	/^layer parse_activation(list *options, size_params params)$/;"	f
parse_add_mask	parser.c	/^layer parse_add_mask(list *options, size_params params)$/;"	f
parse_avgpool	parser.c	/^avgpool_layer parse_avgpool(list *options, size_params params)$/;"	f
parse_batchnorm	parser.c	/^layer parse_batchnorm(list *options, size_params params)$/;"	f
parse_connected	parser.c	/^layer parse_connected(list *options, size_params params)$/;"	f
parse_convolutional	parser.c	/^convolutional_layer parse_convolutional(list *options, size_params params)$/;"	f
parse_cost	parser.c	/^cost_layer parse_cost(list *options, size_params params)$/;"	f
parse_crnn	parser.c	/^layer parse_crnn(list *options, size_params params)$/;"	f
parse_crop	parser.c	/^crop_layer parse_crop(list *options, size_params params)$/;"	f
parse_csv_line	utils.c	/^list *parse_csv_line(char *line)$/;"	f
parse_data	parser.c	/^void parse_data(char *data, float *a, int n)$/;"	f
parse_deconvolutional	parser.c	/^layer parse_deconvolutional(list *options, size_params params)$/;"	f
parse_detection	parser.c	/^detection_layer parse_detection(list *options, size_params params)$/;"	f
parse_dropout	parser.c	/^dropout_layer parse_dropout(list *options, size_params params)$/;"	f
parse_fields	utils.c	/^float *parse_fields(char *line, int n)$/;"	f
parse_gru	parser.c	/^layer parse_gru(list *options, size_params params)$/;"	f
parse_iseg	parser.c	/^layer parse_iseg(list *options, size_params params)$/;"	f
parse_l2norm	parser.c	/^layer parse_l2norm(list *options, size_params params)$/;"	f
parse_linear_transform	parser.c	/^layer parse_linear_transform(list *options, size_params params)$/;"	f
parse_local	parser.c	/^local_layer parse_local(list *options, size_params params)$/;"	f
parse_logistic	parser.c	/^layer parse_logistic(list *options, size_params params)$/;"	f
parse_lstm	parser.c	/^layer parse_lstm(list *options, size_params params)$/;"	f
parse_maxpool	parser.c	/^maxpool_layer parse_maxpool(list *options, size_params params)$/;"	f
parse_net_options	parser.c	/^void parse_net_options(list *options, network *net)$/;"	f
parse_network_cfg	parser.c	/^network *parse_network_cfg(char *filename)$/;"	f
parse_normalization	parser.c	/^layer parse_normalization(list *options, size_params params)$/;"	f
parse_region	parser.c	/^layer parse_region(list *options, size_params params)$/;"	f
parse_reorg	parser.c	/^layer parse_reorg(list *options, size_params params)$/;"	f
parse_rnn	parser.c	/^layer parse_rnn(list *options, size_params params)$/;"	f
parse_route	parser.c	/^route_layer parse_route(list *options, size_params params, network *net)$/;"	f
parse_shortcut	parser.c	/^layer parse_shortcut(list *options, size_params params, network *net)$/;"	f
parse_shuffle_channel	parser.c	/^layer parse_shuffle_channel(list *options, size_params params)$/;"	f
parse_softmax	parser.c	/^layer parse_softmax(list *options, size_params params)$/;"	f
parse_upsample	parser.c	/^layer parse_upsample(list *options, size_params params, network *net)$/;"	f
parse_yolo	parser.c	/^layer parse_yolo(list *options, size_params params)$/;"	f
parse_yolo_mask	parser.c	/^int *parse_yolo_mask(char *a, int *num)$/;"	f
path	include/darknet.h	/^    char *path;$/;"	m	struct:load_args
paths	include/darknet.h	/^    char **paths;$/;"	m	struct:load_args
plse_activate	activations.h	/^static inline float plse_activate(float x)$/;"	f
plse_gradient	activations.h	/^static inline float plse_gradient(float x){return (x < 0 || x > 1) ? .01 : .125;}$/;"	f
pm	utils.c	/^void pm(int M, int N, float *A)$/;"	f
policy	include/darknet.h	/^    learning_rate_policy policy;$/;"	m	struct:network
pow_cpu	blas.c	/^void pow_cpu(int N, float ALPHA, float *X, int INCX, float *Y, int INCY)$/;"	f
power	include/darknet.h	/^    float power;$/;"	m	struct:network
prev	include/darknet.h	/^    struct node *prev;$/;"	m	struct:node	typeref:struct:node::node
prev_cell_cpu	include/darknet.h	/^    float *prev_cell_cpu;$/;"	m	struct:layer
prev_cell_gpu	include/darknet.h	/^    float *prev_cell_gpu;$/;"	m	struct:layer
prev_state	include/darknet.h	/^    float * prev_state;$/;"	m	struct:layer
prev_state_cpu	include/darknet.h	/^    float * prev_state_cpu;$/;"	m	struct:layer
prev_state_gpu	include/darknet.h	/^    float * prev_state_gpu;$/;"	m	struct:layer
print_network	network.c	/^void print_network(network *net)$/;"	f
print_statistics	utils.c	/^void print_statistics(float *a, int n)$/;"	f
prob	include/darknet.h	/^    float *prob;$/;"	m	struct:detection
probability	include/darknet.h	/^    float probability;$/;"	m	struct:layer
pull_batchnorm_layer	batchnorm_layer.c	/^void pull_batchnorm_layer(layer l)$/;"	f
pull_network_output	network.c	/^void pull_network_output(network *net)$/;"	f
pull_softmax_layer_output	softmax_layer.c	/^void pull_softmax_layer_output(const softmax_layer layer)$/;"	f
pull_weights	network.c	/^void pull_weights(layer l)$/;"	f
push_batchnorm_layer	batchnorm_layer.c	/^void push_batchnorm_layer(layer l)$/;"	f
push_weights	network.c	/^void push_weights(layer l)$/;"	f
r_cpu	include/darknet.h	/^    float *r_cpu;$/;"	m	struct:layer
r_gpu	include/darknet.h	/^    float *r_gpu;$/;"	m	struct:layer
rad	include/darknet.h	/^    float rad;$/;"	m	struct:__anon13
ramp_activate	activations.h	/^static inline float ramp_activate(float x){return x*(x>0)+.1*x;}$/;"	f
ramp_gradient	activations.h	/^static inline float ramp_gradient(float x){return (x>0)+.1;}$/;"	f
rand	include/darknet.h	/^    float * rand;$/;"	m	struct:layer
rand_gpu	include/darknet.h	/^    float * rand_gpu;$/;"	m	struct:layer
rand_int	utils.c	/^int rand_int(int min, int max)$/;"	f
rand_normal	utils.c	/^float rand_normal()$/;"	f
rand_scale	utils.c	/^float rand_scale(float s)$/;"	f
rand_size_t	utils.c	/^size_t rand_size_t()$/;"	f
rand_uniform	utils.c	/^float rand_uniform(float min, float max)$/;"	f
random	include/darknet.h	/^    int random;$/;"	m	struct:layer
random	include/darknet.h	/^    int random;$/;"	m	struct:network
random_index_order	utils.c	/^int *random_index_order(int min, int max)$/;"	f
ratio	include/darknet.h	/^    float ratio;$/;"	m	struct:layer
rbias	include/darknet.h	/^    float *rbias;$/;"	m	struct:layer
read_all	utils.c	/^void read_all(int fd, char *buffer, size_t bytes)$/;"	f
read_all_fail	utils.c	/^int read_all_fail(int fd, char *buffer, size_t bytes)$/;"	f
read_cfg	parser.c	/^list *read_cfg(char *filename)$/;"	f
read_data_cfg	option_list.c	/^list *read_data_cfg(char *filename)$/;"	f
read_file	utils.c	/^unsigned char *read_file(char *filename)$/;"	f
read_int	utils.c	/^int read_int(int fd)$/;"	f
read_intlist	utils.c	/^int *read_intlist(char *gpu_list, int *ngpus, int d)$/;"	f
read_map	utils.c	/^int *read_map(char *filename)$/;"	f
read_option	option_list.c	/^int read_option(char *s, list *options)$/;"	f
relie_activate	activations.h	/^static inline float relie_activate(float x){return (x>0) ? x : .01*x;}$/;"	f
relie_gradient	activations.h	/^static inline float relie_gradient(float x){return (x>0) ? 1 : .01;}$/;"	f
relu6_activate	activations.h	/^static inline float relu6_activate(float x){return (x < 0.) ? 0 : (6.0 < x) ? 6.0: x;}$/;"	f
relu6_gradient	activations.h	/^static inline float relu6_gradient(float x){return ((x>0) && (x<6));}$/;"	f
relu_activate	activations.h	/^static inline float relu_activate(float x){return x*(x>0);}$/;"	f
relu_gradient	activations.h	/^static inline float relu_gradient(float x){return (x>0);}$/;"	f
reorg	include/darknet.h	/^    int reorg;$/;"	m	struct:layer
reorg_cpu	blas.c	/^void reorg_cpu(float *x, int w, int h, int c, int batch, int stride, int forward, float *out)$/;"	f
rescore	include/darknet.h	/^    int rescore;$/;"	m	struct:layer
reset_layer	include/darknet.h	/^    struct layer *reset_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
reset_network_state	network.c	/^void reset_network_state(network *net, int b)$/;"	f
reset_rnn	network.c	/^void reset_rnn(network *net)$/;"	f
resize_avgpool_layer	avgpool_layer.c	/^void resize_avgpool_layer(avgpool_layer *l, int w, int h)$/;"	f
resize_batchnorm_layer	batchnorm_layer.c	/^void resize_batchnorm_layer(layer *layer, int w, int h)$/;"	f
resize_dropout_layer	dropout_layer.c	/^void resize_dropout_layer(dropout_layer *l, int inputs)$/;"	f
resize_network	network.c	/^int resize_network(network *net, int w, int h)$/;"	f
resized	include/darknet.h	/^    image *resized;$/;"	m	struct:load_args
reverse	include/darknet.h	/^    int reverse;$/;"	m	struct:layer
right	include/darknet.h	/^    float left, right, top, bottom;$/;"	m	struct:__anon18
rolling_mean	include/darknet.h	/^    float * rolling_mean;$/;"	m	struct:layer
rolling_mean_gpu	include/darknet.h	/^    float * rolling_mean_gpu;$/;"	m	struct:layer
rolling_variance	include/darknet.h	/^    float * rolling_variance;$/;"	m	struct:layer
rolling_variance_gpu	include/darknet.h	/^    float * rolling_variance_gpu;$/;"	m	struct:layer
rows	include/darknet.h	/^    int rows, cols;$/;"	m	struct:matrix
rscalar	include/darknet.h	/^    float *rscalar;$/;"	m	struct:layer
sample_array	utils.c	/^int sample_array(float *a, int n)$/;"	f
saturation	include/darknet.h	/^    float saturation;$/;"	m	struct:layer
saturation	include/darknet.h	/^    float saturation;$/;"	m	struct:load_args
saturation	include/darknet.h	/^    float saturation;$/;"	m	struct:network
save_add_mask_weights	parser.c	/^void save_add_mask_weights(layer l, FILE *fp)$/;"	f
save_batchnorm_weights	parser.c	/^void save_batchnorm_weights(layer l, FILE *fp)$/;"	f
save_connected_weights	parser.c	/^void save_connected_weights(layer l, FILE *fp)$/;"	f
save_convolutional_weights	parser.c	/^void save_convolutional_weights(layer l, FILE *fp)$/;"	f
save_convolutional_weights_binary	parser.c	/^void save_convolutional_weights_binary(layer l, FILE *fp)$/;"	f
save_delta_gpu	include/darknet.h	/^    float * save_delta_gpu;$/;"	m	struct:layer
save_gpu	include/darknet.h	/^    float * save_gpu;$/;"	m	struct:layer
save_linear_transform_weights	parser.c	/^void save_linear_transform_weights(layer l, FILE *fp)$/;"	f
save_shuffle_channel_weights	parser.c	/^void save_shuffle_channel_weights(layer l, FILE *fp)$/;"	f
save_weights	parser.c	/^void save_weights(network *net, char *filename)$/;"	f
save_weights_upto	parser.c	/^void save_weights_upto(network *net, char *filename, int cutoff)$/;"	f
scal_cpu	blas.c	/^void scal_cpu(int N, float ALPHA, float *X, int INCX)$/;"	f
scale	include/darknet.h	/^    float scale;$/;"	m	struct:__anon13
scale	include/darknet.h	/^    float scale;$/;"	m	struct:layer
scale	include/darknet.h	/^    float scale;$/;"	m	struct:network
scale	include/darknet.h	/^    int scale;$/;"	m	struct:load_args
scale_array	utils.c	/^void scale_array(float *a, int n, float s)$/;"	f
scale_change_gpu	include/darknet.h	/^    float * scale_change_gpu;$/;"	m	struct:layer
scale_m	include/darknet.h	/^    float * scale_m;$/;"	m	struct:layer
scale_m_gpu	include/darknet.h	/^    float *scale_m_gpu;$/;"	m	struct:layer
scale_updates	include/darknet.h	/^    float * scale_updates;$/;"	m	struct:layer
scale_updates_gpu	include/darknet.h	/^    float * scale_updates_gpu;$/;"	m	struct:layer
scale_v	include/darknet.h	/^    float * scale_v;$/;"	m	struct:layer
scale_v_gpu	include/darknet.h	/^    float *scale_v_gpu;$/;"	m	struct:layer
scale_weights	network.c	/^void scale_weights(layer l, float s)$/;"	f
scales	include/darknet.h	/^    float * scales;$/;"	m	struct:layer
scales	include/darknet.h	/^    float *scales;$/;"	m	struct:network
scales_gpu	include/darknet.h	/^    float * scales_gpu;$/;"	m	struct:layer
sec	utils.c	/^float sec(clock_t clocks)$/;"	f
section	parser.c	/^}section;$/;"	t	typeref:struct:__anon3	file:
seen	include/darknet.h	/^    size_t *seen;$/;"	m	struct:network
self_layer	include/darknet.h	/^    struct layer *self_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
selu_activate	activations.h	/^static inline float selu_activate(float x){return (x >= 0)*1.0507*x + (x < 0)*1.0507*1.6732*(exp(x)-1);}$/;"	f
selu_gradient	activations.h	/^static inline float selu_gradient(float x){return (x >= 0)*1.0507 + (x < 0)*(x + 1.0507*1.6732);}$/;"	f
set_batch_network	network.c	/^void set_batch_network(network *net, int b)$/;"	f
set_temp_network	network.c	/^void set_temp_network(network *net, float t)$/;"	f
shallow	include/darknet.h	/^    int shallow;$/;"	m	struct:__anon16
shift	include/darknet.h	/^    float shift;$/;"	m	struct:layer
shortcut	include/darknet.h	/^    int shortcut;$/;"	m	struct:layer
shortcut_cpu	blas.c	/^void shortcut_cpu(int batch, int w1, int h1, int c1, float *add, int w2, int h2, int c2, float s1, float s2, float *out)$/;"	f
shuffle	utils.c	/^void shuffle(void *arr, size_t n, size_t size)$/;"	f
side	include/darknet.h	/^    int side;$/;"	m	struct:layer
size	include/darknet.h	/^    int min, max, size;$/;"	m	struct:load_args
size	include/darknet.h	/^    int size;$/;"	m	struct:layer
size	include/darknet.h	/^    int size;$/;"	m	struct:list
size_params	parser.c	/^typedef struct size_params{$/;"	s	file:
size_params	parser.c	/^} size_params;$/;"	t	typeref:struct:size_params	file:
smooth	include/darknet.h	/^    float smooth;$/;"	m	struct:layer
smooth_l1_cpu	blas.c	/^void smooth_l1_cpu(int n, float *pred, float *truth, float *delta, float *error)$/;"	f
softmax	blas.c	/^void softmax(float *input, int n, float temp, int stride, float *output)$/;"	f
softmax	include/darknet.h	/^    int softmax;$/;"	m	struct:layer
softmax_cpu	blas.c	/^void softmax_cpu(float *input, int n, int batch, int batch_offset, int groups, int group_offset, int stride, float temp, float *output)$/;"	f
softmax_layer	softmax_layer.h	/^typedef layer softmax_layer;$/;"	t
softmax_tree	include/darknet.h	/^    tree *softmax_tree;$/;"	m	struct:layer
softmax_x_ent_cpu	blas.c	/^void softmax_x_ent_cpu(int n, float *pred, float *truth, float *delta, float *error)$/;"	f
sort_class	include/darknet.h	/^    int sort_class;$/;"	m	struct:detection
sorta_shuffle	utils.c	/^void sorta_shuffle(void *arr, size_t n, size_t size, size_t sections)$/;"	f
spatial	include/darknet.h	/^    int spatial;$/;"	m	struct:layer
spatial_mean	include/darknet.h	/^    float * spatial_mean;$/;"	m	struct:layer
split_str	utils.c	/^list *split_str(char *s, char delim)$/;"	f
sqrt	include/darknet.h	/^    int sqrt;$/;"	m	struct:layer
squared	include/darknet.h	/^    float * squared;$/;"	m	struct:layer
squared_gpu	include/darknet.h	/^    float * squared_gpu;$/;"	m	struct:layer
srcTensorDesc	include/darknet.h	/^    cudnnTensorDescriptor_t srcTensorDesc, dstTensorDesc;$/;"	m	struct:layer
stair_activate	activations.h	/^static inline float stair_activate(float x)$/;"	f
stair_gradient	activations.h	/^static inline float stair_gradient(float x)$/;"	f
state	include/darknet.h	/^    float * state;$/;"	m	struct:layer
state_delta	include/darknet.h	/^    float * state_delta;$/;"	m	struct:layer
state_delta_gpu	include/darknet.h	/^    float * state_delta_gpu;$/;"	m	struct:layer
state_gate_layer	include/darknet.h	/^    struct layer *state_gate_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
state_gpu	include/darknet.h	/^    float * state_gpu;$/;"	m	struct:layer
state_h_layer	include/darknet.h	/^    struct layer *state_h_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
state_layer	include/darknet.h	/^    struct layer *state_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
state_r_layer	include/darknet.h	/^    struct layer *state_r_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
state_save_layer	include/darknet.h	/^    struct layer *state_save_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
state_state_layer	include/darknet.h	/^    struct layer *state_state_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
state_z_layer	include/darknet.h	/^    struct layer *state_z_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
step	include/darknet.h	/^    int step;$/;"	m	struct:network
steps	include/darknet.h	/^    int   *steps;$/;"	m	struct:network
steps	include/darknet.h	/^    int steps;$/;"	m	struct:layer
stopbackward	include/darknet.h	/^    int stopbackward;$/;"	m	struct:layer
stride	include/darknet.h	/^    int stride;$/;"	m	struct:layer
string_to_layer_type	parser.c	/^LAYER_TYPE string_to_layer_type(char * type)$/;"	f
strip	utils.c	/^void strip(char *s)$/;"	f
strip_char	utils.c	/^void strip_char(char *s, char bad)$/;"	f
subdivisions	include/darknet.h	/^    int subdivisions;$/;"	m	struct:network
sum_array	utils.c	/^float sum_array(float *a, int n)$/;"	f
sums	include/darknet.h	/^    float ** sums;$/;"	m	struct:layer
sync_args	network.c	/^} sync_args;$/;"	t	typeref:struct:__anon2	file:
sync_layer	network.c	/^void sync_layer(network **nets, int n, int j)$/;"	f
sync_layer_in_thread	network.c	/^pthread_t sync_layer_in_thread(network **nets, int n, int j)$/;"	f
sync_layer_thread	network.c	/^void *sync_layer_thread(void *ptr)$/;"	f
sync_nets	network.c	/^void sync_nets(network **nets, int n, int interval)$/;"	f
t	include/darknet.h	/^    int *t;$/;"	m	struct:network
t	include/darknet.h	/^    int t;$/;"	m	struct:__anon11
tanh	include/darknet.h	/^    int tanh;$/;"	m	struct:layer
tanh_activate	activations.h	/^static inline float tanh_activate(float x){return (exp(2*x)-1)\/(exp(2*x)+1);}$/;"	f
tanh_gradient	activations.h	/^static inline float tanh_gradient(float x){return 1-x*x;}$/;"	f
temp2_cpu	include/darknet.h	/^    float *temp2_cpu;$/;"	m	struct:layer
temp2_gpu	include/darknet.h	/^    float *temp2_gpu;$/;"	m	struct:layer
temp3_cpu	include/darknet.h	/^    float *temp3_cpu;$/;"	m	struct:layer
temp3_gpu	include/darknet.h	/^    float *temp3_gpu;$/;"	m	struct:layer
temp_cpu	include/darknet.h	/^    float *temp_cpu;$/;"	m	struct:layer
temp_gpu	include/darknet.h	/^    float *temp_gpu;$/;"	m	struct:layer
temperature	include/darknet.h	/^    float temperature;$/;"	m	struct:layer
threads	include/darknet.h	/^    int threads;$/;"	m	struct:load_args
thresh	include/darknet.h	/^    float thresh;$/;"	m	struct:layer
time_steps	include/darknet.h	/^    int time_steps;$/;"	m	struct:network
time_steps	parser.c	/^    int time_steps;$/;"	m	struct:size_params	file:
top	include/darknet.h	/^    float left, right, top, bottom;$/;"	m	struct:__anon18
top_k	utils.c	/^void top_k(float *a, int n, int k, int *index)$/;"	f
top_predictions	network.c	/^void top_predictions(network *net, int k, int *index)$/;"	f
total	include/darknet.h	/^    int total;$/;"	m	struct:layer
train	include/darknet.h	/^    int train;$/;"	m	struct:network
train_args	network.c	/^} train_args;$/;"	t	typeref:struct:__anon1	file:
train_network	network.c	/^float train_network(network *net, data d)$/;"	f
train_network_datum	network.c	/^float train_network_datum(network *net)$/;"	f
train_network_in_thread	network.c	/^pthread_t train_network_in_thread(network *net, data d, float *err)$/;"	f
train_network_sgd	network.c	/^float train_network_sgd(network *net, data d, int n)$/;"	f
train_networks	network.c	/^float train_networks(network **nets, int n, data d, int interval)$/;"	f
train_thread	network.c	/^void *train_thread(void *ptr)$/;"	f
translate_array	utils.c	/^void translate_array(float *a, int n, float s)$/;"	f
transpose_matrix	parser.c	/^void transpose_matrix(float *a, int rows, int cols)$/;"	f
tree	include/darknet.h	/^} tree;$/;"	t	typeref:struct:__anon5
truth	include/darknet.h	/^    float *truth;$/;"	m	struct:network
truth	include/darknet.h	/^    int truth;$/;"	m	struct:layer
truth_gpu	include/darknet.h	/^    float *truth_gpu;$/;"	m	struct:network
truth_thresh	include/darknet.h	/^    float truth_thresh;$/;"	m	struct:layer
truths	include/darknet.h	/^    int truths;$/;"	m	struct:layer
truths	include/darknet.h	/^    int truths;$/;"	m	struct:network
type	include/darknet.h	/^    LAYER_TYPE type;$/;"	m	struct:layer
type	include/darknet.h	/^    data_type type;$/;"	m	struct:load_args
type	parser.c	/^    char *type;$/;"	m	struct:__anon3	file:
uf	include/darknet.h	/^    struct layer *uf;$/;"	m	struct:layer	typeref:struct:layer::layer
ug	include/darknet.h	/^    struct layer *ug;$/;"	m	struct:layer	typeref:struct:layer::layer
uh	include/darknet.h	/^    struct layer *uh;$/;"	m	struct:layer	typeref:struct:layer::layer
ui	include/darknet.h	/^    struct layer *ui;$/;"	m	struct:layer	typeref:struct:layer::layer
units	include/darknet.h	/^    int units;$/;"	m	struct:layer
uo	include/darknet.h	/^    struct layer *uo;$/;"	m	struct:layer	typeref:struct:layer::layer
update	include/darknet.h	/^    void (*update)    (struct layer, update_args);$/;"	m	struct:layer
update_args	include/darknet.h	/^} update_args;$/;"	t	typeref:struct:__anon11
update_gpu	include/darknet.h	/^    void (*update_gpu)    (struct layer, update_args);$/;"	m	struct:layer
update_layer	include/darknet.h	/^    struct layer *update_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
update_network	network.c	/^void update_network(network *netp)$/;"	f
update_network_gpu	network.c	/^void update_network_gpu(network *netp)$/;"	f
upsample_cpu	blas.c	/^void upsample_cpu(float *in, int w, int h, int c, int batch, int stride, int forward, float scale, float *out)$/;"	f
ur	include/darknet.h	/^    struct layer *ur;$/;"	m	struct:layer	typeref:struct:layer::layer
used	option_list.h	/^    int used;$/;"	m	struct:__anon19
uz	include/darknet.h	/^    struct layer *uz;$/;"	m	struct:layer	typeref:struct:layer::layer
v	include/darknet.h	/^    float * v;$/;"	m	struct:layer
v_gpu	include/darknet.h	/^    float *v_gpu;$/;"	m	struct:layer
val	include/darknet.h	/^    void *val;$/;"	m	struct:node
val	option_list.h	/^    char *val;$/;"	m	struct:__anon19
vals	include/darknet.h	/^    float **vals;$/;"	m	struct:matrix
variance	include/darknet.h	/^    float * variance;$/;"	m	struct:layer
variance_array	utils.c	/^float variance_array(float *a, int n)$/;"	f
variance_cpu	blas.c	/^void variance_cpu(float *x, float *mean, int batch, int filters, int spatial, float *variance)$/;"	f
variance_delta	include/darknet.h	/^    float * variance_delta;$/;"	m	struct:layer
variance_delta_cpu	batchnorm_layer.c	/^void  variance_delta_cpu(float *x, float *delta, float *mean, float *variance, int batch, int filters, int spatial, float *variance_delta)$/;"	f
variance_delta_gpu	include/darknet.h	/^    float * variance_delta_gpu;$/;"	m	struct:layer
variance_gpu	include/darknet.h	/^    float * variance_gpu;$/;"	m	struct:layer
visualize_network	network.c	/^void visualize_network(network *net)$/;"	f
w	include/darknet.h	/^    float x, y, w, h;$/;"	m	struct:__anon15
w	include/darknet.h	/^    float x,y,w,h;$/;"	m	struct:__anon18
w	include/darknet.h	/^    int h, w, c;$/;"	m	struct:network
w	include/darknet.h	/^    int h,w,c;$/;"	m	struct:layer
w	include/darknet.h	/^    int w, h;$/;"	m	struct:__anon16
w	include/darknet.h	/^    int w;$/;"	m	struct:__anon13
w	include/darknet.h	/^    int w;$/;"	m	struct:__anon14
w	include/darknet.h	/^    int w;$/;"	m	struct:load_args
w	parser.c	/^    int w;$/;"	m	struct:size_params	file:
weightDesc	include/darknet.h	/^    cudnnFilterDescriptor_t weightDesc;$/;"	m	struct:layer
weight_change_gpu	include/darknet.h	/^    float * weight_change_gpu;$/;"	m	struct:layer
weight_updates	include/darknet.h	/^    float * weight_updates;$/;"	m	struct:layer
weight_updates_gpu	include/darknet.h	/^    float * weight_updates_gpu;$/;"	m	struct:layer
weighted_delta_cpu	blas.c	/^void weighted_delta_cpu(float *a, float *b, float *s, float *da, float *db, float *ds, int n, float *dc)$/;"	f
weighted_sum_cpu	blas.c	/^void weighted_sum_cpu(float *a, float *b, float *s, int n, float *c)$/;"	f
weights	include/darknet.h	/^    float * weights;$/;"	m	struct:layer
weights_gpu	include/darknet.h	/^    float * weights_gpu;$/;"	m	struct:layer
wf	include/darknet.h	/^    struct layer *wf;$/;"	m	struct:layer	typeref:struct:layer::layer
wg	include/darknet.h	/^    struct layer *wg;$/;"	m	struct:layer	typeref:struct:layer::layer
wh	include/darknet.h	/^    struct layer *wh;$/;"	m	struct:layer	typeref:struct:layer::layer
what_time_is_it_now	utils.c	/^double what_time_is_it_now()$/;"	f
wi	include/darknet.h	/^    struct layer *wi;$/;"	m	struct:layer	typeref:struct:layer::layer
wo	include/darknet.h	/^    struct layer *wo;$/;"	m	struct:layer	typeref:struct:layer::layer
workspace	include/darknet.h	/^    float *workspace;$/;"	m	struct:network
workspace_size	include/darknet.h	/^    size_t workspace_size;$/;"	m	struct:layer
wr	include/darknet.h	/^    struct layer *wr;$/;"	m	struct:layer	typeref:struct:layer::layer
write_all	utils.c	/^void write_all(int fd, char *buffer, size_t bytes)$/;"	f
write_all_fail	utils.c	/^int write_all_fail(int fd, char *buffer, size_t bytes)$/;"	f
write_int	utils.c	/^void write_int(int fd, int n)$/;"	f
wz	include/darknet.h	/^    struct layer *wz;$/;"	m	struct:layer	typeref:struct:layer::layer
x	include/darknet.h	/^    float * x;$/;"	m	struct:layer
x	include/darknet.h	/^    float x, y, w, h;$/;"	m	struct:__anon15
x	include/darknet.h	/^    float x,y,w,h;$/;"	m	struct:__anon18
x_gpu	include/darknet.h	/^    float * x_gpu;$/;"	m	struct:layer
x_norm	include/darknet.h	/^    float * x_norm;$/;"	m	struct:layer
x_norm_gpu	include/darknet.h	/^    float * x_norm_gpu;$/;"	m	struct:layer
xnor	include/darknet.h	/^    int xnor;$/;"	m	struct:layer
y	include/darknet.h	/^    float x, y, w, h;$/;"	m	struct:__anon15
y	include/darknet.h	/^    float x,y,w,h;$/;"	m	struct:__anon18
y	include/darknet.h	/^    matrix y;$/;"	m	struct:__anon16
z_cpu	include/darknet.h	/^    float *z_cpu;$/;"	m	struct:layer
z_gpu	include/darknet.h	/^    float *z_gpu;$/;"	m	struct:layer
