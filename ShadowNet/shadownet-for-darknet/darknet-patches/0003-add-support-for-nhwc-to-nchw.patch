From 45784416c140df5087ab21269df765bb1ef4b32e Mon Sep 17 00:00:00 2001
From: Zhichuang Sun <sun.zhi@husky.neu.edu>
Date: Tue, 12 May 2020 01:22:53 +0000
Subject: [PATCH 3/3] add support for nhwc to nchw

Signed-off-by: Zhichuang Sun <sun.zhi@husky.neu.edu>
---
 include/darknet.h         |  2 ++
 src/convolutional_layer.c | 43 +++++++++++++++++++++++++++++++++++++++++++
 src/parser.c              |  1 +
 3 files changed, 46 insertions(+)

diff --git a/include/darknet.h b/include/darknet.h
index ea6066e..ffa74c3 100644
--- a/include/darknet.h
+++ b/include/darknet.h
@@ -217,6 +217,8 @@ struct layer{
     float *rbias;
     int *obfweights;
     int units;
+    /* NHWC(tflite) to NCHW(darknet) */
+    int nhwc;
 
     char  * cweights;
     int   * indexes;
diff --git a/src/convolutional_layer.c b/src/convolutional_layer.c
index c7114c7..29be3f6 100644
--- a/src/convolutional_layer.c
+++ b/src/convolutional_layer.c
@@ -442,6 +442,38 @@ void backward_bias(float *bias_updates, float *delta, int batch, int n, int size
     }
 }
 
+/* make change in place */
+void nhwc_to_nchw(float *nhwc, int N, int H, int W, int C) {
+    int n, h, w, c;
+    float *nchw = calloc(N*H*W*C, sizeof(float));
+    for (n = 0; n < N; ++n)
+        for (h = 0; h < H; ++h)
+            for (w = 0; w < W; ++w)
+                for (c = 0; c < C; ++c)
+                    nchw[w + h*W + c*H*W + n*C*H*W] = nhwc[c+ w*C + h*W*C + n*H*W*C];
+
+    for (n = 0; n < N*H*W*C; ++n)
+        nhwc[n] = nchw[n];
+
+    free(nchw);
+}
+
+/* make change in place */
+void nchw_to_nhwc(float *nchw, int N, int H, int W, int C) {
+    int n, h, w, c;
+    float *nhwc = calloc(N*H*W*C, sizeof(float));
+    for (n = 0; n < N; ++n)
+        for (h = 0; h < H; ++h)
+            for (w = 0; w < W; ++w)
+                for (c = 0; c < C; ++c)
+                    nhwc[c+ w*C + h*W*C + n*H*W*C] = nchw[w + h*W + c*H*W + n*C*H*W]; 
+
+    for (n = 0; n < N*H*W*C; ++n)
+        nchw[n] = nhwc[n];
+
+    free(nhwc);
+}
+
 void forward_convolutional_layer(convolutional_layer l, network net)
 {
     int i, j;
@@ -455,6 +487,12 @@ void forward_convolutional_layer(convolutional_layer l, network net)
         net.input = l.binary_input;
     }
 
+    if(l.nhwc == 1){
+        printf("CONV nhwc == 1\n");
+        nhwc_to_nchw(l.weights, l.n, l.size, l.size, l.c);
+        nhwc_to_nchw(net.input, l.batch, l.h, l.w, l.c);
+    }
+
     int m = l.n/l.groups;
     int k = l.size*l.size*l.c/l.groups;
     int n = l.out_w*l.out_h;
@@ -474,12 +512,17 @@ void forward_convolutional_layer(convolutional_layer l, network net)
         }
     }
 
+    if(l.nhwc == 1){
+        nchw_to_nhwc(l.output, l.batch, l.out_h, l.out_w, l.n);
+    }
+
     if(l.batch_normalize){
         forward_batchnorm_layer(l, net);
     } else {
         add_bias(l.output, l.biases, l.batch, l.n, l.out_h*l.out_w);
     }
 
+
     DUMPW8("conv forward output before bias bytes:",l.outputs, l.output);
     DUMPW4F("conv forward output before bias float:",l.outputs, l.output);
 
diff --git a/src/parser.c b/src/parser.c
index 6dcd0d4..36805e5 100644
--- a/src/parser.c
+++ b/src/parser.c
@@ -209,6 +209,7 @@ convolutional_layer parse_convolutional(list *options, size_params params)
     convolutional_layer layer = make_convolutional_layer(batch,h,w,c,n,groups,size,stride,padding,activation, batch_normalize, binary, xnor, params.net->adam);
     layer.flipped = option_find_int_quiet(options, "flipped", 0);
     layer.dot = option_find_float_quiet(options, "dot", 0);
+    layer.nhwc = option_find_int(options, "nhwc",0);
 
     return layer;
 }
-- 
2.7.4

